<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [SW_DP11_INIT\SW_DP11_INIT.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image SW_DP11_INIT\SW_DP11_INIT.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sun Aug 04 22:40:29 2019
<BR><P>
<H3>Maximum Stack Usage =       2440 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; data_indicatorsInit
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[493]">vApplicationStackOverflowHook</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[493]">vApplicationStackOverflowHook</a><BR>
 <LI><a href="#[2a]">CAN1_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">CAN1_RX1_IRQHandler</a><BR>
 <LI><a href="#[f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BusFault_Handler</a><BR>
 <LI><a href="#[d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">HardFault_Handler</a><BR>
 <LI><a href="#[e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">MemManage_Handler</a><BR>
 <LI><a href="#[10]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UsageFault_Handler</a><BR>
 <LI><a href="#[422]">touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[422]">touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</a><BR>
 <LI><a href="#[429]">touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[429]">touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)</a><BR>
 <LI><a href="#[428]">touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[428]">touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)</a><BR>
 <LI><a href="#[48d]">vApplicationMallocFailedHook</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48d]">vApplicationMallocFailedHook</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[79]">ADC_DMAConvCplt</a> from stm32f7xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[7b]">ADC_DMAError</a> from stm32f7xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[7a]">ADC_DMAHalfConvCplt</a> from stm32f7xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[27]">ADC_IRQHandler</a> from stm32f7xx_it.o(i.ADC_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[f]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[29]">CAN1_RX0_IRQHandler</a> from stm32f7xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2a]">CAN1_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2b]">CAN1_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[28]">CAN1_TX_IRQHandler</a> from stm32f7xx_it.o(i.CAN1_TX_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[55]">CAN2_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[56]">CAN2_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[57]">CAN2_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[54]">CAN2_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[72]">CEC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[63]">DCMI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[44]">DMA1_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6e]">DMA2D_IRQHandler</a> from stm32f7xx_it.o(i.DMA2D_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream0_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[52]">ETH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[53]">ETH_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1b]">EXTI0_IRQHandler</a> from stm32f7xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3d]">EXTI15_10_IRQHandler</a> from stm32f7xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1c]">EXTI1_IRQHandler</a> from stm32f7xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1d]">EXTI2_IRQHandler</a> from stm32f7xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1e]">EXTI3_IRQHandler</a> from stm32f7xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1f]">EXTI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2c]">EXTI9_5_IRQHandler</a> from stm32f7xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[19]">FLASH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[45]">FMC_IRQHandler</a> from stm32f7xx_it.o(i.FMC_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[65]">FPU_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[35]">I2C1_ER_IRQHandler</a> from stm32f7xx_it.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[34]">I2C1_EV_IRQHandler</a> from stm32f7xx_it.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[37]">I2C2_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[36]">I2C2_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5e]">I2C3_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5d]">I2C3_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[74]">I2C4_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[73]">I2C4_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7d]">I2C_DMAAbort</a> from stm32f7xx_hal_i2c.o(i.I2C_DMAAbort) referenced from stm32f7xx_hal_i2c.o(i.I2C_ITError)
 <LI><a href="#[7e]">I2C_Slave_ISR_IT</a> from stm32f7xx_hal_i2c.o(i.I2C_Slave_ISR_IT) referenced from stm32f7xx_hal_i2c.o(i.I2C_ITError)
 <LI><a href="#[71]">LPTIM1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6d]">LTDC_ER_IRQHandler</a> from stm32f7xx_it.o(i.LTDC_ER_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6c]">LTDC_IRQHandler</a> from stm32f7xx_it.o(i.LTDC_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[58]">OTG_FS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3f]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[62]">OTG_HS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[16]">PVD_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7c]">QSPI_DMAAbortCplt</a> from stm32f7xx_hal_qspi.o(i.QSPI_DMAAbortCplt) referenced from stm32f7xx_hal_qspi.o(i.HAL_QSPI_Abort_IT)
 <LI><a href="#[7c]">QSPI_DMAAbortCplt</a> from stm32f7xx_hal_qspi.o(i.QSPI_DMAAbortCplt) referenced from stm32f7xx_hal_qspi.o(i.HAL_QSPI_IRQHandler)
 <LI><a href="#[70]">QUADSPI_IRQHandler</a> from stm32f7xx_it.o(i.QUADSPI_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[64]">RNG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3e]">RTC_Alarm_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[18]">RTC_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6b]">SAI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6f]">SAI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[46]">SDMMC1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[75]">SPDIF_RX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[38]">SPI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[39]">SPI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[48]">SPI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[68]">SPI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[69]">SPI5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6a]">SPI6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[8f]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[14]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[77]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[17]">TAMP_STAMP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2d]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[30]">TIM1_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2f]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2e]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[31]">TIM2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[32]">TIM3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[33]">TIM4_IRQHandler</a> from stm32f7xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[47]">TIM5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4b]">TIM6_DAC_IRQHandler</a> from stm32f7xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4c]">TIM7_IRQHandler</a> from stm32f7xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[40]">TIM8_BRK_TIM12_IRQHandler</a> from stm32f7xx_it.o(i.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[43]">TIM8_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[42]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[41]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[49]">UART4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4a]">UART5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[66]">UART7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[67]">UART8_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3a]">USART1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3b]">USART2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3c]">USART3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5c]">USART6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[10]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[15]">WWDG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[8a]">IdleTaskHook(void*)</a> from oswrappers.o(i._Z12IdleTaskHookPv) referenced from oswrappers.o(i.vApplicationIdleHook)
 <LI><a href="#[80]">DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)</a> from stm32f7dma.o(i._Z22DMA2D_XferCpltCallbackP21__DMA2D_HandleTypeDef) referenced from stm32f7dma.o(i._ZN10STM32F7DMA10initializeEv)
 <LI><a href="#[81]">DMA2D_XferErrorCallback(__DMA2D_HandleTypeDef*)</a> from stm32f7dma.o(i._Z23DMA2D_XferErrorCallbackP21__DMA2D_HandleTypeDef) referenced from stm32f7dma.o(i._ZN10STM32F7DMA10initializeEv)
 <LI><a href="#[b6]">STM32F7DMA::initialize()</a> from stm32f7dma.o(i._ZN10STM32F7DMA10initializeEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[b3]">STM32F7DMA::getBlitCaps()</a> from stm32f7dma.o(i._ZN10STM32F7DMA11getBlitCapsEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[bc]">STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&)</a> from stm32f7dma.o(i._ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[bd]">STM32F7DMA::setupDataFill(const touchgfx::BlitOp&)</a> from stm32f7dma.o(i._ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[b8]">STM32F7DMA::signalDMAInterrupt()</a> from stm32f7dma.o(i._ZN10STM32F7DMA18signalDMAInterruptEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[b7]">STM32F7DMA::start()</a> from stm32f7dma.o(i._ZN10STM32F7DMA5startEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[85]">STM32F7DMA::~STM32F7DMA()</a> from stm32f7dma.o(i._ZN10STM32F7DMAD1Ev) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[85]">STM32F7DMA::~STM32F7DMA()</a> from stm32f7dma.o(i._ZN10STM32F7DMAD1Ev) referenced from boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
 <LI><a href="#[d3]">STM32F7HAL::enableInterrupts()</a> from stm32f7hal.o(i._ZN10STM32F7HAL16enableInterruptsEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[c3]">STM32F7HAL::flushFrameBuffer(const touchgfx::Rect&)</a> from stm32f7hal.o(i._ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[d4]">STM32F7HAL::disableInterrupts()</a> from stm32f7hal.o(i._ZN10STM32F7HAL17disableInterruptsEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[d8]">STM32F7HAL::getTFTCurrentLine()</a> from stm32f7hal.o(i._ZN10STM32F7HAL17getTFTCurrentLineEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[dc]">STM32F7HAL::setTFTFrameBuffer(unsigned short*)</a> from stm32f7hal.o(i._ZN10STM32F7HAL17setTFTFrameBufferEPt) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[d2]">STM32F7HAL::configureInterrupts()</a> from stm32f7hal.o(i._ZN10STM32F7HAL19configureInterruptsEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[d5]">STM32F7HAL::enableLCDControllerInterrupt()</a> from stm32f7hal.o(i._ZN10STM32F7HAL28enableLCDControllerInterruptEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[8c]">STM32F7HAL::~STM32F7HAL()</a> from boardconfiguration.o(i._ZN10STM32F7HALD1Ev) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[8c]">STM32F7HAL::~STM32F7HAL()</a> from boardconfiguration.o(i._ZN10STM32F7HALD1Ev) referenced from boardconfiguration.o(t._ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtjj)
 <LI><a href="#[e2]">SKIDPADView::setupScreen()</a> from skidpadview.o(i._ZN11SKIDPADView11setupScreenEv) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[ef]">SKIDPADView::checkAntistall()</a> from skidpadview.o(i._ZN11SKIDPADView14checkAntistallEv) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[ed]">SKIDPADView::checkEmergency()</a> from skidpadview.o(i._ZN11SKIDPADView14checkEmergencyEv) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[ea]">SKIDPADView::refreshSkidpad()</a> from skidpadview.o(i._ZN11SKIDPADView14refreshSkidpadEv) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[e4]">SKIDPADView::tearDownScreen()</a> from skidpadview.o(i._ZN11SKIDPADView14tearDownScreenEv) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[ec]">SKIDPADView::screenEntryPopup()</a> from skidpadview.o(i._ZN11SKIDPADView16screenEntryPopupEv) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[eb]">SKIDPADView::checkChangeScreen()</a> from skidpadview.o(i._ZN11SKIDPADView17checkChangeScreenEv) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[ee]">SKIDPADView::checkFuelIndicator()</a> from skidpadview.o(i._ZN11SKIDPADView18checkFuelIndicatorEv) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[e0]">SKIDPADView::~SKIDPADView()</a> from skidpadview.o(i._ZN11SKIDPADViewD1Ev) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[f1]">Screen1View::setupScreen()</a> from screen1view.o(i._ZN11Screen1View11setupScreenEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[f4]">Screen1View::refreshScreen1()</a> from screen1view.o(i._ZN11Screen1View14refreshScreen1Ev) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[f3]">Screen1View::checkChangeScreen()</a> from screen1view.o(i._ZN11Screen1View17checkChangeScreenEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[f0]">Screen1View::~Screen1View()</a> from screen1view.o(i._ZN11Screen1ViewD1Ev) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[8d]">FrontendHeap::~FrontendHeap()</a> from boardconfiguration.o(i._ZN12FrontendHeapD1Ev) referenced from boardconfiguration.o(.constdata__ZTV12FrontendHeap)
 <LI><a href="#[8d]">FrontendHeap::~FrontendHeap()</a> from boardconfiguration.o(i._ZN12FrontendHeapD1Ev) referenced from boardconfiguration.o(t._ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtjj)
 <LI><a href="#[f6]">SETTINGSView::setupScreen()</a> from settingsview.o(i._ZN12SETTINGSView11setupScreenEv) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[104]">SETTINGSView::displaySkidpad()</a> from settingsview.o(i._ZN12SETTINGSView14displaySkidpadEv) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[f7]">SETTINGSView::tearDownScreen()</a> from settingsview.o(i._ZN12SETTINGSView14tearDownScreenEv) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[fe]">SETTINGSView::moveSelectedBox()</a> from settingsview.o(i._ZN12SETTINGSView15moveSelectedBoxEv) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[f8]">SETTINGSView::refreshSettings()</a> from settingsview.o(i._ZN12SETTINGSView15refreshSettingsEv) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[fa]">SETTINGSView::changeSchermata0(bool)</a> from settingsview.o(i._ZN12SETTINGSView16changeSchermata0Eb) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[fb]">SETTINGSView::changeSchermata1(bool)</a> from settingsview.o(i._ZN12SETTINGSView16changeSchermata1Eb) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[fc]">SETTINGSView::changeSchermata2(bool)</a> from settingsview.o(i._ZN12SETTINGSView16changeSchermata2Eb) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[fd]">SETTINGSView::changeSchermata3(bool)</a> from settingsview.o(i._ZN12SETTINGSView16changeSchermata3Eb) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[103]">SETTINGSView::displayAutocross()</a> from settingsview.o(i._ZN12SETTINGSView16displayAutocrossEv) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[102]">SETTINGSView::displayEndurance()</a> from settingsview.o(i._ZN12SETTINGSView16displayEnduranceEv) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[f9]">SETTINGSView::checkChangeScreen()</a> from settingsview.o(i._ZN12SETTINGSView17checkChangeScreenEv) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[101]">SETTINGSView::displayAcceleration()</a> from settingsview.o(i._ZN12SETTINGSView19displayAccelerationEv) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[ff]">SETTINGSView::calibrationDcuDisplay()</a> from settingsview.o(i._ZN12SETTINGSView21calibrationDcuDisplayEv) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[100]">SETTINGSView::calibrationImuDisplay()</a> from settingsview.o(i._ZN12SETTINGSView21calibrationImuDisplayEv) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[f5]">SETTINGSView::~SETTINGSView()</a> from settingsview.o(i._ZN12SETTINGSViewD1Ev) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[106]">AUTOCROSSView::setupScreen()</a> from autocrossview.o(i._ZN13AUTOCROSSView11setupScreenEv) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[10e]">AUTOCROSSView::checkAntistall()</a> from autocrossview.o(i._ZN13AUTOCROSSView14checkAntistallEv) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[10c]">AUTOCROSSView::checkEmergency()</a> from autocrossview.o(i._ZN13AUTOCROSSView14checkEmergencyEv) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[107]">AUTOCROSSView::tearDownScreen()</a> from autocrossview.o(i._ZN13AUTOCROSSView14tearDownScreenEv) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[108]">AUTOCROSSView::refreshAutocross()</a> from autocrossview.o(i._ZN13AUTOCROSSView16refreshAutocrossEv) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[10a]">AUTOCROSSView::screenEntryPopup()</a> from autocrossview.o(i._ZN13AUTOCROSSView16screenEntryPopupEv) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[109]">AUTOCROSSView::checkChangeScreen()</a> from autocrossview.o(i._ZN13AUTOCROSSView17checkChangeScreenEv) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[10d]">AUTOCROSSView::checkFuelIndicator()</a> from autocrossview.o(i._ZN13AUTOCROSSView18checkFuelIndicatorEv) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[10b]">AUTOCROSSView::screenCheckMessage()</a> from autocrossview.o(i._ZN13AUTOCROSSView18screenCheckMessageEv) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[105]">AUTOCROSSView::~AUTOCROSSView()</a> from autocrossview.o(i._ZN13AUTOCROSSViewD1Ev) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[110]">ENDURANCEView::setupScreen()</a> from enduranceview.o(i._ZN13ENDURANCEView11setupScreenEv) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[117]">ENDURANCEView::checkAntistall()</a> from enduranceview.o(i._ZN13ENDURANCEView14checkAntistallEv) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[115]">ENDURANCEView::checkEmergency()</a> from enduranceview.o(i._ZN13ENDURANCEView14checkEmergencyEv) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[111]">ENDURANCEView::tearDownScreen()</a> from enduranceview.o(i._ZN13ENDURANCEView14tearDownScreenEv) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[112]">ENDURANCEView::refreshEndurance()</a> from enduranceview.o(i._ZN13ENDURANCEView16refreshEnduranceEv) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[114]">ENDURANCEView::screenEntryPopup()</a> from enduranceview.o(i._ZN13ENDURANCEView16screenEntryPopupEv) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[113]">ENDURANCEView::checkChangeScreen()</a> from enduranceview.o(i._ZN13ENDURANCEView17checkChangeScreenEv) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[116]">ENDURANCEView::checkFuelIndicator()</a> from enduranceview.o(i._ZN13ENDURANCEView18checkFuelIndicatorEv) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[10f]">ENDURANCEView::~ENDURANCEView()</a> from enduranceview.o(i._ZN13ENDURANCEViewD1Ev) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[119]">DEBUG_MODEView::setupScreen()</a> from debug_modeview.o(i._ZN14DEBUG_MODEView11setupScreenEv) referenced from debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
 <LI><a href="#[11a]">DEBUG_MODEView::tearDownScreen()</a> from debug_modeview.o(i._ZN14DEBUG_MODEView14tearDownScreenEv) referenced from debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
 <LI><a href="#[11b]">DEBUG_MODEView::refreshDebugMode()</a> from debug_modeview.o(i._ZN14DEBUG_MODEView16refreshDebugModeEv) referenced from debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
 <LI><a href="#[11c]">DEBUG_MODEView::checkChangeScreen()</a> from debug_modeview.o(i._ZN14DEBUG_MODEView17checkChangeScreenEv) referenced from debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
 <LI><a href="#[118]">DEBUG_MODEView::~DEBUG_MODEView()</a> from debug_modeview.o(i._ZN14DEBUG_MODEViewD1Ev) referenced from debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
 <LI><a href="#[11e]">NOISE_MODEView::setupScreen()</a> from noise_modeview.o(i._ZN14NOISE_MODEView11setupScreenEv) referenced from noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
 <LI><a href="#[11f]">NOISE_MODEView::tearDownScreen()</a> from noise_modeview.o(i._ZN14NOISE_MODEView14tearDownScreenEv) referenced from noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
 <LI><a href="#[121]">NOISE_MODEView::refreshNoiseMode()</a> from noise_modeview.o(i._ZN14NOISE_MODEView16refreshNoiseModeEv) referenced from noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
 <LI><a href="#[120]">NOISE_MODEView::checkChangeScreen()</a> from noise_modeview.o(i._ZN14NOISE_MODEView17checkChangeScreenEv) referenced from noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
 <LI><a href="#[11d]">NOISE_MODEView::~NOISE_MODEView()</a> from noise_modeview.o(i._ZN14NOISE_MODEViewD1Ev) referenced from noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
 <LI><a href="#[123]">BOARD_DEBUGView::setupScreen()</a> from board_debugview.o(i._ZN15BOARD_DEBUGView11setupScreenEv) referenced from board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
 <LI><a href="#[124]">BOARD_DEBUGView::tearDownScreen()</a> from board_debugview.o(i._ZN15BOARD_DEBUGView14tearDownScreenEv) referenced from board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
 <LI><a href="#[126]">BOARD_DEBUGView::checkChangeScreen()</a> from board_debugview.o(i._ZN15BOARD_DEBUGView17checkChangeScreenEv) referenced from board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
 <LI><a href="#[125]">BOARD_DEBUGView::refreshBoardDebug()</a> from board_debugview.o(i._ZN15BOARD_DEBUGView17refreshBoardDebugEv) referenced from board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
 <LI><a href="#[122]">BOARD_DEBUGView::~BOARD_DEBUGView()</a> from board_debugview.o(i._ZN15BOARD_DEBUGViewD1Ev) referenced from board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
 <LI><a href="#[128]">SKIDPADViewBase::setupScreen()</a> from skidpadviewbase.o(i._ZN15SKIDPADViewBase11setupScreenEv) referenced from skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
 <LI><a href="#[127]">SKIDPADViewBase::~SKIDPADViewBase()</a> from skidpadview.o(i._ZN15SKIDPADViewBaseD1Ev) referenced from skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
 <LI><a href="#[12a]">Screen1ViewBase::setupScreen()</a> from screen1viewbase.o(i._ZN15Screen1ViewBase11setupScreenEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[129]">Screen1ViewBase::~Screen1ViewBase()</a> from screen1viewbase.o(i._ZN15Screen1ViewBaseD1Ev) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[12c]">ACCELERATIONView::setupScreen()</a> from accelerationview.o(i._ZN16ACCELERATIONView11setupScreenEv) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[134]">ACCELERATIONView::checkAntistall()</a> from accelerationview.o(i._ZN16ACCELERATIONView14checkAntistallEv) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[132]">ACCELERATIONView::checkEmergency()</a> from accelerationview.o(i._ZN16ACCELERATIONView14checkEmergencyEv) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[12d]">ACCELERATIONView::tearDownScreen()</a> from accelerationview.o(i._ZN16ACCELERATIONView14tearDownScreenEv) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[130]">ACCELERATIONView::screenEntryPopup()</a> from accelerationview.o(i._ZN16ACCELERATIONView16screenEntryPopupEv) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[12f]">ACCELERATIONView::checkChangeScreen()</a> from accelerationview.o(i._ZN16ACCELERATIONView17checkChangeScreenEv) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[133]">ACCELERATIONView::checkFuelIndicator()</a> from accelerationview.o(i._ZN16ACCELERATIONView18checkFuelIndicatorEv) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[131]">ACCELERATIONView::screenCheckMessage()</a> from accelerationview.o(i._ZN16ACCELERATIONView18screenCheckMessageEv) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[12e]">ACCELERATIONView::refreshAcceleration()</a> from accelerationview.o(i._ZN16ACCELERATIONView19refreshAccelerationEv) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[12b]">ACCELERATIONView::~ACCELERATIONView()</a> from accelerationview.o(i._ZN16ACCELERATIONViewD1Ev) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[136]">SETTINGSViewBase::setupScreen()</a> from settingsviewbase.o(i._ZN16SETTINGSViewBase11setupScreenEv) referenced from settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
 <LI><a href="#[135]">SETTINGSViewBase::~SETTINGSViewBase()</a> from settingsview.o(i._ZN16SETTINGSViewBaseD1Ev) referenced from settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
 <LI><a href="#[138]">SKIDPADPresenter::deactivate()</a> from skidpadpresenter.o(i._ZN16SKIDPADPresenter10deactivateEv) referenced from skidpadpresenter.o(.constdata__ZTV16SKIDPADPresenter)
 <LI><a href="#[13a]">SKIDPADPresenter::update()</a> from skidpadpresenter.o(i._ZN16SKIDPADPresenter6updateEv) referenced from skidpadpresenter.o(.constdata__ZTV16SKIDPADPresenter)
 <LI><a href="#[137]">SKIDPADPresenter::activate()</a> from skidpadpresenter.o(i._ZN16SKIDPADPresenter8activateEv) referenced from skidpadpresenter.o(.constdata__ZTV16SKIDPADPresenter)
 <LI><a href="#[139]">SKIDPADPresenter::~SKIDPADPresenter()</a> from skidpadpresenter.o(i._ZN16SKIDPADPresenterD1Ev) referenced from skidpadpresenter.o(.constdata__ZTV16SKIDPADPresenter)
 <LI><a href="#[13d]">Screen1Presenter::deactivate()</a> from screen1presenter.o(i._ZN16Screen1Presenter10deactivateEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[13f]">Screen1Presenter::update()</a> from screen1presenter.o(i._ZN16Screen1Presenter6updateEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[13c]">Screen1Presenter::activate()</a> from screen1presenter.o(i._ZN16Screen1Presenter8activateEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[13e]">Screen1Presenter::~Screen1Presenter()</a> from screen1presenter.o(i._ZN16Screen1PresenterD1Ev) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[142]">AUTOCROSSViewBase::setupScreen()</a> from autocrossviewbase.o(i._ZN17AUTOCROSSViewBase11setupScreenEv) referenced from autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
 <LI><a href="#[141]">AUTOCROSSViewBase::~AUTOCROSSViewBase()</a> from autocrossview.o(i._ZN17AUTOCROSSViewBaseD1Ev) referenced from autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
 <LI><a href="#[144]">ENDURANCEViewBase::setupScreen()</a> from enduranceviewbase.o(i._ZN17ENDURANCEViewBase11setupScreenEv) referenced from enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
 <LI><a href="#[143]">ENDURANCEViewBase::~ENDURANCEViewBase()</a> from enduranceview.o(i._ZN17ENDURANCEViewBaseD1Ev) referenced from enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
 <LI><a href="#[146]">SETTINGSPresenter::deactivate()</a> from settingspresenter.o(i._ZN17SETTINGSPresenter10deactivateEv) referenced from settingspresenter.o(.constdata__ZTV17SETTINGSPresenter)
 <LI><a href="#[148]">SETTINGSPresenter::update()</a> from settingspresenter.o(i._ZN17SETTINGSPresenter6updateEv) referenced from settingspresenter.o(.constdata__ZTV17SETTINGSPresenter)
 <LI><a href="#[145]">SETTINGSPresenter::activate()</a> from settingspresenter.o(i._ZN17SETTINGSPresenter8activateEv) referenced from settingspresenter.o(.constdata__ZTV17SETTINGSPresenter)
 <LI><a href="#[147]">SETTINGSPresenter::~SETTINGSPresenter()</a> from settingspresenter.o(i._ZN17SETTINGSPresenterD1Ev) referenced from settingspresenter.o(.constdata__ZTV17SETTINGSPresenter)
 <LI><a href="#[14b]">AUTOCROSSPresenter::deactivate()</a> from autocrosspresenter.o(i._ZN18AUTOCROSSPresenter10deactivateEv) referenced from autocrosspresenter.o(.constdata__ZTV18AUTOCROSSPresenter)
 <LI><a href="#[14d]">AUTOCROSSPresenter::update()</a> from autocrosspresenter.o(i._ZN18AUTOCROSSPresenter6updateEv) referenced from autocrosspresenter.o(.constdata__ZTV18AUTOCROSSPresenter)
 <LI><a href="#[14a]">AUTOCROSSPresenter::activate()</a> from autocrosspresenter.o(i._ZN18AUTOCROSSPresenter8activateEv) referenced from autocrosspresenter.o(.constdata__ZTV18AUTOCROSSPresenter)
 <LI><a href="#[14c]">AUTOCROSSPresenter::~AUTOCROSSPresenter()</a> from autocrosspresenter.o(i._ZN18AUTOCROSSPresenterD1Ev) referenced from autocrosspresenter.o(.constdata__ZTV18AUTOCROSSPresenter)
 <LI><a href="#[150]">DEBUG_MODEViewBase::setupScreen()</a> from debug_modeviewbase.o(i._ZN18DEBUG_MODEViewBase11setupScreenEv) referenced from debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
 <LI><a href="#[14f]">DEBUG_MODEViewBase::~DEBUG_MODEViewBase()</a> from debug_modeviewbase.o(i._ZN18DEBUG_MODEViewBaseD1Ev) referenced from debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
 <LI><a href="#[152]">ENDURANCEPresenter::deactivate()</a> from endurancepresenter.o(i._ZN18ENDURANCEPresenter10deactivateEv) referenced from endurancepresenter.o(.constdata__ZTV18ENDURANCEPresenter)
 <LI><a href="#[154]">ENDURANCEPresenter::update()</a> from endurancepresenter.o(i._ZN18ENDURANCEPresenter6updateEv) referenced from endurancepresenter.o(.constdata__ZTV18ENDURANCEPresenter)
 <LI><a href="#[151]">ENDURANCEPresenter::activate()</a> from endurancepresenter.o(i._ZN18ENDURANCEPresenter8activateEv) referenced from endurancepresenter.o(.constdata__ZTV18ENDURANCEPresenter)
 <LI><a href="#[153]">ENDURANCEPresenter::~ENDURANCEPresenter()</a> from endurancepresenter.o(i._ZN18ENDURANCEPresenterD1Ev) referenced from endurancepresenter.o(.constdata__ZTV18ENDURANCEPresenter)
 <LI><a href="#[157]">NOISE_MODEViewBase::setupScreen()</a> from noise_modeviewbase.o(i._ZN18NOISE_MODEViewBase11setupScreenEv) referenced from noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
 <LI><a href="#[156]">NOISE_MODEViewBase::~NOISE_MODEViewBase()</a> from noise_modeview.o(i._ZN18NOISE_MODEViewBaseD1Ev) referenced from noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
 <LI><a href="#[159]">BOARD_DEBUGViewBase::setupScreen()</a> from board_debugviewbase.o(i._ZN19BOARD_DEBUGViewBase11setupScreenEv) referenced from board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
 <LI><a href="#[158]">BOARD_DEBUGViewBase::~BOARD_DEBUGViewBase()</a> from board_debugview.o(i._ZN19BOARD_DEBUGViewBaseD1Ev) referenced from board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
 <LI><a href="#[15b]">DEBUG_MODEPresenter::deactivate()</a> from debug_modepresenter.o(i._ZN19DEBUG_MODEPresenter10deactivateEv) referenced from debug_modepresenter.o(.constdata__ZTV19DEBUG_MODEPresenter)
 <LI><a href="#[15d]">DEBUG_MODEPresenter::update()</a> from debug_modepresenter.o(i._ZN19DEBUG_MODEPresenter6updateEv) referenced from debug_modepresenter.o(.constdata__ZTV19DEBUG_MODEPresenter)
 <LI><a href="#[15a]">DEBUG_MODEPresenter::activate()</a> from debug_modepresenter.o(i._ZN19DEBUG_MODEPresenter8activateEv) referenced from debug_modepresenter.o(.constdata__ZTV19DEBUG_MODEPresenter)
 <LI><a href="#[15c]">DEBUG_MODEPresenter::~DEBUG_MODEPresenter()</a> from debug_modepresenter.o(i._ZN19DEBUG_MODEPresenterD1Ev) referenced from debug_modepresenter.o(.constdata__ZTV19DEBUG_MODEPresenter)
 <LI><a href="#[163]">FrontendApplication::handleTickEvent()</a> from frontendapplication.o(i._ZN19FrontendApplication15handleTickEventEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[169]">NOISE_MODEPresenter::deactivate()</a> from noise_modepresenter.o(i._ZN19NOISE_MODEPresenter10deactivateEv) referenced from noise_modepresenter.o(.constdata__ZTV19NOISE_MODEPresenter)
 <LI><a href="#[16b]">NOISE_MODEPresenter::update()</a> from noise_modepresenter.o(i._ZN19NOISE_MODEPresenter6updateEv) referenced from noise_modepresenter.o(.constdata__ZTV19NOISE_MODEPresenter)
 <LI><a href="#[168]">NOISE_MODEPresenter::activate()</a> from noise_modepresenter.o(i._ZN19NOISE_MODEPresenter8activateEv) referenced from noise_modepresenter.o(.constdata__ZTV19NOISE_MODEPresenter)
 <LI><a href="#[16a]">NOISE_MODEPresenter::~NOISE_MODEPresenter()</a> from noise_modepresenter.o(i._ZN19NOISE_MODEPresenterD1Ev) referenced from noise_modepresenter.o(.constdata__ZTV19NOISE_MODEPresenter)
 <LI><a href="#[16e]">ACCELERATIONViewBase::setupScreen()</a> from accelerationviewbase.o(i._ZN20ACCELERATIONViewBase11setupScreenEv) referenced from accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
 <LI><a href="#[16d]">ACCELERATIONViewBase::~ACCELERATIONViewBase()</a> from accelerationview.o(i._ZN20ACCELERATIONViewBaseD1Ev) referenced from accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
 <LI><a href="#[170]">BOARD_DEBUGPresenter::deactivate()</a> from board_debugpresenter.o(i._ZN20BOARD_DEBUGPresenter10deactivateEv) referenced from board_debugpresenter.o(.constdata__ZTV20BOARD_DEBUGPresenter)
 <LI><a href="#[172]">BOARD_DEBUGPresenter::update()</a> from board_debugpresenter.o(i._ZN20BOARD_DEBUGPresenter6updateEv) referenced from board_debugpresenter.o(.constdata__ZTV20BOARD_DEBUGPresenter)
 <LI><a href="#[16f]">BOARD_DEBUGPresenter::activate()</a> from board_debugpresenter.o(i._ZN20BOARD_DEBUGPresenter8activateEv) referenced from board_debugpresenter.o(.constdata__ZTV20BOARD_DEBUGPresenter)
 <LI><a href="#[171]">BOARD_DEBUGPresenter::~BOARD_DEBUGPresenter()</a> from board_debugpresenter.o(i._ZN20BOARD_DEBUGPresenterD1Ev) referenced from board_debugpresenter.o(.constdata__ZTV20BOARD_DEBUGPresenter)
 <LI><a href="#[175]">ACCELERATIONPresenter::deactivate()</a> from accelerationpresenter.o(i._ZN21ACCELERATIONPresenter10deactivateEv) referenced from accelerationpresenter.o(.constdata__ZTV21ACCELERATIONPresenter)
 <LI><a href="#[177]">ACCELERATIONPresenter::update()</a> from accelerationpresenter.o(i._ZN21ACCELERATIONPresenter6updateEv) referenced from accelerationpresenter.o(.constdata__ZTV21ACCELERATIONPresenter)
 <LI><a href="#[174]">ACCELERATIONPresenter::activate()</a> from accelerationpresenter.o(i._ZN21ACCELERATIONPresenter8activateEv) referenced from accelerationpresenter.o(.constdata__ZTV21ACCELERATIONPresenter)
 <LI><a href="#[176]">ACCELERATIONPresenter::~ACCELERATIONPresenter()</a> from accelerationpresenter.o(i._ZN21ACCELERATIONPresenterD1Ev) referenced from accelerationpresenter.o(.constdata__ZTV21ACCELERATIONPresenter)
 <LI><a href="#[84]">ApplicationFontProvider::~ApplicationFontProvider()</a> from boardconfiguration.o(i._ZN23ApplicationFontProviderD1Ev) referenced from applicationfontprovider.o(.constdata__ZTV23ApplicationFontProvider)
 <LI><a href="#[84]">ApplicationFontProvider::~ApplicationFontProvider()</a> from boardconfiguration.o(i._ZN23ApplicationFontProviderD1Ev) referenced from boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
 <LI><a href="#[ad]">FrontendApplicationBase::gotoSKIDPADScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase33gotoSKIDPADScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[b2]">FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[ae]">FrontendApplicationBase::gotoSETTINGSScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase34gotoSETTINGSScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[ac]">FrontendApplicationBase::gotoAUTOCROSSScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase35gotoAUTOCROSSScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[aa]">FrontendApplicationBase::gotoENDURANCEScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase35gotoENDURANCEScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[b0]">FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase36gotoDEBUG_MODEScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[b1]">FrontendApplicationBase::gotoNOISE_MODEScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase36gotoNOISE_MODEScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[af]">FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase37gotoBOARD_DEBUGScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[ab]">FrontendApplicationBase::gotoACCELERATIONScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase38gotoACCELERATIONScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[17a]">FrontendApplicationBase::~FrontendApplicationBase()</a> from boardconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[197]">touchgfx::Transition::setScreenContainer(touchgfx::Container&)</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[196]">touchgfx::Transition::init()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[195]">touchgfx::Transition::tearDown()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[162]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[162]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[162]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[162]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[160]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[160]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[160]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[160]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[179]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[179]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[179]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[15f]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[15f]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[15f]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[15f]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[161]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[161]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[161]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[161]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[167]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[167]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[167]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[167]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[17b]">touchgfx::Application::handlePendingScreenTransition()</a> from application.o(i._ZN8touchgfx11Application29handlePendingScreenTransitionEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[166]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[166]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[166]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[166]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[165]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[165]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[165]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[165]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[18e]">touchgfx::CanvasWidget::setPainter(touchgfx::AbstractPainter&)</a> from canvaswidget.o(i._ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[18e]">touchgfx::CanvasWidget::setPainter(touchgfx::AbstractPainter&)</a> from canvaswidget.o(i._ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[17c]">touchgfx::CanvasWidget::~CanvasWidget__sub_object()</a> from canvaswidget.o(i._ZN8touchgfx12CanvasWidgetD2Ev) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[194]">touchgfx::NoTransition::handleTickEvent()</a> from frontendapplicationbase.o(i._ZN8touchgfx12NoTransition15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[193]">touchgfx::NoTransition::~NoTransition()</a> from frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[b4]">touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[be]">touchgfx::DMA_Interface::enableAlpha(unsigned char)</a> from dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[bf]">touchgfx::DMA_Interface::disableAlpha()</a> from dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[bb]">touchgfx::DMA_Interface::seedExecution()</a> from dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[ba]">touchgfx::DMA_Interface::executeCompleted()</a> from dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[c0]">touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</a> from dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[b5]">touchgfx::DMA_Interface::flush()</a> from stm32f7dma.o(i._ZN8touchgfx13DMA_Interface5flushEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[b9]">touchgfx::DMA_Interface::execute()</a> from dma.o(i._ZN8touchgfx13DMA_Interface7executeEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[19e]">touchgfx::PainterRGB565::renderNext(unsigned char&, unsigned char&, unsigned char&, unsigned char&)</a> from painterrgb565.o(i._ZN8touchgfx13PainterRGB56510renderNextERhS1_S1_S1_) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[19c]">touchgfx::PainterRGB565::render(unsigned char*, int, int, int, unsigned, const unsigned char*)</a> from painterrgb565.o(i._ZN8touchgfx13PainterRGB5656renderEPhiiijPKh) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[19b]">touchgfx::PainterRGB565::~PainterRGB565()</a> from debug_modeview.o(i._ZN8touchgfx13PainterRGB565D1Ev) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[1a4]">touchgfx::ScalableImage::setScalingAlgorithm(touchgfx::ScalableImage::ScalingAlgorithm)</a> from scalableimage.o(i._ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[1a3]">touchgfx::ScalableImage::setBitmap(const touchgfx::Bitmap&)</a> from scalableimage.o(i._ZN8touchgfx13ScalableImage9setBitmapERKNS_6BitmapE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[1a0]">touchgfx::ScalableImage::~ScalableImage()</a> from scalableimage.o(i._ZN8touchgfx13ScalableImageD1Ev) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[164]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from boardconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[164]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from boardconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[164]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from boardconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[1a5]">touchgfx::AbstractPainter::~AbstractPainter__sub_object()</a> from abstractpainter.o(i._ZN8touchgfx15AbstractPainterD2Ev) referenced from abstractpainter.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
 <LI><a href="#[1a6]">touchgfx::AbstractPartition::~AbstractPartition__sub_object()</a> from abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev) referenced from abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
 <LI><a href="#[7f]">touchgfx::InternalFlashFont::~InternalFlashFont()</a> from fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[7f]">touchgfx::InternalFlashFont::~InternalFlashFont()</a> from fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev) referenced from fontgetters.o(i._Z29getFont_Roboto_Black_100_4bppv)
 <LI><a href="#[7f]">touchgfx::InternalFlashFont::~InternalFlashFont()</a> from fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev) referenced from fontgetters.o(i._Z30getFont_Roboto_Regular_25_4bppv)
 <LI><a href="#[7f]">touchgfx::InternalFlashFont::~InternalFlashFont()</a> from fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev) referenced from fontgetters.o(i._Z30getFont_Roboto_Regular_35_4bppv)
 <LI><a href="#[7f]">touchgfx::InternalFlashFont::~InternalFlashFont()</a> from fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev) referenced from fontgetters.o(i._Z30getFont_Roboto_Regular_45_4bppv)
 <LI><a href="#[7f]">touchgfx::InternalFlashFont::~InternalFlashFont()</a> from fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev) referenced from fontgetters.o(i._Z30getFont_Roboto_Regular_63_4bppv)
 <LI><a href="#[7f]">touchgfx::InternalFlashFont::~InternalFlashFont()</a> from fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev) referenced from fontgetters.o(i._Z30getFont_Roboto_Regular_80_4bppv)
 <LI><a href="#[7f]">touchgfx::InternalFlashFont::~InternalFlashFont()</a> from fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev) referenced from fontgetters.o(i._Z31getFont_Roboto_Regular_180_4bppv)
 <LI><a href="#[7f]">touchgfx::InternalFlashFont::~InternalFlashFont()</a> from fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev) referenced from fontgetters.o(i._Z31getFont_Roboto_Regular_420_4bppv)
 <LI><a href="#[1b3]">touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[1b4]">touchgfx::LockFreeDMA_Queue::pop()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue3popEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[1b5]">touchgfx::LockFreeDMA_Queue::first()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue5firstEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[1b2]">touchgfx::LockFreeDMA_Queue::isFull()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue6isFullEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[1b1]">touchgfx::LockFreeDMA_Queue::isEmpty()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[1ba]">touchgfx::MCUInstrumentation::getCCConsumed()</a> from stm32f7instrumentation.o(i._ZN8touchgfx18MCUInstrumentation13getCCConsumedEv) referenced from stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
 <LI><a href="#[1bb]">touchgfx::MCUInstrumentation::setCCConsumed(unsigned)</a> from stm32f7instrumentation.o(i._ZN8touchgfx18MCUInstrumentation13setCCConsumedEj) referenced from stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
 <LI><a href="#[19d]">touchgfx::AbstractPainterRGB565::renderInit()</a> from painterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB56510renderInitEv) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[19d]">touchgfx::AbstractPainterRGB565::renderInit()</a> from painterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB56510renderInitEv) referenced from abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
 <LI><a href="#[19f]">touchgfx::AbstractPainterRGB565::renderPixel(unsigned short*, unsigned char, unsigned char, unsigned char)</a> from abstractpainterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[19f]">touchgfx::AbstractPainterRGB565::renderPixel(unsigned short*, unsigned char, unsigned char, unsigned char)</a> from abstractpainterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh) referenced from abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
 <LI><a href="#[1b6]">touchgfx::AbstractPainterRGB565::render(unsigned char*, int, int, int, unsigned, const unsigned char*)</a> from abstractpainterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh) referenced from abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
 <LI><a href="#[1b8]">touchgfx::STM32F7Instrumentation::getCPUCycles()</a> from stm32f7instrumentation.o(i._ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv) referenced from stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
 <LI><a href="#[1b9]">touchgfx::STM32F7Instrumentation::setMCUActive(bool)</a> from stm32f7instrumentation.o(i._ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb) referenced from stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
 <LI><a href="#[1b7]">touchgfx::STM32F7Instrumentation::init()</a> from stm32f7instrumentation.o(i._ZN8touchgfx22STM32F7Instrumentation4initEv) referenced from stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
 <LI><a href="#[87]">touchgfx::STM32F7Instrumentation::~STM32F7Instrumentation()</a> from boardconfiguration.o(i._ZN8touchgfx22STM32F7InstrumentationD1Ev) referenced from stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
 <LI><a href="#[87]">touchgfx::STM32F7Instrumentation::~STM32F7Instrumentation()</a> from boardconfiguration.o(i._ZN8touchgfx22STM32F7InstrumentationD1Ev) referenced from boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
 <LI><a href="#[1bd]">touchgfx::STM32F7TouchController::sampleTouch(int&, int&)</a> from stm32f7touchcontroller.o(i._ZN8touchgfx22STM32F7TouchController11sampleTouchERiS1_) referenced from stm32f7touchcontroller.o(.constdata__ZTVN8touchgfx22STM32F7TouchControllerE)
 <LI><a href="#[1bc]">touchgfx::STM32F7TouchController::init()</a> from stm32f7touchcontroller.o(i._ZN8touchgfx22STM32F7TouchController4initEv) referenced from stm32f7touchcontroller.o(.constdata__ZTVN8touchgfx22STM32F7TouchControllerE)
 <LI><a href="#[86]">touchgfx::STM32F7TouchController::~STM32F7TouchController()</a> from boardconfiguration.o(i._ZN8touchgfx22STM32F7TouchControllerD1Ev) referenced from stm32f7touchcontroller.o(.constdata__ZTVN8touchgfx22STM32F7TouchControllerE)
 <LI><a href="#[86]">touchgfx::STM32F7TouchController::~STM32F7TouchController()</a> from boardconfiguration.o(i._ZN8touchgfx22STM32F7TouchControllerD1Ev) referenced from boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
 <LI><a href="#[1c0]">touchgfx::TextAreaWithOneWildcard::getTextHeight()</a> from accelerationviewbase.o(i._ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[da]">touchgfx::HAL::beginFrame()</a> from hal.o(i._ZN8touchgfx3HAL10beginFrameEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[da]">touchgfx::HAL::beginFrame()</a> from hal.o(i._ZN8touchgfx3HAL10beginFrameEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[cb]">touchgfx::HAL::getBlitCaps()</a> from stm32f7hal.o(i._ZN8touchgfx3HAL11getBlitCapsEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[cb]">touchgfx::HAL::getBlitCaps()</a> from stm32f7hal.o(i._ZN8touchgfx3HAL11getBlitCapsEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[ce]">touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations)</a> from hal.o(i._ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[ce]">touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations)</a> from hal.o(i._ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[d1]">touchgfx::HAL::backPorchExited()</a> from stm32f7hal.o(i._ZN8touchgfx3HAL15backPorchExitedEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[d1]">touchgfx::HAL::backPorchExited()</a> from stm32f7hal.o(i._ZN8touchgfx3HAL15backPorchExitedEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c9]">touchgfx::HAL::cacheTextString(const unsigned short*)</a> from hal.o(i._ZN8touchgfx3HAL15cacheTextStringEPKt) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[c9]">touchgfx::HAL::cacheTextString(const unsigned short*)</a> from hal.o(i._ZN8touchgfx3HAL15cacheTextStringEPKt) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c6]">touchgfx::HAL::lockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[c6]">touchgfx::HAL::lockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[cd]">touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)</a> from hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[cd]">touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)</a> from hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[1c4]">touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)</a> from hal.o(i._ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c4]">touchgfx::HAL::allowDMATransfers()</a> from hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[c4]">touchgfx::HAL::allowDMATransfers()</a> from hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[1c5]">touchgfx::HAL::getTFTCurrentLine()</a> from hal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c7]">touchgfx::HAL::unlockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[c7]">touchgfx::HAL::unlockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[d0]">touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</a> from hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[d0]">touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</a> from hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c1]">touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</a> from stm32f7hal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[c1]">touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</a> from stm32f7hal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[d6]">touchgfx::HAL::setFrameBufferStartAddress(void*, unsigned short, bool, bool)</a> from hal.o(i._ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[d6]">touchgfx::HAL::setFrameBufferStartAddress(void*, unsigned short, bool, bool)</a> from hal.o(i._ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[df]">touchgfx::HAL::performDisplayOrientationChange()</a> from hal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[df]">touchgfx::HAL::performDisplayOrientationChange()</a> from hal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[d9]">touchgfx::HAL::tick()</a> from hal.o(i._ZN8touchgfx3HAL4tickEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[d9]">touchgfx::HAL::tick()</a> from hal.o(i._ZN8touchgfx3HAL4tickEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[dd]">touchgfx::HAL::touch(int, int)</a> from hal.o(i._ZN8touchgfx3HAL5touchEii) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[dd]">touchgfx::HAL::touch(int, int)</a> from hal.o(i._ZN8touchgfx3HAL5touchEii) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[de]">touchgfx::HAL::noTouch()</a> from hal.o(i._ZN8touchgfx3HAL7noTouchEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[de]">touchgfx::HAL::noTouch()</a> from hal.o(i._ZN8touchgfx3HAL7noTouchEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[cc]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthb) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[cc]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[cf]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[cf]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[db]">touchgfx::HAL::endFrame()</a> from hal.o(i._ZN8touchgfx3HAL8endFrameEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[db]">touchgfx::HAL::endFrame()</a> from hal.o(i._ZN8touchgfx3HAL8endFrameEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c5]">touchgfx::HAL::flushDMA()</a> from hal.o(i._ZN8touchgfx3HAL8flushDMAEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[c5]">touchgfx::HAL::flushDMA()</a> from hal.o(i._ZN8touchgfx3HAL8flushDMAEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[ca]">touchgfx::HAL::blockCopy(void*, const void*, unsigned)</a> from hal.o(i._ZN8touchgfx3HAL9blockCopyEPvPKvj) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[ca]">touchgfx::HAL::blockCopy(void*, const void*, unsigned)</a> from hal.o(i._ZN8touchgfx3HAL9blockCopyEPvPKvj) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[d7]">touchgfx::HAL::taskDelay(unsigned short)</a> from stm32f7hal.o(i._ZN8touchgfx3HAL9taskDelayEt) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[d7]">touchgfx::HAL::taskDelay(unsigned short)</a> from stm32f7hal.o(i._ZN8touchgfx3HAL9taskDelayEt) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c2]">touchgfx::HAL::taskEntry()</a> from hal.o(i._ZN8touchgfx3HAL9taskEntryEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[c2]">touchgfx::HAL::taskEntry()</a> from hal.o(i._ZN8touchgfx3HAL9taskEntryEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[a]">touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)</a> from lcd.o(i._ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list) referenced 2 times from texts.o(.data)
 <LI><a href="#[1c6]">touchgfx::Line::~Line()</a> from debug_modeview.o(i._ZN8touchgfx4LineD1Ev) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[8e]">touchgfx::Rect::Rect()</a> from application.o(i._ZN8touchgfx4RectC1Ev) referenced from application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev)
 <LI><a href="#[1cb]">touchgfx::Image::setBitmap(const touchgfx::Bitmap&)</a> from image.o(i._ZN8touchgfx5Image9setBitmapERKNS_6BitmapE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[82]">touchgfx::BlitOp::BlitOp()</a> from stm32f7dma.o(i._ZN8touchgfx6BlitOpC1Ev) referenced from stm32f7dma.o(i._ZN10STM32F7DMAC1Ev)
 <LI><a href="#[1cc]">touchgfx::Canvas::~Canvas()</a> from canvas.o(i._ZN8touchgfx6CanvasD1Ev) referenced from canvas.o(.constdata__ZTVN8touchgfx6CanvasE)
 <LI><a href="#[1ce]">touchgfx::Screen::setupScreen()</a> from screen.o(i._ZN8touchgfx6Screen11setupScreenEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
 <LI><a href="#[e9]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[f2]">touchgfx::Screen::tearDownScreen()</a> from screen1view.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[f2]">touchgfx::Screen::tearDownScreen()</a> from screen1view.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
 <LI><a href="#[f2]">touchgfx::Screen::tearDownScreen()</a> from screen1view.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[f2]">touchgfx::Screen::tearDownScreen()</a> from screen1view.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
 <LI><a href="#[f2]">touchgfx::Screen::tearDownScreen()</a> from screen1view.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
 <LI><a href="#[f2]">touchgfx::Screen::tearDownScreen()</a> from screen1view.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
 <LI><a href="#[f2]">touchgfx::Screen::tearDownScreen()</a> from screen1view.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
 <LI><a href="#[f2]">touchgfx::Screen::tearDownScreen()</a> from screen1view.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
 <LI><a href="#[f2]">touchgfx::Screen::tearDownScreen()</a> from screen1view.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
 <LI><a href="#[f2]">touchgfx::Screen::tearDownScreen()</a> from screen1view.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
 <LI><a href="#[f2]">touchgfx::Screen::tearDownScreen()</a> from screen1view.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
 <LI><a href="#[e3]">touchgfx::Screen::afterTransition()</a> from accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
 <LI><a href="#[e6]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
 <LI><a href="#[e8]">touchgfx::Screen::handleTickEvent()</a> from accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
 <LI><a href="#[e5]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
 <LI><a href="#[e7]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from skidpadview.o(.constdata__ZTV11SKIDPADView)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from settingsview.o(.constdata__ZTV12SETTINGSView)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from autocrossview.o(.constdata__ZTV13AUTOCROSSView)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from enduranceview.o(.constdata__ZTV13ENDURANCEView)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from accelerationview.o(.constdata__ZTV16ACCELERATIONView)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
 <LI><a href="#[e1]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[1cd]">touchgfx::Screen::~Screen()</a> from screen.o(i._ZN8touchgfx6ScreenD1Ev) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[180]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[180]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[180]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[180]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[180]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[180]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[180]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[180]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[180]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[83]">touchgfx::CWRUtil::Q5::Q5()</a> from line.o(i._ZN8touchgfx7CWRUtil2Q5C1Ev) referenced from line.o(i._ZN8touchgfx4LineC1Ev)
 <LI><a href="#[1cf]">touchgfx::Outline::~Outline()</a> from outline.o(i._ZN8touchgfx7OutlineD1Ev) referenced from outline.o(.constdata__ZTVN8touchgfx7OutlineE)
 <LI><a href="#[1d0]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()</a> from frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[183]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from settingsview.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[183]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from settingsview.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[183]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from settingsview.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[183]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from settingsview.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[183]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from settingsview.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[183]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from settingsview.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[183]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from settingsview.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[183]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from settingsview.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[183]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from settingsview.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[183]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from settingsview.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[183]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from settingsview.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[18d]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[18d]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[18d]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[18d]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[18d]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[18d]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[18d]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[18d]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[18d]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[18d]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[18b]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[18b]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[18b]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[18b]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[18b]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[18b]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[18b]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[18b]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[18b]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[18b]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[18b]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[18c]">touchgfx::Drawable::handleTickEvent()</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[18c]">touchgfx::Drawable::handleTickEvent()</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[18c]">touchgfx::Drawable::handleTickEvent()</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[18c]">touchgfx::Drawable::handleTickEvent()</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[18c]">touchgfx::Drawable::handleTickEvent()</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[18c]">touchgfx::Drawable::handleTickEvent()</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[18c]">touchgfx::Drawable::handleTickEvent()</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[18c]">touchgfx::Drawable::handleTickEvent()</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[18c]">touchgfx::Drawable::handleTickEvent()</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[18c]">touchgfx::Drawable::handleTickEvent()</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[18c]">touchgfx::Drawable::handleTickEvent()</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[189]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[189]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[189]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[189]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[189]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[189]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[189]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[189]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[189]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[189]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[189]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[18a]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[18a]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[18a]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[18a]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[18a]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[18a]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[18a]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[18a]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[18a]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[18a]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[18a]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[184]">touchgfx::Drawable::setX(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setXEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[184]">touchgfx::Drawable::setX(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setXEs) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[184]">touchgfx::Drawable::setX(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setXEs) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[184]">touchgfx::Drawable::setX(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setXEs) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[184]">touchgfx::Drawable::setX(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setXEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[184]">touchgfx::Drawable::setX(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setXEs) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[184]">touchgfx::Drawable::setX(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setXEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[184]">touchgfx::Drawable::setX(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setXEs) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[184]">touchgfx::Drawable::setX(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setXEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[184]">touchgfx::Drawable::setX(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setXEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[184]">touchgfx::Drawable::setX(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setXEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[185]">touchgfx::Drawable::setY(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setYEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[185]">touchgfx::Drawable::setY(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setYEs) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[185]">touchgfx::Drawable::setY(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setYEs) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[185]">touchgfx::Drawable::setY(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setYEs) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[185]">touchgfx::Drawable::setY(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setYEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[185]">touchgfx::Drawable::setY(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setYEs) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[185]">touchgfx::Drawable::setY(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setYEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[185]">touchgfx::Drawable::setY(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setYEs) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[185]">touchgfx::Drawable::setY(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setYEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[185]">touchgfx::Drawable::setY(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setYEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[185]">touchgfx::Drawable::setY(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable4setYEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[186]">touchgfx::Drawable::setXY(short, short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[186]">touchgfx::Drawable::setXY(short, short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[186]">touchgfx::Drawable::setXY(short, short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[186]">touchgfx::Drawable::setXY(short, short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[186]">touchgfx::Drawable::setXY(short, short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[186]">touchgfx::Drawable::setXY(short, short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[186]">touchgfx::Drawable::setXY(short, short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[186]">touchgfx::Drawable::setXY(short, short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[186]">touchgfx::Drawable::setXY(short, short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[186]">touchgfx::Drawable::setXY(short, short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[186]">touchgfx::Drawable::setXY(short, short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[187]">touchgfx::Drawable::setWidth(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[187]">touchgfx::Drawable::setWidth(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[187]">touchgfx::Drawable::setWidth(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[187]">touchgfx::Drawable::setWidth(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[187]">touchgfx::Drawable::setWidth(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[187]">touchgfx::Drawable::setWidth(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[187]">touchgfx::Drawable::setWidth(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[187]">touchgfx::Drawable::setWidth(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[187]">touchgfx::Drawable::setWidth(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[187]">touchgfx::Drawable::setWidth(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[187]">touchgfx::Drawable::setWidth(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[188]">touchgfx::Drawable::setHeight(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[188]">touchgfx::Drawable::setHeight(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[188]">touchgfx::Drawable::setHeight(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[188]">touchgfx::Drawable::setHeight(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[188]">touchgfx::Drawable::setHeight(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[188]">touchgfx::Drawable::setHeight(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[188]">touchgfx::Drawable::setHeight(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[188]">touchgfx::Drawable::setHeight(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[188]">touchgfx::Drawable::setHeight(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[188]">touchgfx::Drawable::setHeight(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[188]">touchgfx::Drawable::setHeight(short)</a> from accelerationviewbase.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[1d2]">touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[1d6]">touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[1d3]">touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[1d4]">touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[1d7]">touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[88]">touchgfx::LCD16bpp::~LCD16bpp()</a> from boardconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[88]">touchgfx::LCD16bpp::~LCD16bpp()</a> from boardconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev) referenced from boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
 <LI><a href="#[1d9]">touchgfx::TextArea::getTextHeight()</a> from textarea.o(i._ZN8touchgfx8TextArea13getTextHeightEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[1dd]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[1de]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[1df]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[1e0]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;BOARD_DEBUGView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI15BOARD_DEBUGViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI15BOARD_DEBUGViewNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[1e1]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;BOARD_DEBUGView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI15BOARD_DEBUGViewNS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI15BOARD_DEBUGViewNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[1e2]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen1Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[1e3]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen1Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[1e4]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[1e5]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[c8]">STM32F7HAL::getTFTFrameBuffer() const</a> from stm32f7hal.o(i._ZNK10STM32F7HAL17getTFTFrameBufferEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[18f]">touchgfx::CanvasWidget::getPainter() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10getPainterEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[18f]">touchgfx::CanvasWidget::getPainter() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10getPainterEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[17e]">touchgfx::CanvasWidget::getSolidRect() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[17e]">touchgfx::CanvasWidget::getSolidRect() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[191]">touchgfx::CanvasWidget::getMinimalRect() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget14getMinimalRectEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[17d]">touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[17d]">touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[190]">touchgfx::CanvasWidget::getAlpha() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[190]">touchgfx::CanvasWidget::getAlpha() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[199]">touchgfx::BoxWithBorder::getSolidRect() const</a> from boxwithborder.o(i._ZNK8touchgfx13BoxWithBorder12getSolidRectEv) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[198]">touchgfx::BoxWithBorder::draw(const touchgfx::Rect&) const</a> from boxwithborder.o(i._ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[1a2]">touchgfx::ScalableImage::getSolidRect() const</a> from scalableimage.o(i._ZNK8touchgfx13ScalableImage12getSolidRectEv) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[1a1]">touchgfx::ScalableImage::draw(const touchgfx::Rect&) const</a> from scalableimage.o(i._ZNK8touchgfx13ScalableImage4drawERKNS_4RectE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[1af]">touchgfx::InternalFlashFont::getKerning(unsigned short, const touchgfx::GlyphNode*) const</a> from internalflashfont.o(i._ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1b0]">touchgfx::InternalFlashFont::getPixelData(const touchgfx::GlyphNode*) const</a> from internalflashfont.o(i._ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1c1]">touchgfx::TextAreaWithOneWildcard::getTextWidth() const</a> from accelerationviewbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[1be]">touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const</a> from accelerationviewbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[1c3]">touchgfx::Box::getSolidRect() const</a> from box.o(i._ZNK8touchgfx3Box12getSolidRectEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[1c2]">touchgfx::Box::draw(const touchgfx::Rect&) const</a> from box.o(i._ZNK8touchgfx3Box4drawERKNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[1ac]">touchgfx::Font::getFontHeight() const</a> from font.o(i._ZNK8touchgfx4Font13getFontHeightEv) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1ac]">touchgfx::Font::getFontHeight() const</a> from font.o(i._ZNK8touchgfx4Font13getFontHeightEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1ab]">touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1ab]">touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1ae]">touchgfx::Font::getBitsPerPixel() const</a> from font.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1ae]">touchgfx::Font::getBitsPerPixel() const</a> from font.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1aa]">touchgfx::Font::getEllipsisChar() const</a> from font.o(i._ZNK8touchgfx4Font15getEllipsisCharEv) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1aa]">touchgfx::Font::getEllipsisChar() const</a> from font.o(i._ZNK8touchgfx4Font15getEllipsisCharEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1a9]">touchgfx::Font::getFallbackChar() const</a> from font.o(i._ZNK8touchgfx4Font15getFallbackCharEv) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1a9]">touchgfx::Font::getFallbackChar() const</a> from font.o(i._ZNK8touchgfx4Font15getFallbackCharEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[9]">touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const</a> from font.o(i._ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list) referenced 2 times from texts.o(.data)
 <LI><a href="#[1ad]">touchgfx::Font::getMinimumTextHeight() const</a> from font.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1ad]">touchgfx::Font::getMinimumTextHeight() const</a> from font.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1a8]">touchgfx::Font::getGlyph(unsigned short) const</a> from font.o(i._ZNK8touchgfx4Font8getGlyphEt) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1a8]">touchgfx::Font::getGlyph(unsigned short) const</a> from font.o(i._ZNK8touchgfx4Font8getGlyphEt) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1c7]">touchgfx::Line::getMinimalRect() const</a> from line.o(i._ZNK8touchgfx4Line14getMinimalRectEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[1c8]">touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const</a> from line.o(i._ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[1ca]">touchgfx::Image::getSolidRect() const</a> from image.o(i._ZNK8touchgfx5Image12getSolidRectEv) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[1c9]">touchgfx::Image::draw(const touchgfx::Rect&) const</a> from image.o(i._ZNK8touchgfx5Image4drawERKNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[1d1]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::isValid() const</a> from frontendapplicationbase.o(t._ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[19a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[19a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[19a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[19a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[19a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[19a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[19a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[19a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[19a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[181]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[181]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[181]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[181]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[181]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[181]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[181]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[181]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[181]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[181]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[181]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[17f]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[17f]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[17f]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[17f]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[17f]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[17f]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[17f]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[17f]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[17f]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[17f]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[17f]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[182]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[182]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[182]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[182]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[182]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[182]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[182]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[182]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[182]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[182]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[182]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[1d5]">touchgfx::LCD16bpp::bitDepth() const</a> from lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp8bitDepthEv) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[1bf]">touchgfx::TextArea::getSolidRect() const</a> from accelerationviewbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv) referenced from accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[1bf]">touchgfx::TextArea::getSolidRect() const</a> from accelerationviewbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[1da]">touchgfx::TextArea::getTextWidth() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getTextWidthEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[1d8]">touchgfx::TextArea::draw(const touchgfx::Rect&) const</a> from textarea.o(i._ZNK8touchgfx8TextArea4drawERKNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[1a7]">touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const</a> from constfont.o(i._ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1a7]">touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const</a> from constfont.o(i._ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1dc]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[1db]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[13b]">thunk{-4} to SKIDPADPresenter::update()</a> from skidpadpresenter.o(i._ZThn4_N16SKIDPADPresenter6updateEv) referenced from skidpadpresenter.o(.constdata__ZTV16SKIDPADPresenter)
 <LI><a href="#[140]">thunk{-4} to Screen1Presenter::update()</a> from screen1presenter.o(i._ZThn4_N16Screen1Presenter6updateEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[149]">thunk{-4} to SETTINGSPresenter::update()</a> from settingspresenter.o(i._ZThn4_N17SETTINGSPresenter6updateEv) referenced from settingspresenter.o(.constdata__ZTV17SETTINGSPresenter)
 <LI><a href="#[14e]">thunk{-4} to AUTOCROSSPresenter::update()</a> from autocrosspresenter.o(i._ZThn4_N18AUTOCROSSPresenter6updateEv) referenced from autocrosspresenter.o(.constdata__ZTV18AUTOCROSSPresenter)
 <LI><a href="#[155]">thunk{-4} to ENDURANCEPresenter::update()</a> from endurancepresenter.o(i._ZThn4_N18ENDURANCEPresenter6updateEv) referenced from endurancepresenter.o(.constdata__ZTV18ENDURANCEPresenter)
 <LI><a href="#[15e]">thunk{-4} to DEBUG_MODEPresenter::update()</a> from debug_modepresenter.o(i._ZThn4_N19DEBUG_MODEPresenter6updateEv) referenced from debug_modepresenter.o(.constdata__ZTV19DEBUG_MODEPresenter)
 <LI><a href="#[16c]">thunk{-4} to NOISE_MODEPresenter::update()</a> from noise_modepresenter.o(i._ZThn4_N19NOISE_MODEPresenter6updateEv) referenced from noise_modepresenter.o(.constdata__ZTV19NOISE_MODEPresenter)
 <LI><a href="#[173]">thunk{-4} to BOARD_DEBUGPresenter::update()</a> from board_debugpresenter.o(i._ZThn4_N20BOARD_DEBUGPresenter6updateEv) referenced from board_debugpresenter.o(.constdata__ZTV20BOARD_DEBUGPresenter)
 <LI><a href="#[178]">thunk{-4} to ACCELERATIONPresenter::update()</a> from accelerationpresenter.o(i._ZThn4_N21ACCELERATIONPresenter6updateEv) referenced from accelerationpresenter.o(.constdata__ZTV21ACCELERATIONPresenter)
 <LI><a href="#[192]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[192]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from abstractpainter.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
 <LI><a href="#[192]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
 <LI><a href="#[192]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
 <LI><a href="#[192]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[192]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[192]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[192]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[78]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[1e8]">__sti___21_typedtextdatabase_cpp_42ef4e5b</a> from typedtextdatabase.o(i.__sti___21_typedtextdatabase_cpp_42ef4e5b) referenced from typedtextdatabase.o(.init_array)
 <LI><a href="#[1e6]">__sti___22_BoardConfiguration_cpp_2f1c5dae</a> from boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae) referenced from boardconfiguration.o(.init_array)
 <LI><a href="#[1e7]">__sti___9_texts_cpp_454ca793</a> from texts.o(i.__sti___9_texts_cpp_454ca793) referenced from texts.o(.init_array)
 <LI><a href="#[a0]">accelerationModeTask</a> from freertos.o(i.accelerationModeTask) referenced from freertos.o(.constdata)
 <LI><a href="#[a1]">autocrossModeTask</a> from freertos.o(i.autocrossModeTask) referenced from freertos.o(.constdata)
 <LI><a href="#[9b]">aux1ButtonTask</a> from freertos.o(i.aux1ButtonTask) referenced from freertos.o(.constdata)
 <LI><a href="#[a8]">aux1Task</a> from freertos.o(i.aux1Task) referenced from freertos.o(.constdata)
 <LI><a href="#[9c]">aux2ButtonTask</a> from freertos.o(i.aux2ButtonTask) referenced from freertos.o(.constdata)
 <LI><a href="#[a9]">aux2Task</a> from freertos.o(i.aux2Task) referenced from freertos.o(.constdata)
 <LI><a href="#[9d]">aux3ButtonTask</a> from freertos.o(i.aux3ButtonTask) referenced from freertos.o(.constdata)
 <LI><a href="#[a6]">boardDebugModeTask</a> from freertos.o(i.boardDebugModeTask) referenced from freertos.o(.constdata)
 <LI><a href="#[91]">canTask</a> from freertos.o(i.canTask) referenced from freertos.o(.constdata)
 <LI><a href="#[a7]">debugFreeRTOSTask</a> from freertos.o(i.debugFreeRTOSTask) referenced from freertos.o(.constdata)
 <LI><a href="#[a5]">debugModeTask</a> from freertos.o(i.debugModeTask) referenced from freertos.o(.constdata)
 <LI><a href="#[93]">downShiftTask</a> from freertos.o(i.downShiftTask) referenced from freertos.o(.constdata)
 <LI><a href="#[a2]">enduranceModeTask</a> from freertos.o(i.enduranceModeTask) referenced from freertos.o(.constdata)
 <LI><a href="#[90]">ledBlinkTask</a> from freertos.o(i.ledBlinkTask) referenced from freertos.o(.constdata)
 <LI><a href="#[96]">leftEncoderTask</a> from freertos.o(i.leftEncoderTask) referenced from freertos.o(.constdata)
 <LI><a href="#[76]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[95]">mapSelectorTask</a> from freertos.o(i.mapSelectorTask) referenced from freertos.o(.constdata)
 <LI><a href="#[94]">modeSelectorTask</a> from freertos.o(i.modeSelectorTask) referenced from freertos.o(.constdata)
 <LI><a href="#[99]">neutralButtonTask</a> from freertos.o(i.neutralButtonTask) referenced from freertos.o(.constdata)
 <LI><a href="#[9a]">okButtonTask</a> from freertos.o(i.okButtonTask) referenced from freertos.o(.constdata)
 <LI><a href="#[8b]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[89]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[97]">rightEncoderTask</a> from freertos.o(i.rightEncoderTask) referenced from freertos.o(.constdata)
 <LI><a href="#[9e]">rpmStripeTask</a> from freertos.o(i.rpmStripeTask) referenced from freertos.o(.constdata)
 <LI><a href="#[9f]">sensorsTask</a> from freertos.o(i.sensorsTask) referenced from freertos.o(.constdata)
 <LI><a href="#[a4]">settingsModeTask</a> from freertos.o(i.settingsModeTask) referenced from freertos.o(.constdata)
 <LI><a href="#[a3]">skidpadModeTask</a> from freertos.o(i.skidpadModeTask) referenced from freertos.o(.constdata)
 <LI><a href="#[98]">startButtonTask</a> from freertos.o(i.startButtonTask) referenced from freertos.o(.constdata)
 <LI><a href="#[92]">upShiftTask</a> from freertos.o(i.upShiftTask) referenced from freertos.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[78]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[4b3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1ea]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[207]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4b4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1ec]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[4b5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4b6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4b7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1ed]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[4b8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[49b]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[49a]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[495]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1f0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[47e]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[297]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_indicatorsInit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_efiOff
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[4b9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4ba]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4bb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[256]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_indicatorsInit
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_efiOff
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[4bc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1e9]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[1f6]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_BoardConfiguration_cpp_2f1c5dae
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_420_4bpp()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_180_4bpp()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_80_4bpp()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_63_4bpp()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_45_4bpp()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_35_4bpp()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_25_4bpp()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Black_100_4bpp()
</UL>

<P><STRONG><a name="[1f9]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSensors_CLUTCH
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[1fd]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateTemperature
</UL>

<P><STRONG><a name="[1fe]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ff]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateVoltage
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateTemperature
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateSpeed
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSensors_CLUTCH
</UL>

<P><STRONG><a name="[200]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateWaterTemperature
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateVoltage
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateTemperature
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateSlip
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculatePressure
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[201]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateWaterTemperature
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateVoltage
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateTemperature
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateSlip
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSensors_CLUTCH
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[202]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateVoltage
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateTemperature
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateSpeed
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculatePressure
</UL>

<P><STRONG><a name="[203]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateVoltage
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateTemperature
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSensors_CLUTCH
</UL>

<P><STRONG><a name="[204]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateWaterTemperature
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateVoltage
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateTemperature
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateSpeed
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateSlip
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculatePressure
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[1f2]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[4bd]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[4be]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4bf]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[4c0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[45f]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[1ee]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[205]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[4c1]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1fb]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1eb]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4c2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4c3]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[4c4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4c5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>ADC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ADC_IRQHandler &rArr; HAL_ADC_IRQHandler &rArr; HAL_ADC_ConvCpltCallback &rArr; dSensors_CLUTCH &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[20c]"></a>ADC_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.ADC_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ADC_read &rArr; HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsTask
</UL>

<P><STRONG><a name="[20e]"></a>BSP_QSPI_EnableMemoryMappedMode</STRONG> (Thumb, 66 bytes, Stack size 80 bytes, stm32756g_eval_qspi.o(i.BSP_QSPI_EnableMemoryMappedMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = BSP_QSPI_EnableMemoryMappedMode &rArr; HAL_QSPI_MemoryMapped &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_MemoryMappedMode
</UL>

<P><STRONG><a name="[210]"></a>BSP_QSPI_Init</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, stm32756g_eval_qspi.o(i.BSP_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = BSP_QSPI_Init &rArr; QSPI_DummyCyclesCfg &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_DeInit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_MemoryMappedMode
</UL>

<P><STRONG><a name="[212]"></a>BSP_QSPI_MspInit</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, stm32756g_eval_qspi.o(i.BSP_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAN1_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[223]"></a>CAN_DCU_feedback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, can.o(i.CAN_DCU_feedback))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[235]"></a>CAN_DCU_is_alive</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can.o(i.CAN_DCU_is_alive))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[232]"></a>CAN_GCU_is_alive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can.o(i.CAN_GCU_is_alive))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[21d]"></a>CAN_Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, can.o(i.CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_Start &rArr; CAN_filterConfig &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_filterConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[234]"></a>CAN_changeRoutineState</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, can.o(i.CAN_changeRoutineState))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_changeRoutineState
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[233]"></a>CAN_changeState</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, can.o(i.CAN_changeState))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[222]"></a>CAN_receive</STRONG> (Thumb, 994 bytes, Stack size 56 bytes, can.o(i.CAN_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CAN_receive &rArr; dEfiSense_calculateVoltage &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGears_setGear
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateWaterTemperature
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateVoltage
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateTemperature
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateTempScarico
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateTPS
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateSpeed
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateSlip
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculatePressure
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculatePH2O
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateOilOutTemperature
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateOilInTemperature
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateFuelLevel
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_setRPM
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_changeState
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_changeRoutineState
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GCU_is_alive
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DCU_is_alive
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DCU_feedback
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTask
</UL>

<P><STRONG><a name="[236]"></a>CAN_send</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, can.o(i.CAN_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN_send &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGears_upShift
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGears_downShift
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGear_setNeutral
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSensors_Sensors_send
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSensors_Clutch_send
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_callback
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_okButton_handle
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_aux1Button_handle
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_tractionRpm_send
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startButtonTask
</UL>

<P><STRONG><a name="[3ba]"></a>CRC_Lock</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32_crc_lock.o(i.CRC_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[6e]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2D_IRQHandler &rArr; HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[258]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init()
</UL>

<P><STRONG><a name="[45]"></a>FMC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.FMC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_IRQHandler &rArr; HAL_SDRAM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2c3]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[2c7]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[2c9]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[2c4]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 134 bytes, Stack size 28 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[23d]"></a>GPIO_aux1Button_handle</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gpio.o(i.GPIO_aux1Button_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GPIO_aux1Button_handle &rArr; CAN_send &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux1ButtonTask
</UL>

<P><STRONG><a name="[23e]"></a>GPIO_aux2Button_handle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gpio.o(i.GPIO_aux2Button_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GPIO_aux2Button_handle &rArr; I2C_save_Pointers &rArr; I2C_save_skiPointers &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_Pointers
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux2ButtonTask
</UL>

<P><STRONG><a name="[241]"></a>GPIO_driveMode_set</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gpio.o(i.GPIO_driveMode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_driveMode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_encoders_find_new_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_encoders_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSelectorTask
</UL>

<P><STRONG><a name="[243]"></a>GPIO_encoders_find_new_mode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.GPIO_encoders_find_new_mode))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_engineMap_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_driveMode_set
</UL>

<P><STRONG><a name="[245]"></a>GPIO_encoders_find_new_position</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.GPIO_encoders_find_new_position))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_rightEncoder_movement
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_leftEncoder_movement
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_encoders_init
</UL>

<P><STRONG><a name="[244]"></a>GPIO_encoders_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, gpio.o(i.GPIO_encoders_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GPIO_encoders_init &rArr; I2C_get_Traction &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_Traction
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_RpmLimiter
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_engineMap_set
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_encoders_find_new_position
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_driveMode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[246]"></a>GPIO_engineMap_set</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gpio.o(i.GPIO_engineMap_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_engineMap_set
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_encoders_find_new_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_encoders_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapSelectorTask
</UL>

<P><STRONG><a name="[469]"></a>GPIO_leftEncoder_boardDebugMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIO_leftEncoder_boardDebugMode))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftEncoderTask
</UL>

<P><STRONG><a name="[46a]"></a>GPIO_leftEncoder_debugMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIO_leftEncoder_debugMode))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftEncoderTask
</UL>

<P><STRONG><a name="[24a]"></a>GPIO_leftEncoder_movement</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gpio.o(i.GPIO_leftEncoder_movement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_leftEncoder_movement
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_encoders_find_new_position
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftEncoderTask
</UL>

<P><STRONG><a name="[46b]"></a>GPIO_leftEncoder_settingsMode</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, gpio.o(i.GPIO_leftEncoder_settingsMode))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftEncoderTask
</UL>

<P><STRONG><a name="[24b]"></a>GPIO_neutralButton_handle</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gpio.o(i.GPIO_neutralButton_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GPIO_neutralButton_handle &rArr; I2C_save_Pointers &rArr; I2C_save_skiPointers &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGear_setNeutral
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_Pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutralButtonTask
</UL>

<P><STRONG><a name="[24d]"></a>GPIO_okButton_handle</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, gpio.o(i.GPIO_okButton_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GPIO_okButton_handle &rArr; CAN_send &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;okButtonTask
</UL>

<P><STRONG><a name="[48f]"></a>GPIO_rightEncoder_boardDebugMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIO_rightEncoder_boardDebugMode))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rightEncoderTask
</UL>

<P><STRONG><a name="[490]"></a>GPIO_rightEncoder_debugMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIO_rightEncoder_debugMode))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rightEncoderTask
</UL>

<P><STRONG><a name="[24e]"></a>GPIO_rightEncoder_movement</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gpio.o(i.GPIO_rightEncoder_movement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_rightEncoder_movement
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_encoders_find_new_position
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rightEncoderTask
</UL>

<P><STRONG><a name="[491]"></a>GPIO_rightEncoder_settingsMode</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, gpio.o(i.GPIO_rightEncoder_settingsMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_rightEncoder_settingsMode
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rightEncoderTask
</UL>

<P><STRONG><a name="[336]"></a>GRAPHICS_MainTask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boardconfiguration.o(i.GRAPHICS_MainTask))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[251]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[313]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[208]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_ADC_ConvCpltCallback &rArr; dSensors_CLUTCH &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSensors_CLUTCH
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[20a]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[209]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[20b]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_ADC_IRQHandler &rArr; HAL_ADC_ConvCpltCallback &rArr; dSensors_CLUTCH &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[253]"></a>HAL_ADC_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[252]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[254]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[20d]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_read
</UL>

<P><STRONG><a name="[250]"></a>HAL_ADC_Stop_DMA</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Stop_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Stop_DMA &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[21f]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_ActivateNotification))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Start
</UL>

<P><STRONG><a name="[237]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_send
</UL>

<P><STRONG><a name="[221]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 262 bytes, Stack size 12 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_filterConfig
</UL>

<P><STRONG><a name="[267]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[26b]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 266 bytes, Stack size 20 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[21c]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[268]"></a>HAL_CAN_Init</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[269]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, can.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[261]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[262]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, can.o(i.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[263]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[264]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[265]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[220]"></a>HAL_CAN_Start</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Start
</UL>

<P><STRONG><a name="[25c]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[25b]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[25e]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[25d]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[260]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[25f]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[266]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_can.o(i.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[26f]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f7xx_hal_crc_ex.o(i.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[26d]"></a>HAL_CRC_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f7xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[26e]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, crc.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[270]"></a>HAL_DMA2D_Abort</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA2D_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_DeInit
</UL>

<P><STRONG><a name="[271]"></a>HAL_DMA2D_BlendingStart_IT</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_BlendingStart_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA2D_BlendingStart_IT &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[277]"></a>HAL_DMA2D_CLUTLoadingCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_CLUTLoadingCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[273]"></a>HAL_DMA2D_CLUTLoading_Abort</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_CLUTLoading_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA2D_CLUTLoading_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_DeInit
</UL>

<P><STRONG><a name="[352]"></a>HAL_DMA2D_ConfigLayer</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[274]"></a>HAL_DMA2D_DeInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA2D_DeInit &rArr; HAL_DMA2D_CLUTLoading_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoading_Abort
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Abort
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::~STM32F7DMA()
</UL>

<P><STRONG><a name="[238]"></a>HAL_DMA2D_IRQHandler</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_LineEventCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoadingCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[278]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::initialize()
</UL>

<P><STRONG><a name="[276]"></a>HAL_DMA2D_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[275]"></a>HAL_DMA2D_MspDeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hw_init.o(i.HAL_DMA2D_MspDeInit))
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_DeInit
</UL>

<P><STRONG><a name="[279]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hw_init.o(i.HAL_DMA2D_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[27b]"></a>HAL_DMA2D_Start_IT</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA2D_Start_IT &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[25a]"></a>HAL_DMA_Abort</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
</UL>

<P><STRONG><a name="[2ac]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort_IT
</UL>

<P><STRONG><a name="[239]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[257]"></a>HAL_DMA_Init</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[259]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[27f]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ltdc_init_sequence
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_skiPointers
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_endPointers
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_defPointers
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_autPointers
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_accPointers
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_Traction
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_RpmLimiter
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx()
</UL>

<P><STRONG><a name="[2a6]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 292 bytes, Stack size 36 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspDeInit
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
</UL>

<P><STRONG><a name="[280]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f7xx_it.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[23a]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[219]"></a>HAL_GPIO_Init</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit()
</UL>

<P><STRONG><a name="[242]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_rightEncoder_movement
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_leftEncoder_movement
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_engineMap_set
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_encoders_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_driveMode_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upShiftTask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startButtonTask
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;downShiftTask
</UL>

<P><STRONG><a name="[249]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_callback
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_rightEncoder_movement
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_leftEncoder_movement
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_engineMap_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBlinkTask
</UL>

<P><STRONG><a name="[30e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ltdc_init_sequence
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_setup
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_sleep_out
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_setRGBIF
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_setPANEL
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_setGAMMA
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_setEXTC
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_invert_colors
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_flip_horizontal
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_display_ON
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_colmod
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_brightness
</UL>

<P><STRONG><a name="[26a]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoading_Abort
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Abort
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[31e]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[31f]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[2ed]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[2f0]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_AddrCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
</UL>

<P><STRONG><a name="[281]"></a>HAL_I2C_ER_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>

<P><STRONG><a name="[2eb]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_EV_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[2ec]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[283]"></a>HAL_I2C_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[2f2]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_ListenCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
</UL>

<P><STRONG><a name="[285]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_command
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_debug_red_off
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_debug_green_off
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_debug_blue_on
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_debug_blue_off
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_controller_1_ON
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_controller_0_ON
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_brightness_max
</UL>

<P><STRONG><a name="[28a]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_Traction
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_RpmLimiter
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_skiPointers
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_endPointers
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_defPointers
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_autPointers
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_accPointers
</UL>

<P><STRONG><a name="[28c]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_skiPointers
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_endPointers
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_defPointers
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_autPointers
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_accPointers
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_Traction
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_RpmLimiter
</UL>

<P><STRONG><a name="[284]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[2f6]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_SlaveRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[2f5]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_SlaveTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[2e9]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_callback
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[28e]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[290]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f7xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[296]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init()
</UL>

<P><STRONG><a name="[299]"></a>HAL_LTDC_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_LTDC_DeInit &rArr; HAL_LTDC_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init()
</UL>

<P><STRONG><a name="[29c]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[29b]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_ER_IRQHandler
</UL>

<P><STRONG><a name="[29f]"></a>HAL_LTDC_Init</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init()
</UL>

<P><STRONG><a name="[29d]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f7hal.o(i.HAL_LTDC_LineEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::signalVSync()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[29a]"></a>HAL_LTDC_MspDeInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hw_init.o(i.HAL_LTDC_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DeInit
</UL>

<P><STRONG><a name="[2a0]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, hw_init.o(i.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[2a1]"></a>HAL_LTDC_ProgramLineEvent</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ProgramLineEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7HAL::enableLCDControllerInterrupt()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[29e]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[340]"></a>HAL_LTDC_SetPitch</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_SetPitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_LTDC_SetPitch
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init()
</UL>

<P><STRONG><a name="[327]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_MemoryMappedMode
</UL>

<P><STRONG><a name="[328]"></a>HAL_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_MemoryMappedMode
</UL>

<P><STRONG><a name="[291]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[27a]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_MemoryMappedMode
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspDeInit
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspDeInit
</UL>

<P><STRONG><a name="[21b]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit()
</UL>

<P><STRONG><a name="[21a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit()
</UL>

<P><STRONG><a name="[28f]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[240]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_aux2Button_handle
</UL>

<P><STRONG><a name="[2a8]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[33a]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2a9]"></a>HAL_QSPI_Abort</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_QSPI_Abort &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
</UL>

<P><STRONG><a name="[2b5]"></a>HAL_QSPI_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_QSPI_Abort_IT</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_QSPI_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[2ad]"></a>HAL_QSPI_AutoPolling</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_AutoPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_QSPI_AutoPolling &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>

<P><STRONG><a name="[2b4]"></a>HAL_QSPI_CmdCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_CmdCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[216]"></a>HAL_QSPI_Command</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[211]"></a>HAL_QSPI_DeInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_QSPI_DeInit &rArr; HAL_QSPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[2b6]"></a>HAL_QSPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DMAAbortCplt
</UL>

<P><STRONG><a name="[2b1]"></a>HAL_QSPI_FifoThresholdCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_FifoThresholdCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_QSPI_IRQHandler</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_QSPI_IRQHandler &rArr; HAL_QSPI_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_TxCpltCallback
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_TimeOutCallback
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_StatusMatchCallback
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_RxCpltCallback
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_FifoThresholdCallback
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_ErrorCallback
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_CmdCpltCallback
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AbortCpltCallback
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort_IT
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUADSPI_IRQHandler
</UL>

<P><STRONG><a name="[213]"></a>HAL_QSPI_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[20f]"></a>HAL_QSPI_MemoryMapped</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_MemoryMapped))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_QSPI_MemoryMapped &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_EnableMemoryMappedMode
</UL>

<P><STRONG><a name="[2af]"></a>HAL_QSPI_MspDeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, quadspi.o(i.HAL_QSPI_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_QSPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_DeInit
</UL>

<P><STRONG><a name="[2b9]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, quadspi.o(i.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[2ba]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_QSPI_Receive &rArr; HAL_QSPI_Abort &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[2b3]"></a>HAL_QSPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_QSPI_StatusMatchCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_StatusMatchCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[2b8]"></a>HAL_QSPI_TimeOutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_TimeOutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[2bb]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_QSPI_Transmit &rArr; HAL_QSPI_Abort &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[2b2]"></a>HAL_QSPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>

<P><STRONG><a name="[2bc]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1276 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[292]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
</UL>

<P><STRONG><a name="[3d2]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
</UL>

<P><STRONG><a name="[293]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
</UL>

<P><STRONG><a name="[2be]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[2bf]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 810 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[23c]"></a>HAL_SDRAM_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_RefreshErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_IRQHandler
</UL>

<P><STRONG><a name="[2c1]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init()
</UL>

<P><STRONG><a name="[2c2]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_init.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx()
</UL>

<P><STRONG><a name="[2c0]"></a>HAL_SDRAM_RefreshErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_RefreshErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_IRQHandler
</UL>

<P><STRONG><a name="[2c8]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx()
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_SPI_Init</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, stm32f7xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[2cb]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[2cc]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, stm32f7xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_sleep_out
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_setRGBIF
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_setPANEL
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_setGAMMA
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_setEXTC
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_invert_colors
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_flip_horizontal
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_display_ON
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_colmod
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_brightness
</UL>

<P><STRONG><a name="[2da]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2dc]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[324]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[294]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
</UL>

<P><STRONG><a name="[2ce]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[3d3]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
</UL>

<P><STRONG><a name="[295]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_startTimers
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2d0]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; TIM_callback &rArr; data_efiOff
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[2dd]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[2d7]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2de]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC6_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[2e6]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[2d8]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2e7]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_startTimers
</UL>

<P><STRONG><a name="[2d9]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; TIM_callback &rArr; data_efiOff
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_callback
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2db]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C1_ER_IRQHandler &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.I2C1_EV_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2f9]"></a>I2C_brightness_max</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, i2c.o(i.I2C_brightness_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_brightness_max &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_controller_1_ON
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_controller_0_ON
</UL>

<P><STRONG><a name="[2fa]"></a>I2C_controller_0_ON</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, i2c.o(i.I2C_controller_0_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_controller_0_ON &rArr; I2C_brightness_max &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_brightness_max
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_setup
</UL>

<P><STRONG><a name="[2fb]"></a>I2C_controller_1_ON</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, i2c.o(i.I2C_controller_1_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_controller_1_ON &rArr; I2C_brightness_max &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_brightness_max
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_setup
</UL>

<P><STRONG><a name="[2fc]"></a>I2C_debug_blue_off</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, i2c.o(i.I2C_debug_blue_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_debug_blue_off &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_flash
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_command
</UL>

<P><STRONG><a name="[2fd]"></a>I2C_debug_blue_on</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, i2c.o(i.I2C_debug_blue_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_debug_blue_on &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_flash
</UL>

<P><STRONG><a name="[2fe]"></a>I2C_debug_green_off</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, i2c.o(i.I2C_debug_green_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_debug_green_off &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_flash
</UL>

<P><STRONG><a name="[2ff]"></a>I2C_debug_red_off</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, i2c.o(i.I2C_debug_red_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_debug_red_off &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_flash
</UL>

<P><STRONG><a name="[300]"></a>I2C_getPointers</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, i2c.o(i.I2C_getPointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = I2C_getPointers &rArr; I2C_save_defPointers &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_skiPointers
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_endPointers
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_defPointers
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_autPointers
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_accPointers
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_skiPointers
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_endPointers
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_defPointers
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_autPointers
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_accPointers
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[248]"></a>I2C_get_RpmLimiter</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, i2c.o(i.I2C_get_RpmLimiter))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_get_RpmLimiter &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_encoders_init
</UL>

<P><STRONG><a name="[247]"></a>I2C_get_Traction</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, i2c.o(i.I2C_get_Traction))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_get_Traction &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_encoders_init
</UL>

<P><STRONG><a name="[302]"></a>I2C_get_accPointers</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, i2c.o(i.I2C_get_accPointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_get_accPointers &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
</UL>

<P><STRONG><a name="[303]"></a>I2C_get_autPointers</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, i2c.o(i.I2C_get_autPointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_get_autPointers &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
</UL>

<P><STRONG><a name="[306]"></a>I2C_get_defPointers</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, i2c.o(i.I2C_get_defPointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_get_defPointers &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
</UL>

<P><STRONG><a name="[301]"></a>I2C_get_endPointers</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, i2c.o(i.I2C_get_endPointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_get_endPointers &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
</UL>

<P><STRONG><a name="[304]"></a>I2C_get_skiPointers</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, i2c.o(i.I2C_get_skiPointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_get_skiPointers &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
</UL>

<P><STRONG><a name="[30b]"></a>I2C_rpm_command</STRONG> (Thumb, 480 bytes, Stack size 32 bytes, i2c.o(i.I2C_rpm_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = I2C_rpm_command &rArr; I2C_debug_blue_off &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_debug_blue_off
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_update
</UL>

<P><STRONG><a name="[30c]"></a>I2C_rpm_flash</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, i2c.o(i.I2C_rpm_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2C_rpm_flash &rArr; I2C_debug_red_off &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_debug_red_off
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_debug_green_off
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_debug_blue_on
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_debug_blue_off
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_update
</UL>

<P><STRONG><a name="[30d]"></a>I2C_rpm_setup</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, i2c.o(i.I2C_rpm_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = I2C_rpm_setup &rArr; I2C_controller_1_ON &rArr; I2C_brightness_max &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_controller_1_ON
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_controller_0_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30f]"></a>I2C_rpm_update</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, i2c.o(i.I2C_rpm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2C_rpm_update &rArr; I2C_rpm_command &rArr; I2C_debug_blue_off &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_flash
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_command
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmStripeTask
</UL>

<P><STRONG><a name="[23f]"></a>I2C_save_Pointers</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, i2c.o(i.I2C_save_Pointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_save_Pointers &rArr; I2C_save_skiPointers &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_skiPointers
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_endPointers
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_autPointers
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_accPointers
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_neutralButton_handle
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_aux2Button_handle
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSelectorTask
</UL>

<P><STRONG><a name="[310]"></a>I2C_save_RpmLimiter</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, i2c.o(i.I2C_save_RpmLimiter))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_save_RpmLimiter &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_callback
</UL>

<P><STRONG><a name="[311]"></a>I2C_save_Traction</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, i2c.o(i.I2C_save_Traction))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_save_Traction &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_callback
</UL>

<P><STRONG><a name="[307]"></a>I2C_save_accPointers</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, i2c.o(i.I2C_save_accPointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_save_accPointers &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_Pointers
</UL>

<P><STRONG><a name="[309]"></a>I2C_save_autPointers</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, i2c.o(i.I2C_save_autPointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_save_autPointers &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_Pointers
</UL>

<P><STRONG><a name="[305]"></a>I2C_save_defPointers</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, i2c.o(i.I2C_save_defPointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2C_save_defPointers &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
</UL>

<P><STRONG><a name="[308]"></a>I2C_save_endPointers</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, i2c.o(i.I2C_save_endPointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_save_endPointers &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_Pointers
</UL>

<P><STRONG><a name="[30a]"></a>I2C_save_skiPointers</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, i2c.o(i.I2C_save_skiPointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_save_skiPointers &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_Pointers
</UL>

<P><STRONG><a name="[225]"></a>I2C_setRPM</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, i2c.o(i.I2C_setRPM))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[6d]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.LTDC_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LTDC_ER_IRQHandler &rArr; HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>LTDC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[312]"></a>MX_ADC1_Init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[314]"></a>MX_CAN1_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, can.o(i.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[315]"></a>MX_CRC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, crc.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[316]"></a>MX_DMA_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[317]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 1206 bytes, Stack size 664 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31c]"></a>MX_GPIO_Init</STRONG> (Thumb, 556 bytes, Stack size 64 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31d]"></a>MX_I2C1_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[320]"></a>MX_QUADSPI_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, quadspi.o(i.MX_QUADSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_QUADSPI_Init &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[321]"></a>MX_SPI1_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[322]"></a>MX_TIM12_Init</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, tim.o(i.MX_TIM12_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM12_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[323]"></a>MX_TIM4_Init</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[325]"></a>MX_TIM7_Init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tim.o(i.MX_TIM7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM7_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[326]"></a>QSPI_MemoryMappedMode</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, quadspi.o(i.QSPI_MemoryMappedMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = QSPI_MemoryMappedMode &rArr; BSP_QSPI_Init &rArr; QSPI_DummyCyclesCfg &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_EnableMemoryMappedMode
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.QUADSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QUADSPI_IRQHandler &rArr; HAL_QSPI_IRQHandler &rArr; HAL_QSPI_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[32b]"></a>SPI_brightness</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi.o(i.SPI_brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_brightness &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ltdc_init_sequence
</UL>

<P><STRONG><a name="[32c]"></a>SPI_colmod</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi.o(i.SPI_colmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_colmod &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ltdc_init_sequence
</UL>

<P><STRONG><a name="[32d]"></a>SPI_display_ON</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, spi.o(i.SPI_display_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_display_ON &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ltdc_init_sequence
</UL>

<P><STRONG><a name="[32e]"></a>SPI_flip_horizontal</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi.o(i.SPI_flip_horizontal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_flip_horizontal &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ltdc_init_sequence
</UL>

<P><STRONG><a name="[32f]"></a>SPI_invert_colors</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, spi.o(i.SPI_invert_colors))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_invert_colors &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ltdc_init_sequence
</UL>

<P><STRONG><a name="[330]"></a>SPI_ltdc_init_sequence</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, spi.o(i.SPI_ltdc_init_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SPI_ltdc_init_sequence &rArr; SPI_setGAMMA &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_sleep_out
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_setRGBIF
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_setPANEL
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_setGAMMA
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_setEXTC
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_invert_colors
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_flip_horizontal
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_display_ON
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_colmod
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_brightness
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[331]"></a>SPI_setEXTC</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, spi.o(i.SPI_setEXTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_setEXTC &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ltdc_init_sequence
</UL>

<P><STRONG><a name="[334]"></a>SPI_setGAMMA</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, spi.o(i.SPI_setGAMMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPI_setGAMMA &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ltdc_init_sequence
</UL>

<P><STRONG><a name="[333]"></a>SPI_setPANEL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi.o(i.SPI_setPANEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_setPANEL &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ltdc_init_sequence
</UL>

<P><STRONG><a name="[332]"></a>SPI_setRGBIF</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi.o(i.SPI_setRGBIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_setRGBIF &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ltdc_init_sequence
</UL>

<P><STRONG><a name="[335]"></a>SPI_sleep_out</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, spi.o(i.SPI_sleep_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_sleep_out &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ltdc_init_sequence
</UL>

<P><STRONG><a name="[8f]"></a>StartDefaultTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = StartDefaultTask &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_MainTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[339]"></a>SystemClock_Config</STRONG> (Thumb, 168 bytes, Stack size 224 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, system_stm32f7xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>TIM4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; TIM_callback &rArr; data_efiOff
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; TIM_callback &rArr; data_efiOff
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = TIM7_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; TIM_callback &rArr; data_efiOff
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; TIM_callback &rArr; data_efiOff
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2cf]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2e8]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[2d1]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[2df]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[2e0]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[2e1]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[2e2]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[2ea]"></a>TIM_callback</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, tim.o(i.TIM_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = TIM_callback &rArr; data_efiOff
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_send
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_efiOff
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_tractionRpm_send
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_Traction
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_RpmLimiter
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[33d]"></a>TIM_startTimers</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tim.o(i.TIM_startTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_startTimers &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[369]"></a>TIM_stopBuzzer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tim.o(i.TIM_stopBuzzer))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::checkChangeScreen()
</UL>

<P><STRONG><a name="[33b]"></a>TIM_tractionRpm_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tim.o(i.TIM_tractionRpm_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM_tractionRpm_send &rArr; CAN_send &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_callback
</UL>

<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[33e]"></a>MX_FMC_Init()</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, hw_init.o(i._Z11MX_FMC_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_FMC_Init() &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init()
</UL>

<P><STRONG><a name="[33f]"></a>MX_LCD_Init()</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, hw_init.o(i._Z11MX_LCD_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_LCD_Init() &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetPitch
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DeInit
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init()
</UL>

<P><STRONG><a name="[342]"></a>GRAPHICS_Init()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boardconfiguration.o(i._Z13GRAPHICS_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GRAPHICS_Init() &rArr; touchgfx::touchgfx_init() &rArr; touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned) &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::touchgfx_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[344]"></a>MX_SDRAM_InitEx()</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, hw_init.o(i._Z15MX_SDRAM_InitExv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_SDRAM_InitEx() &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init()
</UL>

<P><STRONG><a name="[345]"></a>GRAPHICS_HW_Init()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, boardconfiguration.o(i._Z16GRAPHICS_HW_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GRAPHICS_HW_Init() &rArr; MX_LCD_Init() &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::init()
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[347]"></a>getFont_Roboto_Black_100_4bpp()</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, fontgetters.o(i._Z29getFont_Roboto_Black_100_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = getFont_Roboto_Black_100_4bpp() &rArr; touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_42ef4e5b
</UL>

<P><STRONG><a name="[34a]"></a>getFont_Roboto_Regular_25_4bpp()</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, fontgetters.o(i._Z30getFont_Roboto_Regular_25_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = getFont_Roboto_Regular_25_4bpp() &rArr; touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_42ef4e5b
</UL>

<P><STRONG><a name="[34b]"></a>getFont_Roboto_Regular_35_4bpp()</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, fontgetters.o(i._Z30getFont_Roboto_Regular_35_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = getFont_Roboto_Regular_35_4bpp() &rArr; touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_42ef4e5b
</UL>

<P><STRONG><a name="[34c]"></a>getFont_Roboto_Regular_45_4bpp()</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, fontgetters.o(i._Z30getFont_Roboto_Regular_45_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = getFont_Roboto_Regular_45_4bpp() &rArr; touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_42ef4e5b
</UL>

<P><STRONG><a name="[34d]"></a>getFont_Roboto_Regular_63_4bpp()</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, fontgetters.o(i._Z30getFont_Roboto_Regular_63_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = getFont_Roboto_Regular_63_4bpp() &rArr; touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_42ef4e5b
</UL>

<P><STRONG><a name="[34e]"></a>getFont_Roboto_Regular_80_4bpp()</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, fontgetters.o(i._Z30getFont_Roboto_Regular_80_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = getFont_Roboto_Regular_80_4bpp() &rArr; touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_42ef4e5b
</UL>

<P><STRONG><a name="[34f]"></a>getFont_Roboto_Regular_180_4bpp()</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, fontgetters.o(i._Z31getFont_Roboto_Regular_180_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = getFont_Roboto_Regular_180_4bpp() &rArr; touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_42ef4e5b
</UL>

<P><STRONG><a name="[350]"></a>getFont_Roboto_Regular_420_4bpp()</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, fontgetters.o(i._Z31getFont_Roboto_Regular_420_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = getFont_Roboto_Regular_420_4bpp() &rArr; touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_42ef4e5b
</UL>

<P><STRONG><a name="[b6]"></a>STM32F7DMA::initialize()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7dma.o(i._ZN10STM32F7DMA10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = STM32F7DMA::initialize() &rArr; HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[b3]"></a>STM32F7DMA::getBlitCaps()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7dma.o(i._ZN10STM32F7DMA11getBlitCapsEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[bc]"></a>STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&)</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, stm32f7dma.o(i._ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&) &rArr; HAL_DMA2D_Start_IT &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start_IT
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_BlendingStart_IT
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_SetMode(__DMA2D_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[bd]"></a>STM32F7DMA::setupDataFill(const touchgfx::BlitOp&)</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, stm32f7dma.o(i._ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = STM32F7DMA::setupDataFill(const touchgfx::BlitOp&) &rArr; HAL_DMA2D_Start_IT &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start_IT
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_BlendingStart_IT
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_SetMode(__DMA2D_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[b8]"></a>STM32F7DMA::signalDMAInterrupt()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7dma.o(i._ZN10STM32F7DMA18signalDMAInterruptEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[b7]"></a>STM32F7DMA::start()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7dma.o(i._ZN10STM32F7DMA5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32F7DMA::start() &rArr; touchgfx::DMA_Interface::start()
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::start()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[354]"></a>STM32F7DMA::STM32F7DMA()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f7dma.o(i._ZN10STM32F7DMAC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM32F7DMA::STM32F7DMA() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue(touchgfx::BlitOp*, unsigned long)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_BoardConfiguration_cpp_2f1c5dae
</UL>

<P><STRONG><a name="[4c6]"></a>STM32F7DMA::STM32F7DMA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, stm32f7dma.o(i._ZN10STM32F7DMAC1Ev), UNUSED)

<P><STRONG><a name="[85]"></a>STM32F7DMA::~STM32F7DMA()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f7dma.o(i._ZN10STM32F7DMAD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STM32F7DMA::~STM32F7DMA() &rArr; HAL_DMA2D_DeInit &rArr; HAL_DMA2D_CLUTLoading_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_DeInit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
<LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[4c7]"></a>STM32F7DMA::~STM32F7DMA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, stm32f7dma.o(i._ZN10STM32F7DMAD1Ev), UNUSED)

<P><STRONG><a name="[d3]"></a>STM32F7HAL::enableInterrupts()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f7hal.o(i._ZN10STM32F7HAL16enableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32F7HAL::enableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn_Type)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[c3]"></a>STM32F7HAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7hal.o(i._ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[d4]"></a>STM32F7HAL::disableInterrupts()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f7hal.o(i._ZN10STM32F7HAL17disableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32F7HAL::disableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ(IRQn_Type)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[d8]"></a>STM32F7HAL::getTFTCurrentLine()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7hal.o(i._ZN10STM32F7HAL17getTFTCurrentLineEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[dc]"></a>STM32F7HAL::setTFTFrameBuffer(unsigned short*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7hal.o(i._ZN10STM32F7HAL17setTFTFrameBufferEPt))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[d2]"></a>STM32F7HAL::configureInterrupts()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7hal.o(i._ZN10STM32F7HAL19configureInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32F7HAL::configureInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[d5]"></a>STM32F7HAL::enableLCDControllerInterrupt()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f7hal.o(i._ZN10STM32F7HAL28enableLCDControllerInterruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STM32F7HAL::enableLCDControllerInterrupt() &rArr; HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[8c]"></a>STM32F7HAL::~STM32F7HAL()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN10STM32F7HALD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> boardconfiguration.o(t._ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtjj)
</UL>
<P><STRONG><a name="[4c8]"></a>STM32F7HAL::~STM32F7HAL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN10STM32F7HALD1Ev), UNUSED)

<P><STRONG><a name="[e2]"></a>SKIDPADView::setupScreen()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, skidpadview.o(i._ZN11SKIDPADView11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SKIDPADView::setupScreen() &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
</UL>
<P><STRONG><a name="[ef]"></a>SKIDPADView::checkAntistall()</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, skidpadview.o(i._ZN11SKIDPADView14checkAntistallEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SKIDPADView::checkAntistall() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::refreshSkidpad()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
</UL>
<P><STRONG><a name="[ed]"></a>SKIDPADView::checkEmergency()</STRONG> (Thumb, 1118 bytes, Stack size 40 bytes, skidpadview.o(i._ZN11SKIDPADView14checkEmergencyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SKIDPADView::checkEmergency() &rArr; touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
</UL>
<P><STRONG><a name="[ea]"></a>SKIDPADView::refreshSkidpad()</STRONG> (Thumb, 1344 bytes, Stack size 56 bytes, skidpadview.o(i._ZN11SKIDPADView14refreshSkidpadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = SKIDPADView::refreshSkidpad() &rArr; touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkFuelIndicator()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkChangeScreen()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::screenEntryPopup()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkAntistall()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
</UL>
<P><STRONG><a name="[e4]"></a>SKIDPADView::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, skidpadview.o(i._ZN11SKIDPADView14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
</UL>
<P><STRONG><a name="[ec]"></a>SKIDPADView::screenEntryPopup()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, skidpadview.o(i._ZN11SKIDPADView16screenEntryPopupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SKIDPADView::screenEntryPopup() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::refreshSkidpad()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
</UL>
<P><STRONG><a name="[eb]"></a>SKIDPADView::checkChangeScreen()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, skidpadview.o(i._ZN11SKIDPADView17checkChangeScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SKIDPADView::checkChangeScreen() &rArr; FrontendApplicationBase::gotoACCELERATIONScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoACCELERATIONScreenNoTransition()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransition()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoNOISE_MODEScreenNoTransition()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransition()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoENDURANCEScreenNoTransition()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoAUTOCROSSScreenNoTransition()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSETTINGSScreenNoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::refreshSkidpad()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
</UL>
<P><STRONG><a name="[ee]"></a>SKIDPADView::checkFuelIndicator()</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, skidpadview.o(i._ZN11SKIDPADView18checkFuelIndicatorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SKIDPADView::checkFuelIndicator() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::refreshSkidpad()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
</UL>
<P><STRONG><a name="[366]"></a>SKIDPADView::SKIDPADView()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, skidpadview.o(i._ZN11SKIDPADViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = SKIDPADView::SKIDPADView() &rArr; SKIDPADViewBase::SKIDPADViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::SKIDPADViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SKIDPADView, SKIDPADPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4c9]"></a>SKIDPADView::SKIDPADView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, skidpadview.o(i._ZN11SKIDPADViewC1Ev), UNUSED)

<P><STRONG><a name="[e0]"></a>SKIDPADView::~SKIDPADView()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, skidpadview.o(i._ZN11SKIDPADViewD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::~SKIDPADViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
</UL>
<P><STRONG><a name="[4ca]"></a>SKIDPADView::~SKIDPADView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, skidpadview.o(i._ZN11SKIDPADViewD1Ev), UNUSED)

<P><STRONG><a name="[f1]"></a>Screen1View::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1view.o(i._ZN11Screen1View11setupScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[f4]"></a>Screen1View::refreshScreen1()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, screen1view.o(i._ZN11Screen1View14refreshScreen1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Screen1View::refreshScreen1() &rArr; Screen1View::checkChangeScreen() &rArr; FrontendApplicationBase::gotoACCELERATIONScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::checkChangeScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[f3]"></a>Screen1View::checkChangeScreen()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1View17checkChangeScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Screen1View::checkChangeScreen() &rArr; FrontendApplicationBase::gotoACCELERATIONScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_stopBuzzer
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoACCELERATIONScreenNoTransition()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransition()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoNOISE_MODEScreenNoTransition()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransition()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoENDURANCEScreenNoTransition()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoAUTOCROSSScreenNoTransition()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSETTINGSScreenNoTransition()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSKIDPADScreenNoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::refreshScreen1()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[36a]"></a>Screen1View::Screen1View()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1ViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Screen1View::Screen1View() &rArr; Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Screen::Screen() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4cb]"></a>Screen1View::Screen1View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1ViewC1Ev), UNUSED)

<P><STRONG><a name="[f0]"></a>Screen1View::~Screen1View()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1ViewD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Screen1View::~Screen1View()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::~ScalableImage()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[4cc]"></a>Screen1View::~Screen1View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1ViewD1Ev), UNUSED)

<P><STRONG><a name="[36c]"></a>FrontendHeap::FrontendHeap()</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, boardconfiguration.o(i._ZN12FrontendHeapC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FrontendHeap::FrontendHeap() &rArr; FrontendApplication::FrontendApplication(Model&, FrontendHeap&) &rArr; FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::Application::Application() &rArr; touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::AbstractPartition__sub_object()
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::Model()
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransition()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::FrontendApplication(Model&, FrontendHeap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[4cd]"></a>FrontendHeap::FrontendHeap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, boardconfiguration.o(i._ZN12FrontendHeapC1Ev), UNUSED)

<P><STRONG><a name="[8d]"></a>FrontendHeap::~FrontendHeap()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, boardconfiguration.o(i._ZN12FrontendHeapD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FrontendHeap::~FrontendHeap()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::~AbstractPartition__sub_object()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::~FrontendApplicationBase()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> boardconfiguration.o(t._ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtjj)
<LI> boardconfiguration.o(.constdata__ZTV12FrontendHeap)
</UL>
<P><STRONG><a name="[4ce]"></a>FrontendHeap::~FrontendHeap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, boardconfiguration.o(i._ZN12FrontendHeapD1Ev), UNUSED)

<P><STRONG><a name="[f6]"></a>SETTINGSView::setupScreen()</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, settingsview.o(i._ZN12SETTINGSView11setupScreenEv))
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[104]"></a>SETTINGSView::displaySkidpad()</STRONG> (Thumb, 676 bytes, Stack size 48 bytes, settingsview.o(i._ZN12SETTINGSView14displaySkidpadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = SETTINGSView::displaySkidpad() &rArr; touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::refreshSettings()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[f7]"></a>SETTINGSView::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, settingsview.o(i._ZN12SETTINGSView14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[fe]"></a>SETTINGSView::moveSelectedBox()</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, settingsview.o(i._ZN12SETTINGSView15moveSelectedBoxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SETTINGSView::moveSelectedBox() &rArr; touchgfx::Drawable::setPosition(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::refreshSettings()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[f8]"></a>SETTINGSView::refreshSettings()</STRONG> (Thumb, 1622 bytes, Stack size 96 bytes, settingsview.o(i._ZN12SETTINGSView15refreshSettingsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = SETTINGSView::refreshSettings() &rArr; SETTINGSView::displayAcceleration() &rArr; touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::calibrationImuDisplay()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::calibrationDcuDisplay()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displayAcceleration()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::checkChangeScreen()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displayEndurance()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displayAutocross()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::moveSelectedBox()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displaySkidpad()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[fa]"></a>SETTINGSView::changeSchermata0(bool)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, settingsview.o(i._ZN12SETTINGSView16changeSchermata0Eb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SETTINGSView::changeSchermata0(bool) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[fb]"></a>SETTINGSView::changeSchermata1(bool)</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, settingsview.o(i._ZN12SETTINGSView16changeSchermata1Eb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SETTINGSView::changeSchermata1(bool) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[fc]"></a>SETTINGSView::changeSchermata2(bool)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, settingsview.o(i._ZN12SETTINGSView16changeSchermata2Eb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SETTINGSView::changeSchermata2(bool) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[fd]"></a>SETTINGSView::changeSchermata3(bool)</STRONG> (Thumb, 396 bytes, Stack size 152 bytes, settingsview.o(i._ZN12SETTINGSView16changeSchermata3Eb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SETTINGSView::changeSchermata3(bool) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[103]"></a>SETTINGSView::displayAutocross()</STRONG> (Thumb, 676 bytes, Stack size 48 bytes, settingsview.o(i._ZN12SETTINGSView16displayAutocrossEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = SETTINGSView::displayAutocross() &rArr; touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::refreshSettings()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[102]"></a>SETTINGSView::displayEndurance()</STRONG> (Thumb, 676 bytes, Stack size 48 bytes, settingsview.o(i._ZN12SETTINGSView16displayEnduranceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = SETTINGSView::displayEndurance() &rArr; touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::refreshSettings()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[f9]"></a>SETTINGSView::checkChangeScreen()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, settingsview.o(i._ZN12SETTINGSView17checkChangeScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SETTINGSView::checkChangeScreen() &rArr; FrontendApplicationBase::gotoACCELERATIONScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoACCELERATIONScreenNoTransition()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransition()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoNOISE_MODEScreenNoTransition()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransition()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoENDURANCEScreenNoTransition()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoAUTOCROSSScreenNoTransition()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSKIDPADScreenNoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::refreshSettings()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[101]"></a>SETTINGSView::displayAcceleration()</STRONG> (Thumb, 676 bytes, Stack size 48 bytes, settingsview.o(i._ZN12SETTINGSView19displayAccelerationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = SETTINGSView::displayAcceleration() &rArr; touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::refreshSettings()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[ff]"></a>SETTINGSView::calibrationDcuDisplay()</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, settingsview.o(i._ZN12SETTINGSView21calibrationDcuDisplayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = SETTINGSView::calibrationDcuDisplay() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::refreshSettings()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[100]"></a>SETTINGSView::calibrationImuDisplay()</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, settingsview.o(i._ZN12SETTINGSView21calibrationImuDisplayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = SETTINGSView::calibrationImuDisplay() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::refreshSettings()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[371]"></a>SETTINGSView::SETTINGSView()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, settingsview.o(i._ZN12SETTINGSViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = SETTINGSView::SETTINGSView() &rArr; SETTINGSViewBase::SETTINGSViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SETTINGSView, SETTINGSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4cf]"></a>SETTINGSView::SETTINGSView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, settingsview.o(i._ZN12SETTINGSViewC1Ev), UNUSED)

<P><STRONG><a name="[f5]"></a>SETTINGSView::~SETTINGSView()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, settingsview.o(i._ZN12SETTINGSViewD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::~SETTINGSViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsview.o(.constdata__ZTV12SETTINGSView)
</UL>
<P><STRONG><a name="[4d0]"></a>SETTINGSView::~SETTINGSView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, settingsview.o(i._ZN12SETTINGSViewD1Ev), UNUSED)

<P><STRONG><a name="[106]"></a>AUTOCROSSView::setupScreen()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, autocrossview.o(i._ZN13AUTOCROSSView11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AUTOCROSSView::setupScreen() &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::setupScreen()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
</UL>
<P><STRONG><a name="[10e]"></a>AUTOCROSSView::checkAntistall()</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, autocrossview.o(i._ZN13AUTOCROSSView14checkAntistallEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AUTOCROSSView::checkAntistall() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::refreshAutocross()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
</UL>
<P><STRONG><a name="[10c]"></a>AUTOCROSSView::checkEmergency()</STRONG> (Thumb, 1118 bytes, Stack size 40 bytes, autocrossview.o(i._ZN13AUTOCROSSView14checkEmergencyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AUTOCROSSView::checkEmergency() &rArr; touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
</UL>
<P><STRONG><a name="[107]"></a>AUTOCROSSView::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, autocrossview.o(i._ZN13AUTOCROSSView14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
</UL>
<P><STRONG><a name="[108]"></a>AUTOCROSSView::refreshAutocross()</STRONG> (Thumb, 1352 bytes, Stack size 56 bytes, autocrossview.o(i._ZN13AUTOCROSSView16refreshAutocrossEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AUTOCROSSView::refreshAutocross() &rArr; touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::screenCheckMessage()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkFuelIndicator()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkChangeScreen()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::screenEntryPopup()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkAntistall()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
</UL>
<P><STRONG><a name="[10a]"></a>AUTOCROSSView::screenEntryPopup()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, autocrossview.o(i._ZN13AUTOCROSSView16screenEntryPopupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AUTOCROSSView::screenEntryPopup() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::refreshAutocross()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
</UL>
<P><STRONG><a name="[109]"></a>AUTOCROSSView::checkChangeScreen()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, autocrossview.o(i._ZN13AUTOCROSSView17checkChangeScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AUTOCROSSView::checkChangeScreen() &rArr; FrontendApplicationBase::gotoACCELERATIONScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoACCELERATIONScreenNoTransition()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransition()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoNOISE_MODEScreenNoTransition()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransition()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoENDURANCEScreenNoTransition()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSETTINGSScreenNoTransition()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSKIDPADScreenNoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::refreshAutocross()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
</UL>
<P><STRONG><a name="[10d]"></a>AUTOCROSSView::checkFuelIndicator()</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, autocrossview.o(i._ZN13AUTOCROSSView18checkFuelIndicatorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AUTOCROSSView::checkFuelIndicator() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::refreshAutocross()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
</UL>
<P><STRONG><a name="[10b]"></a>AUTOCROSSView::screenCheckMessage()</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, autocrossview.o(i._ZN13AUTOCROSSView18screenCheckMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = AUTOCROSSView::screenCheckMessage() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::refreshAutocross()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
</UL>
<P><STRONG><a name="[373]"></a>AUTOCROSSView::AUTOCROSSView()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, autocrossview.o(i._ZN13AUTOCROSSViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = AUTOCROSSView::AUTOCROSSView() &rArr; AUTOCROSSViewBase::AUTOCROSSViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::AUTOCROSSViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;AUTOCROSSView, AUTOCROSSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4d1]"></a>AUTOCROSSView::AUTOCROSSView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, autocrossview.o(i._ZN13AUTOCROSSViewC1Ev), UNUSED)

<P><STRONG><a name="[105]"></a>AUTOCROSSView::~AUTOCROSSView()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, autocrossview.o(i._ZN13AUTOCROSSViewD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::~AUTOCROSSViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
</UL>
<P><STRONG><a name="[4d2]"></a>AUTOCROSSView::~AUTOCROSSView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, autocrossview.o(i._ZN13AUTOCROSSViewD1Ev), UNUSED)

<P><STRONG><a name="[110]"></a>ENDURANCEView::setupScreen()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, enduranceview.o(i._ZN13ENDURANCEView11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ENDURANCEView::setupScreen() &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::setupScreen()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
</UL>
<P><STRONG><a name="[117]"></a>ENDURANCEView::checkAntistall()</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, enduranceview.o(i._ZN13ENDURANCEView14checkAntistallEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ENDURANCEView::checkAntistall() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::refreshEndurance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
</UL>
<P><STRONG><a name="[115]"></a>ENDURANCEView::checkEmergency()</STRONG> (Thumb, 1118 bytes, Stack size 40 bytes, enduranceview.o(i._ZN13ENDURANCEView14checkEmergencyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ENDURANCEView::checkEmergency() &rArr; touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
</UL>
<P><STRONG><a name="[111]"></a>ENDURANCEView::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, enduranceview.o(i._ZN13ENDURANCEView14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
</UL>
<P><STRONG><a name="[112]"></a>ENDURANCEView::refreshEndurance()</STRONG> (Thumb, 1312 bytes, Stack size 48 bytes, enduranceview.o(i._ZN13ENDURANCEView16refreshEnduranceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ENDURANCEView::refreshEndurance() &rArr; touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkFuelIndicator()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkChangeScreen()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::screenEntryPopup()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkAntistall()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
</UL>
<P><STRONG><a name="[114]"></a>ENDURANCEView::screenEntryPopup()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, enduranceview.o(i._ZN13ENDURANCEView16screenEntryPopupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENDURANCEView::screenEntryPopup() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::refreshEndurance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
</UL>
<P><STRONG><a name="[113]"></a>ENDURANCEView::checkChangeScreen()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, enduranceview.o(i._ZN13ENDURANCEView17checkChangeScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ENDURANCEView::checkChangeScreen() &rArr; FrontendApplicationBase::gotoACCELERATIONScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoACCELERATIONScreenNoTransition()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransition()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoNOISE_MODEScreenNoTransition()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransition()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoAUTOCROSSScreenNoTransition()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSETTINGSScreenNoTransition()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSKIDPADScreenNoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::refreshEndurance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
</UL>
<P><STRONG><a name="[116]"></a>ENDURANCEView::checkFuelIndicator()</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, enduranceview.o(i._ZN13ENDURANCEView18checkFuelIndicatorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ENDURANCEView::checkFuelIndicator() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::refreshEndurance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
</UL>
<P><STRONG><a name="[375]"></a>ENDURANCEView::ENDURANCEView()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, enduranceview.o(i._ZN13ENDURANCEViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ENDURANCEView::ENDURANCEView() &rArr; ENDURANCEViewBase::ENDURANCEViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::ENDURANCEViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ENDURANCEView, ENDURANCEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4d3]"></a>ENDURANCEView::ENDURANCEView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, enduranceview.o(i._ZN13ENDURANCEViewC1Ev), UNUSED)

<P><STRONG><a name="[10f]"></a>ENDURANCEView::~ENDURANCEView()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enduranceview.o(i._ZN13ENDURANCEViewD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::~ENDURANCEViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
</UL>
<P><STRONG><a name="[4d4]"></a>ENDURANCEView::~ENDURANCEView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, enduranceview.o(i._ZN13ENDURANCEViewD1Ev), UNUSED)

<P><STRONG><a name="[4b1]"></a>BitmapDatabase::getInstance()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bitmapdatabase.o(i._ZN14BitmapDatabase11getInstanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[4b0]"></a>BitmapDatabase::getInstanceSize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bitmapdatabase.o(i._ZN14BitmapDatabase15getInstanceSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[119]"></a>DEBUG_MODEView::setupScreen()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, debug_modeview.o(i._ZN14DEBUG_MODEView11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DEBUG_MODEView::setupScreen() &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::setupScreen()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
</UL>
<P><STRONG><a name="[11a]"></a>DEBUG_MODEView::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug_modeview.o(i._ZN14DEBUG_MODEView14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
</UL>
<P><STRONG><a name="[11b]"></a>DEBUG_MODEView::refreshDebugMode()</STRONG> (Thumb, 2096 bytes, Stack size 104 bytes, debug_modeview.o(i._ZN14DEBUG_MODEView16refreshDebugModeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = DEBUG_MODEView::refreshDebugMode() &rArr; touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::checkChangeScreen()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
</UL>
<P><STRONG><a name="[11c]"></a>DEBUG_MODEView::checkChangeScreen()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, debug_modeview.o(i._ZN14DEBUG_MODEView17checkChangeScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DEBUG_MODEView::checkChangeScreen() &rArr; FrontendApplicationBase::gotoACCELERATIONScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoACCELERATIONScreenNoTransition()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransition()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoNOISE_MODEScreenNoTransition()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoENDURANCEScreenNoTransition()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoAUTOCROSSScreenNoTransition()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSETTINGSScreenNoTransition()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSKIDPADScreenNoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::refreshDebugMode()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
</UL>
<P><STRONG><a name="[377]"></a>DEBUG_MODEView::DEBUG_MODEView()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, debug_modeview.o(i._ZN14DEBUG_MODEViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = DEBUG_MODEView::DEBUG_MODEView() &rArr; DEBUG_MODEViewBase::DEBUG_MODEViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;DEBUG_MODEView, DEBUG_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4d5]"></a>DEBUG_MODEView::DEBUG_MODEView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, debug_modeview.o(i._ZN14DEBUG_MODEViewC1Ev), UNUSED)

<P><STRONG><a name="[118]"></a>DEBUG_MODEView::~DEBUG_MODEView()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, debug_modeview.o(i._ZN14DEBUG_MODEViewD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DEBUG_MODEView::~DEBUG_MODEView() &rArr; DEBUG_MODEViewBase::~DEBUG_MODEViewBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::~DEBUG_MODEViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
</UL>
<P><STRONG><a name="[4d6]"></a>DEBUG_MODEView::~DEBUG_MODEView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, debug_modeview.o(i._ZN14DEBUG_MODEViewD1Ev), UNUSED)

<P><STRONG><a name="[11e]"></a>NOISE_MODEView::setupScreen()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, noise_modeview.o(i._ZN14NOISE_MODEView11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NOISE_MODEView::setupScreen() &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::setupScreen()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
</UL>
<P><STRONG><a name="[11f]"></a>NOISE_MODEView::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noise_modeview.o(i._ZN14NOISE_MODEView14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
</UL>
<P><STRONG><a name="[121]"></a>NOISE_MODEView::refreshNoiseMode()</STRONG> (Thumb, 508 bytes, Stack size 24 bytes, noise_modeview.o(i._ZN14NOISE_MODEView16refreshNoiseModeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = NOISE_MODEView::refreshNoiseMode() &rArr; touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::checkChangeScreen()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
</UL>
<P><STRONG><a name="[120]"></a>NOISE_MODEView::checkChangeScreen()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, noise_modeview.o(i._ZN14NOISE_MODEView17checkChangeScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NOISE_MODEView::checkChangeScreen() &rArr; FrontendApplicationBase::gotoACCELERATIONScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoACCELERATIONScreenNoTransition()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransition()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransition()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoENDURANCEScreenNoTransition()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoAUTOCROSSScreenNoTransition()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSETTINGSScreenNoTransition()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSKIDPADScreenNoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::refreshNoiseMode()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
</UL>
<P><STRONG><a name="[379]"></a>NOISE_MODEView::NOISE_MODEView()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, noise_modeview.o(i._ZN14NOISE_MODEViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = NOISE_MODEView::NOISE_MODEView() &rArr; NOISE_MODEViewBase::NOISE_MODEViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::NOISE_MODEViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;NOISE_MODEView, NOISE_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4d7]"></a>NOISE_MODEView::NOISE_MODEView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, noise_modeview.o(i._ZN14NOISE_MODEViewC1Ev), UNUSED)

<P><STRONG><a name="[11d]"></a>NOISE_MODEView::~NOISE_MODEView()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, noise_modeview.o(i._ZN14NOISE_MODEViewD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::~NOISE_MODEViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
</UL>
<P><STRONG><a name="[4d8]"></a>NOISE_MODEView::~NOISE_MODEView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, noise_modeview.o(i._ZN14NOISE_MODEViewD1Ev), UNUSED)

<P><STRONG><a name="[123]"></a>BOARD_DEBUGView::setupScreen()</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, board_debugview.o(i._ZN15BOARD_DEBUGView11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BOARD_DEBUGView::setupScreen() &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::setupScreen()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
</UL>
<P><STRONG><a name="[124]"></a>BOARD_DEBUGView::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_debugview.o(i._ZN15BOARD_DEBUGView14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
</UL>
<P><STRONG><a name="[126]"></a>BOARD_DEBUGView::checkChangeScreen()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, board_debugview.o(i._ZN15BOARD_DEBUGView17checkChangeScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BOARD_DEBUGView::checkChangeScreen() &rArr; FrontendApplicationBase::gotoACCELERATIONScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoACCELERATIONScreenNoTransition()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoNOISE_MODEScreenNoTransition()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransition()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoENDURANCEScreenNoTransition()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoAUTOCROSSScreenNoTransition()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSETTINGSScreenNoTransition()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSKIDPADScreenNoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::refreshBoardDebug()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
</UL>
<P><STRONG><a name="[125]"></a>BOARD_DEBUGView::refreshBoardDebug()</STRONG> (Thumb, 4570 bytes, Stack size 128 bytes, board_debugview.o(i._ZN15BOARD_DEBUGView17refreshBoardDebugEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = BOARD_DEBUGView::refreshBoardDebug() &rArr; touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::checkChangeScreen()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
</UL>
<P><STRONG><a name="[37b]"></a>BOARD_DEBUGView::BOARD_DEBUGView()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_debugview.o(i._ZN15BOARD_DEBUGViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = BOARD_DEBUGView::BOARD_DEBUGView() &rArr; BOARD_DEBUGViewBase::BOARD_DEBUGViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;BOARD_DEBUGView, BOARD_DEBUGPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4d9]"></a>BOARD_DEBUGView::BOARD_DEBUGView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, board_debugview.o(i._ZN15BOARD_DEBUGViewC1Ev), UNUSED)

<P><STRONG><a name="[122]"></a>BOARD_DEBUGView::~BOARD_DEBUGView()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board_debugview.o(i._ZN15BOARD_DEBUGViewD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BOARD_DEBUGView::~BOARD_DEBUGView() &rArr; BOARD_DEBUGViewBase::~BOARD_DEBUGViewBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::~BOARD_DEBUGViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
</UL>
<P><STRONG><a name="[4da]"></a>BOARD_DEBUGView::~BOARD_DEBUGView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, board_debugview.o(i._ZN15BOARD_DEBUGViewD1Ev), UNUSED)

<P><STRONG><a name="[128]"></a>SKIDPADViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, skidpadviewbase.o(i._ZN15SKIDPADViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
</UL>
<P><STRONG><a name="[367]"></a>SKIDPADViewBase::SKIDPADViewBase()</STRONG> (Thumb, 3364 bytes, Stack size 208 bytes, skidpadviewbase.o(i._ZN15SKIDPADViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = SKIDPADViewBase::SKIDPADViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::BoxWithBorder()
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::SKIDPADView()
</UL>

<P><STRONG><a name="[4db]"></a>SKIDPADViewBase::SKIDPADViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 208 bytes, skidpadviewbase.o(i._ZN15SKIDPADViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[127]"></a>SKIDPADViewBase::~SKIDPADViewBase()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, skidpadview.o(i._ZN15SKIDPADViewBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::~SKIDPADView()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
</UL>
<P><STRONG><a name="[4dc]"></a>SKIDPADViewBase::~SKIDPADViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, skidpadview.o(i._ZN15SKIDPADViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[12a]"></a>Screen1ViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase11setupScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[36b]"></a>Screen1ViewBase::Screen1ViewBase()</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Screen::Screen() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::ScalableImage()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::setScalingAlgorithm(touchgfx::ScalableImage::ScalingAlgorithm)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
</UL>

<P><STRONG><a name="[4dd]"></a>Screen1ViewBase::Screen1ViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[129]"></a>Screen1ViewBase::~Screen1ViewBase()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::~ScalableImage()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;Screen1Presenter&rang;::~View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[4de]"></a>Screen1ViewBase::~Screen1ViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[12c]"></a>ACCELERATIONView::setupScreen()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, accelerationview.o(i._ZN16ACCELERATIONView11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ACCELERATIONView::setupScreen() &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
</UL>
<P><STRONG><a name="[134]"></a>ACCELERATIONView::checkAntistall()</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, accelerationview.o(i._ZN16ACCELERATIONView14checkAntistallEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ACCELERATIONView::checkAntistall() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::refreshAcceleration()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
</UL>
<P><STRONG><a name="[132]"></a>ACCELERATIONView::checkEmergency()</STRONG> (Thumb, 1118 bytes, Stack size 40 bytes, accelerationview.o(i._ZN16ACCELERATIONView14checkEmergencyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ACCELERATIONView::checkEmergency() &rArr; touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
</UL>
<P><STRONG><a name="[12d]"></a>ACCELERATIONView::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, accelerationview.o(i._ZN16ACCELERATIONView14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
</UL>
<P><STRONG><a name="[130]"></a>ACCELERATIONView::screenEntryPopup()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, accelerationview.o(i._ZN16ACCELERATIONView16screenEntryPopupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ACCELERATIONView::screenEntryPopup() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::refreshAcceleration()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
</UL>
<P><STRONG><a name="[12f]"></a>ACCELERATIONView::checkChangeScreen()</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, accelerationview.o(i._ZN16ACCELERATIONView17checkChangeScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACCELERATIONView::checkChangeScreen() &rArr; FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransition()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoNOISE_MODEScreenNoTransition()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransition()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoENDURANCEScreenNoTransition()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoAUTOCROSSScreenNoTransition()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSETTINGSScreenNoTransition()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSKIDPADScreenNoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::refreshAcceleration()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
</UL>
<P><STRONG><a name="[133]"></a>ACCELERATIONView::checkFuelIndicator()</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, accelerationview.o(i._ZN16ACCELERATIONView18checkFuelIndicatorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACCELERATIONView::checkFuelIndicator() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::refreshAcceleration()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
</UL>
<P><STRONG><a name="[131]"></a>ACCELERATIONView::screenCheckMessage()</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, accelerationview.o(i._ZN16ACCELERATIONView18screenCheckMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ACCELERATIONView::screenCheckMessage() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::refreshAcceleration()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
</UL>
<P><STRONG><a name="[12e]"></a>ACCELERATIONView::refreshAcceleration()</STRONG> (Thumb, 1356 bytes, Stack size 56 bytes, accelerationview.o(i._ZN16ACCELERATIONView19refreshAccelerationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ACCELERATIONView::refreshAcceleration() &rArr; touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::screenCheckMessage()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkFuelIndicator()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkChangeScreen()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::screenEntryPopup()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkAntistall()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
</UL>
<P><STRONG><a name="[388]"></a>ACCELERATIONView::ACCELERATIONView()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, accelerationview.o(i._ZN16ACCELERATIONViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = ACCELERATIONView::ACCELERATIONView() &rArr; ACCELERATIONViewBase::ACCELERATIONViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::ACCELERATIONViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ACCELERATIONView, ACCELERATIONPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4df]"></a>ACCELERATIONView::ACCELERATIONView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, accelerationview.o(i._ZN16ACCELERATIONViewC1Ev), UNUSED)

<P><STRONG><a name="[12b]"></a>ACCELERATIONView::~ACCELERATIONView()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, accelerationview.o(i._ZN16ACCELERATIONViewD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::~ACCELERATIONViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
</UL>
<P><STRONG><a name="[4e0]"></a>ACCELERATIONView::~ACCELERATIONView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, accelerationview.o(i._ZN16ACCELERATIONViewD1Ev), UNUSED)

<P><STRONG><a name="[136]"></a>SETTINGSViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, settingsviewbase.o(i._ZN16SETTINGSViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
</UL>
<P><STRONG><a name="[372]"></a>SETTINGSViewBase::SETTINGSViewBase()</STRONG> (Thumb, 5638 bytes, Stack size 320 bytes, settingsviewbase.o(i._ZN16SETTINGSViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = SETTINGSViewBase::SETTINGSViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::BoxWithBorder()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::SETTINGSView()
</UL>

<P><STRONG><a name="[4e1]"></a>SETTINGSViewBase::SETTINGSViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 320 bytes, settingsviewbase.o(i._ZN16SETTINGSViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[135]"></a>SETTINGSViewBase::~SETTINGSViewBase()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, settingsview.o(i._ZN16SETTINGSViewBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::~SETTINGSView()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
</UL>
<P><STRONG><a name="[4e2]"></a>SETTINGSViewBase::~SETTINGSViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, settingsview.o(i._ZN16SETTINGSViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[138]"></a>SKIDPADPresenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, skidpadpresenter.o(i._ZN16SKIDPADPresenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> skidpadpresenter.o(.constdata__ZTV16SKIDPADPresenter)
</UL>
<P><STRONG><a name="[13a]"></a>SKIDPADPresenter::update()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, skidpadpresenter.o(i._ZN16SKIDPADPresenter6updateEv))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to SKIDPADPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skidpadpresenter.o(.constdata__ZTV16SKIDPADPresenter)
</UL>
<P><STRONG><a name="[137]"></a>SKIDPADPresenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, skidpadpresenter.o(i._ZN16SKIDPADPresenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> skidpadpresenter.o(.constdata__ZTV16SKIDPADPresenter)
</UL>
<P><STRONG><a name="[4a6]"></a>SKIDPADPresenter::SKIDPADPresenter(SKIDPADView&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, skidpadpresenter.o(i._ZN16SKIDPADPresenterC1ER11SKIDPADView))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SKIDPADView, SKIDPADPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4e3]"></a>SKIDPADPresenter::SKIDPADPresenter__sub_object(SKIDPADView&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, skidpadpresenter.o(i._ZN16SKIDPADPresenterC1ER11SKIDPADView), UNUSED)

<P><STRONG><a name="[139]"></a>SKIDPADPresenter::~SKIDPADPresenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, skidpadpresenter.o(i._ZN16SKIDPADPresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> skidpadpresenter.o(.constdata__ZTV16SKIDPADPresenter)
</UL>
<P><STRONG><a name="[4e4]"></a>SKIDPADPresenter::~SKIDPADPresenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, skidpadpresenter.o(i._ZN16SKIDPADPresenterD1Ev), UNUSED)

<P><STRONG><a name="[13d]"></a>Screen1Presenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1Presenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[13f]"></a>Screen1Presenter::update()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1Presenter6updateEv))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to Screen1Presenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[13c]"></a>Screen1Presenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1Presenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[4a7]"></a>Screen1Presenter::Screen1Presenter(Screen1View&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterC1ER11Screen1View))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4e5]"></a>Screen1Presenter::Screen1Presenter__sub_object(Screen1View&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterC1ER11Screen1View), UNUSED)

<P><STRONG><a name="[13e]"></a>Screen1Presenter::~Screen1Presenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[4e6]"></a>Screen1Presenter::~Screen1Presenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterD1Ev), UNUSED)

<P><STRONG><a name="[142]"></a>AUTOCROSSViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, autocrossviewbase.o(i._ZN17AUTOCROSSViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
</UL>
<P><STRONG><a name="[374]"></a>AUTOCROSSViewBase::AUTOCROSSViewBase()</STRONG> (Thumb, 3536 bytes, Stack size 216 bytes, autocrossviewbase.o(i._ZN17AUTOCROSSViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = AUTOCROSSViewBase::AUTOCROSSViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::BoxWithBorder()
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::AUTOCROSSView()
</UL>

<P><STRONG><a name="[4e7]"></a>AUTOCROSSViewBase::AUTOCROSSViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 216 bytes, autocrossviewbase.o(i._ZN17AUTOCROSSViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[141]"></a>AUTOCROSSViewBase::~AUTOCROSSViewBase()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, autocrossview.o(i._ZN17AUTOCROSSViewBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::~AUTOCROSSView()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
</UL>
<P><STRONG><a name="[4e8]"></a>AUTOCROSSViewBase::~AUTOCROSSViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, autocrossview.o(i._ZN17AUTOCROSSViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[144]"></a>ENDURANCEViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, enduranceviewbase.o(i._ZN17ENDURANCEViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
</UL>
<P><STRONG><a name="[376]"></a>ENDURANCEViewBase::ENDURANCEViewBase()</STRONG> (Thumb, 3174 bytes, Stack size 200 bytes, enduranceviewbase.o(i._ZN17ENDURANCEViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ENDURANCEViewBase::ENDURANCEViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::BoxWithBorder()
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::ENDURANCEView()
</UL>

<P><STRONG><a name="[4e9]"></a>ENDURANCEViewBase::ENDURANCEViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 200 bytes, enduranceviewbase.o(i._ZN17ENDURANCEViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[143]"></a>ENDURANCEViewBase::~ENDURANCEViewBase()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, enduranceview.o(i._ZN17ENDURANCEViewBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::~ENDURANCEView()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
</UL>
<P><STRONG><a name="[4ea]"></a>ENDURANCEViewBase::~ENDURANCEViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, enduranceview.o(i._ZN17ENDURANCEViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[146]"></a>SETTINGSPresenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, settingspresenter.o(i._ZN17SETTINGSPresenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> settingspresenter.o(.constdata__ZTV17SETTINGSPresenter)
</UL>
<P><STRONG><a name="[148]"></a>SETTINGSPresenter::update()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, settingspresenter.o(i._ZN17SETTINGSPresenter6updateEv))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to SETTINGSPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingspresenter.o(.constdata__ZTV17SETTINGSPresenter)
</UL>
<P><STRONG><a name="[145]"></a>SETTINGSPresenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, settingspresenter.o(i._ZN17SETTINGSPresenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> settingspresenter.o(.constdata__ZTV17SETTINGSPresenter)
</UL>
<P><STRONG><a name="[4a8]"></a>SETTINGSPresenter::SETTINGSPresenter(SETTINGSView&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, settingspresenter.o(i._ZN17SETTINGSPresenterC1ER12SETTINGSView))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SETTINGSView, SETTINGSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4eb]"></a>SETTINGSPresenter::SETTINGSPresenter__sub_object(SETTINGSView&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, settingspresenter.o(i._ZN17SETTINGSPresenterC1ER12SETTINGSView), UNUSED)

<P><STRONG><a name="[147]"></a>SETTINGSPresenter::~SETTINGSPresenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, settingspresenter.o(i._ZN17SETTINGSPresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> settingspresenter.o(.constdata__ZTV17SETTINGSPresenter)
</UL>
<P><STRONG><a name="[4ec]"></a>SETTINGSPresenter::~SETTINGSPresenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, settingspresenter.o(i._ZN17SETTINGSPresenterD1Ev), UNUSED)

<P><STRONG><a name="[406]"></a>TypedTextDatabase::getInstance(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase11getInstanceEt))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[408]"></a>TypedTextDatabase::getInstanceSize()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase15getInstanceSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[407]"></a>TypedTextDatabase::getFonts()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase8getFontsEv))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[14b]"></a>AUTOCROSSPresenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, autocrosspresenter.o(i._ZN18AUTOCROSSPresenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> autocrosspresenter.o(.constdata__ZTV18AUTOCROSSPresenter)
</UL>
<P><STRONG><a name="[14d]"></a>AUTOCROSSPresenter::update()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, autocrosspresenter.o(i._ZN18AUTOCROSSPresenter6updateEv))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to AUTOCROSSPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autocrosspresenter.o(.constdata__ZTV18AUTOCROSSPresenter)
</UL>
<P><STRONG><a name="[14a]"></a>AUTOCROSSPresenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, autocrosspresenter.o(i._ZN18AUTOCROSSPresenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> autocrosspresenter.o(.constdata__ZTV18AUTOCROSSPresenter)
</UL>
<P><STRONG><a name="[4a9]"></a>AUTOCROSSPresenter::AUTOCROSSPresenter(AUTOCROSSView&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, autocrosspresenter.o(i._ZN18AUTOCROSSPresenterC1ER13AUTOCROSSView))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;AUTOCROSSView, AUTOCROSSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4ed]"></a>AUTOCROSSPresenter::AUTOCROSSPresenter__sub_object(AUTOCROSSView&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, autocrosspresenter.o(i._ZN18AUTOCROSSPresenterC1ER13AUTOCROSSView), UNUSED)

<P><STRONG><a name="[14c]"></a>AUTOCROSSPresenter::~AUTOCROSSPresenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, autocrosspresenter.o(i._ZN18AUTOCROSSPresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> autocrosspresenter.o(.constdata__ZTV18AUTOCROSSPresenter)
</UL>
<P><STRONG><a name="[4ee]"></a>AUTOCROSSPresenter::~AUTOCROSSPresenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, autocrosspresenter.o(i._ZN18AUTOCROSSPresenterD1Ev), UNUSED)

<P><STRONG><a name="[150]"></a>DEBUG_MODEViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug_modeviewbase.o(i._ZN18DEBUG_MODEViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
</UL>
<P><STRONG><a name="[378]"></a>DEBUG_MODEViewBase::DEBUG_MODEViewBase()</STRONG> (Thumb, 4188 bytes, Stack size 208 bytes, debug_modeviewbase.o(i._ZN18DEBUG_MODEViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = DEBUG_MODEViewBase::DEBUG_MODEViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::Line()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setLineEndingStyle(touchgfx::Line::LINE_ENDING_STYLE)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::setupBuffer(unsigned char*, unsigned)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype, unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::setColor(touchgfx::colortype, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::setPainter(touchgfx::AbstractPainter&)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::setStart&lang;int&rang;(T1, T1)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::setEnd&lang;int&rang;(T1, T1)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::setLineWidth&lang;int&rang;(T1)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::BoxWithBorder()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::DEBUG_MODEView()
</UL>

<P><STRONG><a name="[4ef]"></a>DEBUG_MODEViewBase::DEBUG_MODEViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 208 bytes, debug_modeviewbase.o(i._ZN18DEBUG_MODEViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[14f]"></a>DEBUG_MODEViewBase::~DEBUG_MODEViewBase()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, debug_modeviewbase.o(i._ZN18DEBUG_MODEViewBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DEBUG_MODEViewBase::~DEBUG_MODEViewBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::~Line()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::~PainterRGB565()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;DEBUG_MODEPresenter&rang;::~View()
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::~DEBUG_MODEView()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
</UL>
<P><STRONG><a name="[4f0]"></a>DEBUG_MODEViewBase::~DEBUG_MODEViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, debug_modeviewbase.o(i._ZN18DEBUG_MODEViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[152]"></a>ENDURANCEPresenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, endurancepresenter.o(i._ZN18ENDURANCEPresenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> endurancepresenter.o(.constdata__ZTV18ENDURANCEPresenter)
</UL>
<P><STRONG><a name="[154]"></a>ENDURANCEPresenter::update()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, endurancepresenter.o(i._ZN18ENDURANCEPresenter6updateEv))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to ENDURANCEPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> endurancepresenter.o(.constdata__ZTV18ENDURANCEPresenter)
</UL>
<P><STRONG><a name="[151]"></a>ENDURANCEPresenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, endurancepresenter.o(i._ZN18ENDURANCEPresenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> endurancepresenter.o(.constdata__ZTV18ENDURANCEPresenter)
</UL>
<P><STRONG><a name="[4aa]"></a>ENDURANCEPresenter::ENDURANCEPresenter(ENDURANCEView&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, endurancepresenter.o(i._ZN18ENDURANCEPresenterC1ER13ENDURANCEView))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ENDURANCEView, ENDURANCEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4f1]"></a>ENDURANCEPresenter::ENDURANCEPresenter__sub_object(ENDURANCEView&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, endurancepresenter.o(i._ZN18ENDURANCEPresenterC1ER13ENDURANCEView), UNUSED)

<P><STRONG><a name="[153]"></a>ENDURANCEPresenter::~ENDURANCEPresenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, endurancepresenter.o(i._ZN18ENDURANCEPresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> endurancepresenter.o(.constdata__ZTV18ENDURANCEPresenter)
</UL>
<P><STRONG><a name="[4f2]"></a>ENDURANCEPresenter::~ENDURANCEPresenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, endurancepresenter.o(i._ZN18ENDURANCEPresenterD1Ev), UNUSED)

<P><STRONG><a name="[157]"></a>NOISE_MODEViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noise_modeviewbase.o(i._ZN18NOISE_MODEViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
</UL>
<P><STRONG><a name="[37a]"></a>NOISE_MODEViewBase::NOISE_MODEViewBase()</STRONG> (Thumb, 2132 bytes, Stack size 160 bytes, noise_modeviewbase.o(i._ZN18NOISE_MODEViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = NOISE_MODEViewBase::NOISE_MODEViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::BoxWithBorder()
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::NOISE_MODEView()
</UL>

<P><STRONG><a name="[4f3]"></a>NOISE_MODEViewBase::NOISE_MODEViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 160 bytes, noise_modeviewbase.o(i._ZN18NOISE_MODEViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[156]"></a>NOISE_MODEViewBase::~NOISE_MODEViewBase()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, noise_modeview.o(i._ZN18NOISE_MODEViewBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::~NOISE_MODEView()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
</UL>
<P><STRONG><a name="[4f4]"></a>NOISE_MODEViewBase::~NOISE_MODEViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, noise_modeview.o(i._ZN18NOISE_MODEViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[159]"></a>BOARD_DEBUGViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_debugviewbase.o(i._ZN19BOARD_DEBUGViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
</UL>
<P><STRONG><a name="[37c]"></a>BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()</STRONG> (Thumb, 5058 bytes, Stack size 240 bytes, board_debugviewbase.o(i._ZN19BOARD_DEBUGViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = BOARD_DEBUGViewBase::BOARD_DEBUGViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::Line()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setLineEndingStyle(touchgfx::Line::LINE_ENDING_STYLE)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::setupBuffer(unsigned char*, unsigned)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype, unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::setColor(touchgfx::colortype, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::setPainter(touchgfx::AbstractPainter&)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::setStart&lang;int&rang;(T1, T1)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::setEnd&lang;int&rang;(T1, T1)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::setLineWidth&lang;int&rang;(T1)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::BoxWithBorder()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::BOARD_DEBUGView()
</UL>

<P><STRONG><a name="[4f5]"></a>BOARD_DEBUGViewBase::BOARD_DEBUGViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 240 bytes, board_debugviewbase.o(i._ZN19BOARD_DEBUGViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[158]"></a>BOARD_DEBUGViewBase::~BOARD_DEBUGViewBase()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, board_debugview.o(i._ZN19BOARD_DEBUGViewBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BOARD_DEBUGViewBase::~BOARD_DEBUGViewBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainter::~AbstractPainter__sub_object()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::~CanvasWidget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::~BOARD_DEBUGView()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
</UL>
<P><STRONG><a name="[4f6]"></a>BOARD_DEBUGViewBase::~BOARD_DEBUGViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, board_debugview.o(i._ZN19BOARD_DEBUGViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[15b]"></a>DEBUG_MODEPresenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug_modepresenter.o(i._ZN19DEBUG_MODEPresenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> debug_modepresenter.o(.constdata__ZTV19DEBUG_MODEPresenter)
</UL>
<P><STRONG><a name="[15d]"></a>DEBUG_MODEPresenter::update()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, debug_modepresenter.o(i._ZN19DEBUG_MODEPresenter6updateEv))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to DEBUG_MODEPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_modepresenter.o(.constdata__ZTV19DEBUG_MODEPresenter)
</UL>
<P><STRONG><a name="[15a]"></a>DEBUG_MODEPresenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug_modepresenter.o(i._ZN19DEBUG_MODEPresenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> debug_modepresenter.o(.constdata__ZTV19DEBUG_MODEPresenter)
</UL>
<P><STRONG><a name="[4ab]"></a>DEBUG_MODEPresenter::DEBUG_MODEPresenter(DEBUG_MODEView&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, debug_modepresenter.o(i._ZN19DEBUG_MODEPresenterC1ER14DEBUG_MODEView))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;DEBUG_MODEView, DEBUG_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4f7]"></a>DEBUG_MODEPresenter::DEBUG_MODEPresenter__sub_object(DEBUG_MODEView&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, debug_modepresenter.o(i._ZN19DEBUG_MODEPresenterC1ER14DEBUG_MODEView), UNUSED)

<P><STRONG><a name="[15c]"></a>DEBUG_MODEPresenter::~DEBUG_MODEPresenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug_modepresenter.o(i._ZN19DEBUG_MODEPresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> debug_modepresenter.o(.constdata__ZTV19DEBUG_MODEPresenter)
</UL>
<P><STRONG><a name="[4f8]"></a>DEBUG_MODEPresenter::~DEBUG_MODEPresenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, debug_modepresenter.o(i._ZN19DEBUG_MODEPresenterD1Ev), UNUSED)

<P><STRONG><a name="[163]"></a>FrontendApplication::handleTickEvent()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplication15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FrontendApplication::handleTickEvent() &rArr; touchgfx::Application::handleTickEvent()
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::handleTickEvent()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::tick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
</UL>
<P><STRONG><a name="[36e]"></a>FrontendApplication::FrontendApplication(Model&, FrontendHeap&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplicationC1ER5ModelR12FrontendHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FrontendApplication::FrontendApplication(Model&, FrontendHeap&) &rArr; FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::Application::Application() &rArr; touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[4f9]"></a>FrontendApplication::FrontendApplication__sub_object(Model&, FrontendHeap&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplicationC1ER5ModelR12FrontendHeap), UNUSED)

<P><STRONG><a name="[169]"></a>NOISE_MODEPresenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noise_modepresenter.o(i._ZN19NOISE_MODEPresenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> noise_modepresenter.o(.constdata__ZTV19NOISE_MODEPresenter)
</UL>
<P><STRONG><a name="[16b]"></a>NOISE_MODEPresenter::update()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, noise_modepresenter.o(i._ZN19NOISE_MODEPresenter6updateEv))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to NOISE_MODEPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noise_modepresenter.o(.constdata__ZTV19NOISE_MODEPresenter)
</UL>
<P><STRONG><a name="[168]"></a>NOISE_MODEPresenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noise_modepresenter.o(i._ZN19NOISE_MODEPresenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> noise_modepresenter.o(.constdata__ZTV19NOISE_MODEPresenter)
</UL>
<P><STRONG><a name="[4ac]"></a>NOISE_MODEPresenter::NOISE_MODEPresenter(NOISE_MODEView&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, noise_modepresenter.o(i._ZN19NOISE_MODEPresenterC1ER14NOISE_MODEView))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;NOISE_MODEView, NOISE_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4fa]"></a>NOISE_MODEPresenter::NOISE_MODEPresenter__sub_object(NOISE_MODEView&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, noise_modepresenter.o(i._ZN19NOISE_MODEPresenterC1ER14NOISE_MODEView), UNUSED)

<P><STRONG><a name="[16a]"></a>NOISE_MODEPresenter::~NOISE_MODEPresenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noise_modepresenter.o(i._ZN19NOISE_MODEPresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> noise_modepresenter.o(.constdata__ZTV19NOISE_MODEPresenter)
</UL>
<P><STRONG><a name="[4fb]"></a>NOISE_MODEPresenter::~NOISE_MODEPresenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, noise_modepresenter.o(i._ZN19NOISE_MODEPresenterD1Ev), UNUSED)

<P><STRONG><a name="[16e]"></a>ACCELERATIONViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, accelerationviewbase.o(i._ZN20ACCELERATIONViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
</UL>
<P><STRONG><a name="[389]"></a>ACCELERATIONViewBase::ACCELERATIONViewBase()</STRONG> (Thumb, 3534 bytes, Stack size 216 bytes, accelerationviewbase.o(i._ZN20ACCELERATIONViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ACCELERATIONViewBase::ACCELERATIONViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::BoxWithBorder()
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::ACCELERATIONView()
</UL>

<P><STRONG><a name="[4fc]"></a>ACCELERATIONViewBase::ACCELERATIONViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 216 bytes, accelerationviewbase.o(i._ZN20ACCELERATIONViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[16d]"></a>ACCELERATIONViewBase::~ACCELERATIONViewBase()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, accelerationview.o(i._ZN20ACCELERATIONViewBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::~ACCELERATIONView()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
</UL>
<P><STRONG><a name="[4fd]"></a>ACCELERATIONViewBase::~ACCELERATIONViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, accelerationview.o(i._ZN20ACCELERATIONViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[170]"></a>BOARD_DEBUGPresenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_debugpresenter.o(i._ZN20BOARD_DEBUGPresenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> board_debugpresenter.o(.constdata__ZTV20BOARD_DEBUGPresenter)
</UL>
<P><STRONG><a name="[172]"></a>BOARD_DEBUGPresenter::update()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board_debugpresenter.o(i._ZN20BOARD_DEBUGPresenter6updateEv))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to BOARD_DEBUGPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_debugpresenter.o(.constdata__ZTV20BOARD_DEBUGPresenter)
</UL>
<P><STRONG><a name="[16f]"></a>BOARD_DEBUGPresenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_debugpresenter.o(i._ZN20BOARD_DEBUGPresenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> board_debugpresenter.o(.constdata__ZTV20BOARD_DEBUGPresenter)
</UL>
<P><STRONG><a name="[4ad]"></a>BOARD_DEBUGPresenter::BOARD_DEBUGPresenter(BOARD_DEBUGView&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board_debugpresenter.o(i._ZN20BOARD_DEBUGPresenterC1ER15BOARD_DEBUGView))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;BOARD_DEBUGView, BOARD_DEBUGPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4fe]"></a>BOARD_DEBUGPresenter::BOARD_DEBUGPresenter__sub_object(BOARD_DEBUGView&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, board_debugpresenter.o(i._ZN20BOARD_DEBUGPresenterC1ER15BOARD_DEBUGView), UNUSED)

<P><STRONG><a name="[171]"></a>BOARD_DEBUGPresenter::~BOARD_DEBUGPresenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_debugpresenter.o(i._ZN20BOARD_DEBUGPresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> board_debugpresenter.o(.constdata__ZTV20BOARD_DEBUGPresenter)
</UL>
<P><STRONG><a name="[4ff]"></a>BOARD_DEBUGPresenter::~BOARD_DEBUGPresenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, board_debugpresenter.o(i._ZN20BOARD_DEBUGPresenterD1Ev), UNUSED)

<P><STRONG><a name="[175]"></a>ACCELERATIONPresenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, accelerationpresenter.o(i._ZN21ACCELERATIONPresenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> accelerationpresenter.o(.constdata__ZTV21ACCELERATIONPresenter)
</UL>
<P><STRONG><a name="[177]"></a>ACCELERATIONPresenter::update()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, accelerationpresenter.o(i._ZN21ACCELERATIONPresenter6updateEv))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to ACCELERATIONPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationpresenter.o(.constdata__ZTV21ACCELERATIONPresenter)
</UL>
<P><STRONG><a name="[174]"></a>ACCELERATIONPresenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, accelerationpresenter.o(i._ZN21ACCELERATIONPresenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> accelerationpresenter.o(.constdata__ZTV21ACCELERATIONPresenter)
</UL>
<P><STRONG><a name="[4ae]"></a>ACCELERATIONPresenter::ACCELERATIONPresenter(ACCELERATIONView&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, accelerationpresenter.o(i._ZN21ACCELERATIONPresenterC1ER16ACCELERATIONView))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ACCELERATIONView, ACCELERATIONPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[500]"></a>ACCELERATIONPresenter::ACCELERATIONPresenter__sub_object(ACCELERATIONView&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, accelerationpresenter.o(i._ZN21ACCELERATIONPresenterC1ER16ACCELERATIONView), UNUSED)

<P><STRONG><a name="[176]"></a>ACCELERATIONPresenter::~ACCELERATIONPresenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, accelerationpresenter.o(i._ZN21ACCELERATIONPresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> accelerationpresenter.o(.constdata__ZTV21ACCELERATIONPresenter)
</UL>
<P><STRONG><a name="[501]"></a>ACCELERATIONPresenter::~ACCELERATIONPresenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, accelerationpresenter.o(i._ZN21ACCELERATIONPresenterD1Ev), UNUSED)

<P><STRONG><a name="[84]"></a>ApplicationFontProvider::~ApplicationFontProvider()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN23ApplicationFontProviderD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
<LI> applicationfontprovider.o(.constdata__ZTV23ApplicationFontProvider)
</UL>
<P><STRONG><a name="[502]"></a>ApplicationFontProvider::~ApplicationFontProvider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN23ApplicationFontProviderD1Ev), UNUSED)

<P><STRONG><a name="[368]"></a>FrontendApplicationBase::gotoSKIDPADScreenNoTransition()</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase29gotoSKIDPADScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FrontendApplicationBase::gotoSKIDPADScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::checkChangeScreen()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkChangeScreen()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::checkChangeScreen()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::checkChangeScreen()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkChangeScreen()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkChangeScreen()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::checkChangeScreen()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::checkChangeScreen()
</UL>

<P><STRONG><a name="[370]"></a>FrontendApplicationBase::gotoScreen1ScreenNoTransition()</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FrontendApplicationBase::gotoScreen1ScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[35f]"></a>FrontendApplicationBase::gotoSETTINGSScreenNoTransition()</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase30gotoSETTINGSScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FrontendApplicationBase::gotoSETTINGSScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::checkChangeScreen()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkChangeScreen()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::checkChangeScreen()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::checkChangeScreen()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkChangeScreen()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkChangeScreen()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkChangeScreen()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::checkChangeScreen()
</UL>

<P><STRONG><a name="[364]"></a>FrontendApplicationBase::gotoAUTOCROSSScreenNoTransition()</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase31gotoAUTOCROSSScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FrontendApplicationBase::gotoAUTOCROSSScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::checkChangeScreen()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkChangeScreen()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::checkChangeScreen()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::checkChangeScreen()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkChangeScreen()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkChangeScreen()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::checkChangeScreen()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::checkChangeScreen()
</UL>

<P><STRONG><a name="[362]"></a>FrontendApplicationBase::gotoENDURANCEScreenNoTransition()</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase31gotoENDURANCEScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FrontendApplicationBase::gotoENDURANCEScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::checkChangeScreen()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::checkChangeScreen()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::checkChangeScreen()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkChangeScreen()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkChangeScreen()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkChangeScreen()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::checkChangeScreen()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::checkChangeScreen()
</UL>

<P><STRONG><a name="[361]"></a>FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransition()</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase32gotoDEBUG_MODEScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::checkChangeScreen()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkChangeScreen()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::checkChangeScreen()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkChangeScreen()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkChangeScreen()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkChangeScreen()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::checkChangeScreen()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::checkChangeScreen()
</UL>

<P><STRONG><a name="[365]"></a>FrontendApplicationBase::gotoNOISE_MODEScreenNoTransition()</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase32gotoNOISE_MODEScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FrontendApplicationBase::gotoNOISE_MODEScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkChangeScreen()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::checkChangeScreen()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::checkChangeScreen()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkChangeScreen()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkChangeScreen()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkChangeScreen()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::checkChangeScreen()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::checkChangeScreen()
</UL>

<P><STRONG><a name="[360]"></a>FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransition()</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase33gotoBOARD_DEBUGScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::checkChangeScreen()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkChangeScreen()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::checkChangeScreen()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkChangeScreen()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkChangeScreen()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkChangeScreen()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::checkChangeScreen()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::checkChangeScreen()
</UL>

<P><STRONG><a name="[ad]"></a>FrontendApplicationBase::gotoSKIDPADScreenNoTransitionImpl()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase33gotoSKIDPADScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = FrontendApplicationBase::gotoSKIDPADScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;SKIDPADView, SKIDPADPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; SKIDPADView::SKIDPADView() &rArr; SKIDPADViewBase::SKIDPADViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SKIDPADView, SKIDPADPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen1View::Screen1View() &rArr; Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Screen::Screen() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[363]"></a>FrontendApplicationBase::gotoACCELERATIONScreenNoTransition()</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase34gotoACCELERATIONScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FrontendApplicationBase::gotoACCELERATIONScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::checkChangeScreen()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkChangeScreen()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::checkChangeScreen()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::checkChangeScreen()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkChangeScreen()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkChangeScreen()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::checkChangeScreen()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::checkChangeScreen()
</UL>

<P><STRONG><a name="[ae]"></a>FrontendApplicationBase::gotoSETTINGSScreenNoTransitionImpl()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase34gotoSETTINGSScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = FrontendApplicationBase::gotoSETTINGSScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;SETTINGSView, SETTINGSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; SETTINGSView::SETTINGSView() &rArr; SETTINGSViewBase::SETTINGSViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SETTINGSView, SETTINGSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>FrontendApplicationBase::gotoAUTOCROSSScreenNoTransitionImpl()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase35gotoAUTOCROSSScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = FrontendApplicationBase::gotoAUTOCROSSScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;AUTOCROSSView, AUTOCROSSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; AUTOCROSSView::AUTOCROSSView() &rArr; AUTOCROSSViewBase::AUTOCROSSViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;AUTOCROSSView, AUTOCROSSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>FrontendApplicationBase::gotoENDURANCEScreenNoTransitionImpl()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase35gotoENDURANCEScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = FrontendApplicationBase::gotoENDURANCEScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;ENDURANCEView, ENDURANCEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; ENDURANCEView::ENDURANCEView() &rArr; ENDURANCEViewBase::ENDURANCEViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ENDURANCEView, ENDURANCEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransitionImpl()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase36gotoDEBUG_MODEScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;DEBUG_MODEView, DEBUG_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; DEBUG_MODEView::DEBUG_MODEView() &rArr; DEBUG_MODEViewBase::DEBUG_MODEViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;DEBUG_MODEView, DEBUG_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>FrontendApplicationBase::gotoNOISE_MODEScreenNoTransitionImpl()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase36gotoNOISE_MODEScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = FrontendApplicationBase::gotoNOISE_MODEScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;NOISE_MODEView, NOISE_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; NOISE_MODEView::NOISE_MODEView() &rArr; NOISE_MODEViewBase::NOISE_MODEViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;NOISE_MODEView, NOISE_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransitionImpl()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase37gotoBOARD_DEBUGScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;BOARD_DEBUGView, BOARD_DEBUGPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; BOARD_DEBUGView::BOARD_DEBUGView() &rArr; BOARD_DEBUGViewBase::BOARD_DEBUGViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;BOARD_DEBUGView, BOARD_DEBUGPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>FrontendApplicationBase::gotoACCELERATIONScreenNoTransitionImpl()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase38gotoACCELERATIONScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = FrontendApplicationBase::gotoACCELERATIONScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;ACCELERATIONView, ACCELERATIONPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; ACCELERATIONView::ACCELERATIONView() &rArr; ACCELERATIONViewBase::ACCELERATIONViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ACCELERATIONView, ACCELERATIONPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[395]"></a>FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::Application::Application() &rArr; touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::FrontendApplication(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[503]"></a>FrontendApplicationBase::FrontendApplicationBase__sub_object(Model&, FrontendHeap&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap), UNUSED)

<P><STRONG><a name="[17a]"></a>FrontendApplicationBase::~FrontendApplicationBase()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
</UL>
<P><STRONG><a name="[504]"></a>FrontendApplicationBase::~FrontendApplicationBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev), UNUSED)

<P><STRONG><a name="[394]"></a>Model::tick()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, model.o(i._ZN5Model4tickEv))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::handleTickEvent()
</UL>

<P><STRONG><a name="[36f]"></a>Model::Model()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, model.o(i._ZN5ModelC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[505]"></a>Model::Model__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, model.o(i._ZN5ModelC1Ev), UNUSED)

<P><STRONG><a name="[420]"></a>touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, screen.o(i._ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[506]"></a>touchgfx::ClickEvent::ClickEvent__sub_object(touchgfx::ClickEvent::ClickEventType, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, screen.o(i._ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss), UNUSED)

<P><STRONG><a name="[3a3]"></a>touchgfx::OSWrappers::initialize()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::OSWrappers::initialize() &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::initialize()
</UL>

<P><STRONG><a name="[2a2]"></a>touchgfx::OSWrappers::signalVSync()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers11signalVSyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::OSWrappers::signalVSync() &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[3a6]"></a>touchgfx::OSWrappers::waitForVSync()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers12waitForVSyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::OSWrappers::waitForVSync() &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::taskEntry()
</UL>

<P><STRONG><a name="[3a7]"></a>touchgfx::OSWrappers::giveFrameBufferSemaphore()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::waitForFrameBufferSemaphore()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::unlockFrameBuffer()
</UL>

<P><STRONG><a name="[3a8]"></a>touchgfx::OSWrappers::takeFrameBufferSemaphore()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::waitForFrameBufferSemaphore()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
</UL>

<P><STRONG><a name="[3a9]"></a>touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::OSWrappers::tryTakeFrameBufferSemaphore() &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[3aa]"></a>touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::executeCompleted()
</UL>

<P><STRONG><a name="[3ab]"></a>touchgfx::Rasterizer::lineTo(int, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, canvas.o(i._ZN8touchgfx10Rasterizer6lineToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = touchgfx::Rasterizer::lineTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
</UL>

<P><STRONG><a name="[3ad]"></a>touchgfx::Rasterizer::moveTo(int, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, canvas.o(i._ZN8touchgfx10Rasterizer6moveToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::Rasterizer::moveTo(int, int) &rArr; touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[197]"></a>touchgfx::Transition::setScreenContainer(touchgfx::Container&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[196]"></a>touchgfx::Transition::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[195]"></a>touchgfx::Transition::tearDown()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[35e]"></a>touchgfx::Application::getInstance()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application11getInstanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::checkChangeScreen()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkChangeScreen()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::checkChangeScreen()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::checkChangeScreen()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkChangeScreen()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkChangeScreen()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkChangeScreen()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::checkChangeScreen()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::checkChangeScreen()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[162]"></a>touchgfx::Application::handleKeyEvent(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application14handleKeyEventEh))
<BR>[Address Reference Count : 4]<UL><LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[3af]"></a>touchgfx::Application::invalidateArea(touchgfx::Rect)</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, application.o(i._ZN8touchgfx11Application14invalidateAreaENS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw(touchgfx::Rect&)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
</UL>

<P><STRONG><a name="[160]"></a>touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE))
<BR>[Address Reference Count : 4]<UL><LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[179]"></a>touchgfx::Application::handleTickEvent()</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx11Application15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Application::handleTickEvent()
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::handleTickEvent()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[15f]"></a>touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE))
<BR>[Address Reference Count : 4]<UL><LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[161]"></a>touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE))
<BR>[Address Reference Count : 4]<UL><LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[167]"></a>touchgfx::Application::cacheDrawOperations(bool)</STRONG> (Thumb, 500 bytes, Stack size 136 bytes, application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = touchgfx::Application::cacheDrawOperations(bool) &rArr; touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
</UL>
<BR>[Address Reference Count : 4]<UL><LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[3bc]"></a>touchgfx::Application::clearAllTimerWidgets()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application20clearAllTimerWidgetsEv))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[17b]"></a>touchgfx::Application::handlePendingScreenTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application29handlePendingScreenTransitionEv))
<BR>[Address Reference Count : 1]<UL><LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[166]"></a>touchgfx::Application::draw(touchgfx::Rect&)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, application.o(i._ZN8touchgfx11Application4drawERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::Application::draw(touchgfx::Rect&) &rArr; touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[165]"></a>touchgfx::Application::draw()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx11Application4drawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Application::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[3a1]"></a>touchgfx::Application::Application()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11ApplicationC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Application::Application() &rArr; touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::clearAllTimerWidgets()
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[507]"></a>touchgfx::Application::Application__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11ApplicationC1Ev), UNUSED)

<P><STRONG><a name="[4b2]"></a>touchgfx::FontManager::setFontProvider(touchgfx::FontProvider*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fontmanager.o(i._ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[3f8]"></a>touchgfx::floorDivMod(int, int, int&, int&)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, texturemaptypes.o(i._ZN8touchgfx11floorDivModEiiRiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::floorDivMod(int, int, int&, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)
</UL>

<P><STRONG><a name="[18e]"></a>touchgfx::CanvasWidget::setPainter(touchgfx::AbstractPainter&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, canvaswidget.o(i._ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[3bd]"></a>touchgfx::CanvasWidget::CanvasWidget__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, canvaswidget.o(i._ZN8touchgfx12CanvasWidgetC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::CanvasWidget::CanvasWidget__sub_object() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::Line()
</UL>

<P><STRONG><a name="[508]"></a>touchgfx::CanvasWidget::~CanvasWidget()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, canvaswidget.o(i._ZN8touchgfx12CanvasWidgetD2Ev), UNUSED)

<P><STRONG><a name="[17c]"></a>touchgfx::CanvasWidget::~CanvasWidget__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canvaswidget.o(i._ZN8touchgfx12CanvasWidgetD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::~Line()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::~BOARD_DEBUGViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[440]"></a>touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureType, short, short, short)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, gestures.o(i._ZN8touchgfx12GestureEventC1ENS0_11GestureTypeEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[509]"></a>touchgfx::GestureEvent::GestureEvent__sub_object(touchgfx::GestureEvent::GestureType, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, gestures.o(i._ZN8touchgfx12GestureEventC1ENS0_11GestureTypeEsss), UNUSED)

<P><STRONG><a name="[194]"></a>touchgfx::NoTransition::handleTickEvent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransition15handleTickEventEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[4a5]"></a>touchgfx::NoTransition::NoTransition()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ACCELERATIONView, ACCELERATIONPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;BOARD_DEBUGView, BOARD_DEBUGPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;NOISE_MODEView, NOISE_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;DEBUG_MODEView, DEBUG_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ENDURANCEView, ENDURANCEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;AUTOCROSSView, AUTOCROSSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SETTINGSView, SETTINGSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SKIDPADView, SKIDPADPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[50a]"></a>touchgfx::NoTransition::NoTransition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionC1Ev), UNUSED)

<P><STRONG><a name="[193]"></a>touchgfx::NoTransition::~NoTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[50b]"></a>touchgfx::NoTransition::~NoTransition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev), UNUSED)

<P><STRONG><a name="[3be]"></a>touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, textprovider.o(i._ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list) &rArr; touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initializeInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[3c0]"></a>touchgfx::TextProvider::getNextChar()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProvider11getNextCharEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
</UL>

<P><STRONG><a name="[3c2]"></a>touchgfx::TextProvider::getNextLigature(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, textprovider.o(i._ZN8touchgfx12TextProvider15getNextLigatureEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
</UL>

<P><STRONG><a name="[3bf]"></a>touchgfx::TextProvider::initializeInternal()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, textprovider.o(i._ZN8touchgfx12TextProvider18initializeInternalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[3c1]"></a>touchgfx::TextProvider::getNextCharInternal()</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProvider19getNextCharInternalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initializeInternal()
</UL>

<P><STRONG><a name="[3c3]"></a>touchgfx::TextProvider::TextProvider()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, textprovider.o(i._ZN8touchgfx12TextProviderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextProvider::TextProvider() &rArr; touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initializeInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[50c]"></a>touchgfx::TextProvider::TextProvider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, textprovider.o(i._ZN8touchgfx12TextProviderC1Ev), UNUSED)

<P><STRONG><a name="[451]"></a>touchgfx::fixed28_4Mul(int, int)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, texturemaptypes.o(i._ZN8touchgfx12fixed28_4MulEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::fixed28_4Mul(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gradients::Gradients(const touchgfx::Point3D*)
</UL>

<P><STRONG><a name="[37f]"></a>touchgfx::BoxWithBorder::BoxWithBorder()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZN8touchgfx13BoxWithBorderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::BoxWithBorder::BoxWithBorder() &rArr; touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::NOISE_MODEViewBase()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::ENDURANCEViewBase()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::AUTOCROSSViewBase()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::ACCELERATIONViewBase()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::SKIDPADViewBase()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
</UL>

<P><STRONG><a name="[50d]"></a>touchgfx::BoxWithBorder::BoxWithBorder__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZN8touchgfx13BoxWithBorderC1Ev), UNUSED)

<P><STRONG><a name="[b4]"></a>touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&) &rArr; touchgfx::OSWrappers::tryTakeFrameBufferSemaphore() &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[be]"></a>touchgfx::DMA_Interface::enableAlpha(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[bf]"></a>touchgfx::DMA_Interface::disableAlpha()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[bb]"></a>touchgfx::DMA_Interface::seedExecution()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[3e0]"></a>touchgfx::DMA_Interface::isDmaQueueEmpty()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
</UL>

<P><STRONG><a name="[ba]"></a>touchgfx::DMA_Interface::executeCompleted()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::DMA_Interface::executeCompleted() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[c0]"></a>touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::DMA_Interface::waitForFrameBufferSemaphore() &rArr; touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[b5]"></a>touchgfx::DMA_Interface::flush()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7dma.o(i._ZN8touchgfx13DMA_Interface5flushEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[353]"></a>touchgfx::DMA_Interface::start()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DMA_Interface::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::start()
</UL>

<P><STRONG><a name="[b9]"></a>touchgfx::DMA_Interface::execute()</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, dma.o(i._ZN8touchgfx13DMA_Interface7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::DMA_Interface::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[19e]"></a>touchgfx::PainterRGB565::renderNext(unsigned char&, unsigned char&, unsigned char&, unsigned char&)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, painterrgb565.o(i._ZN8touchgfx13PainterRGB56510renderNextERhS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::PainterRGB565::renderNext(unsigned char&, unsigned char&, unsigned char&, unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
</UL>
<P><STRONG><a name="[19c]"></a>touchgfx::PainterRGB565::render(unsigned char*, int, int, int, unsigned, const unsigned char*)</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, painterrgb565.o(i._ZN8touchgfx13PainterRGB5656renderEPhiiijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::PainterRGB565::render(unsigned char*, int, int, int, unsigned, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
</UL>
<P><STRONG><a name="[38e]"></a>touchgfx::PainterRGB565::setColor(touchgfx::colortype, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, painterrgb565.o(i._ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[38c]"></a>touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype, unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, painterrgb565.o(i._ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::setColor(touchgfx::colortype, unsigned char)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainter::AbstractPainter__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
</UL>

<P><STRONG><a name="[50e]"></a>touchgfx::PainterRGB565::PainterRGB565__sub_object(touchgfx::colortype, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, painterrgb565.o(i._ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh), UNUSED)

<P><STRONG><a name="[19b]"></a>touchgfx::PainterRGB565::~PainterRGB565()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, debug_modeview.o(i._ZN8touchgfx13PainterRGB565D1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainter::~AbstractPainter__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::~DEBUG_MODEViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
</UL>
<P><STRONG><a name="[50f]"></a>touchgfx::PainterRGB565::~PainterRGB565__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, debug_modeview.o(i._ZN8touchgfx13PainterRGB565D1Ev), UNUSED)

<P><STRONG><a name="[1a4]"></a>touchgfx::ScalableImage::setScalingAlgorithm(touchgfx::ScalableImage::ScalingAlgorithm)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scalableimage.o(i._ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
</UL>
<P><STRONG><a name="[1a3]"></a>touchgfx::ScalableImage::setBitmap(const touchgfx::Bitmap&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, scalableimage.o(i._ZN8touchgfx13ScalableImage9setBitmapERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ScalableImage::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
</UL>
<P><STRONG><a name="[386]"></a>touchgfx::ScalableImage::ScalableImage()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, scalableimage.o(i._ZN8touchgfx13ScalableImageC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ScalableImage::ScalableImage() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[510]"></a>touchgfx::ScalableImage::ScalableImage__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, scalableimage.o(i._ZN8touchgfx13ScalableImageC1Ev), UNUSED)

<P><STRONG><a name="[1a0]"></a>touchgfx::ScalableImage::~ScalableImage()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scalableimage.o(i._ZN8touchgfx13ScalableImageD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
</UL>
<P><STRONG><a name="[511]"></a>touchgfx::ScalableImage::~ScalableImage__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, scalableimage.o(i._ZN8touchgfx13ScalableImageD1Ev), UNUSED)

<P><STRONG><a name="[343]"></a>touchgfx::touchgfx_init()</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, boardconfiguration.o(i._ZN8touchgfx13touchgfx_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = touchgfx::touchgfx_init() &rArr; touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned) &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_Init()
</UL>

<P><STRONG><a name="[164]"></a>touchgfx::MVPApplication::handlePendingScreenTransition()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, boardconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::MVPApplication::handlePendingScreenTransition()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
</UL>
<P><STRONG><a name="[413]"></a>touchgfx::AbstractPainter::setWidgetAlpha(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abstractpainter.o(i._ZN8touchgfx15AbstractPainter14setWidgetAlphaEh))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render()
</UL>

<P><STRONG><a name="[412]"></a>touchgfx::AbstractPainter::setOffset(unsigned short, unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, abstractpainter.o(i._ZN8touchgfx15AbstractPainter9setOffsetEtt))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render()
</UL>

<P><STRONG><a name="[3c4]"></a>touchgfx::AbstractPainter::AbstractPainter__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abstractpainter.o(i._ZN8touchgfx15AbstractPainterC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[512]"></a>touchgfx::AbstractPainter::~AbstractPainter()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, abstractpainter.o(i._ZN8touchgfx15AbstractPainterD2Ev), UNUSED)

<P><STRONG><a name="[1a5]"></a>touchgfx::AbstractPainter::~AbstractPainter__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abstractpainter.o(i._ZN8touchgfx15AbstractPainterD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::~PainterRGB565()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::~BOARD_DEBUGViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abstractpainter.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
</UL>
<P><STRONG><a name="[41c]"></a>touchgfx::RenderingBuffer::attach(unsigned char*, unsigned char, unsigned, unsigned, int)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, renderingbuffer.o(i._ZN8touchgfx15RenderingBuffer6attachEPhhjji))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::RenderingBuffer::attach(unsigned char*, unsigned char, unsigned, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[416]"></a>touchgfx::RenderingBuffer::RenderingBuffer()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, renderingbuffer.o(i._ZN8touchgfx15RenderingBufferC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[513]"></a>touchgfx::RenderingBuffer::RenderingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, renderingbuffer.o(i._ZN8touchgfx15RenderingBufferC1Ev), UNUSED)

<P><STRONG><a name="[41d]"></a>touchgfx::RenderingBuffer::~RenderingBuffer()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, renderingbuffer.o(i._ZN8touchgfx15RenderingBufferD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::~Canvas()
</UL>

<P><STRONG><a name="[514]"></a>touchgfx::RenderingBuffer::~RenderingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, renderingbuffer.o(i._ZN8touchgfx15RenderingBufferD1Ev), UNUSED)

<P><STRONG><a name="[3c8]"></a>touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::TouchCalibration::translatePoint(touchgfx::Point&) &rArr; touchgfx::TouchCalibration::muldiv(int, int, int, int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[3c9]"></a>touchgfx::TouchCalibration::muldiv(int, int, int, int, int, int, int&)</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration6muldivEiiiiiiRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::TouchCalibration::muldiv(int, int, int, int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)
</UL>

<P><STRONG><a name="[3f9]"></a>touchgfx::fixed28_4ToFloat(int)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, texturemaptypes.o(i._ZN8touchgfx16fixed28_4ToFloatEi))
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gradients::Gradients(const touchgfx::Point3D*)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)
</UL>

<P><STRONG><a name="[454]"></a>touchgfx::floatToFixed28_4(float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scalableimage.o(i._ZN8touchgfx16floatToFixed28_4Ef))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[36d]"></a>touchgfx::AbstractPartition::AbstractPartition__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[515]"></a>touchgfx::AbstractPartition::~AbstractPartition()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev), UNUSED)

<P><STRONG><a name="[1a6]"></a>touchgfx::AbstractPartition::~AbstractPartition__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
</UL>
<P><STRONG><a name="[349]"></a>touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, internalflashfont.o(i._ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_420_4bpp()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_180_4bpp()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_80_4bpp()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_63_4bpp()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_45_4bpp()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_35_4bpp()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_25_4bpp()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Black_100_4bpp()
</UL>

<P><STRONG><a name="[516]"></a>touchgfx::InternalFlashFont::InternalFlashFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, internalflashfont.o(i._ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt), UNUSED)

<P><STRONG><a name="[7f]"></a>touchgfx::InternalFlashFont::~InternalFlashFont()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev))
<BR>[Address Reference Count : 9]<UL><LI> fontgetters.o(i._Z29getFont_Roboto_Black_100_4bppv)
<LI> fontgetters.o(i._Z30getFont_Roboto_Regular_25_4bppv)
<LI> fontgetters.o(i._Z30getFont_Roboto_Regular_35_4bppv)
<LI> fontgetters.o(i._Z30getFont_Roboto_Regular_45_4bppv)
<LI> fontgetters.o(i._Z30getFont_Roboto_Regular_63_4bppv)
<LI> fontgetters.o(i._Z30getFont_Roboto_Regular_80_4bppv)
<LI> fontgetters.o(i._Z31getFont_Roboto_Regular_180_4bppv)
<LI> fontgetters.o(i._Z31getFont_Roboto_Regular_420_4bppv)
<LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
</UL>
<P><STRONG><a name="[517]"></a>touchgfx::InternalFlashFont::~InternalFlashFont__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev), UNUSED)

<P><STRONG><a name="[1b3]"></a>touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[1b4]"></a>touchgfx::LockFreeDMA_Queue::pop()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue3popEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LockFreeDMA_Queue::pop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[1b5]"></a>touchgfx::LockFreeDMA_Queue::first()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue5firstEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[1b2]"></a>touchgfx::LockFreeDMA_Queue::isFull()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue6isFullEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[1b1]"></a>touchgfx::LockFreeDMA_Queue::isEmpty()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[355]"></a>touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue(touchgfx::BlitOp*, unsigned long)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEm))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::STM32F7DMA()
</UL>

<P><STRONG><a name="[518]"></a>touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue__sub_object(touchgfx::BlitOp*, unsigned long)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEm), UNUSED)

<P><STRONG><a name="[446]"></a>touchgfx::floatToFixed16_16(float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx17floatToFixed16_16Ef))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[1ba]"></a>touchgfx::MCUInstrumentation::getCCConsumed()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7instrumentation.o(i._ZN8touchgfx18MCUInstrumentation13getCCConsumedEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
</UL>
<P><STRONG><a name="[1bb]"></a>touchgfx::MCUInstrumentation::setCCConsumed(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7instrumentation.o(i._ZN8touchgfx18MCUInstrumentation13setCCConsumedEj))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
</UL>
<P><STRONG><a name="[38d]"></a>touchgfx::CanvasWidgetRenderer::setupBuffer(unsigned char*, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
</UL>

<P><STRONG><a name="[42e]"></a>touchgfx::CanvasWidgetRenderer::getOutlineBuffer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>

<P><STRONG><a name="[44f]"></a>touchgfx::CanvasWidgetRenderer::getScanlineWidth()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::addSpan(int, int, unsigned, unsigned)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
</UL>

<P><STRONG><a name="[41a]"></a>touchgfx::CanvasWidgetRenderer::setScanlineWidth(unsigned)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::CanvasWidgetRenderer::setScanlineWidth(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[44d]"></a>touchgfx::CanvasWidgetRenderer::getScanlineCounts()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::reset()
</UL>

<P><STRONG><a name="[44b]"></a>touchgfx::CanvasWidgetRenderer::getScanlineCovers()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::reset()
</UL>

<P><STRONG><a name="[42f]"></a>touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>

<P><STRONG><a name="[44c]"></a>touchgfx::CanvasWidgetRenderer::getScanlineStartIndices()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::reset()
</UL>

<P><STRONG><a name="[419]"></a>touchgfx::CanvasWidgetRenderer::hasBuffer()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[19d]"></a>touchgfx::AbstractPainterRGB565::renderInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, painterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB56510renderInitEv))
<BR>[Address Reference Count : 2]<UL><LI> abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
<LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
</UL>
<P><STRONG><a name="[19f]"></a>touchgfx::AbstractPainterRGB565::renderPixel(unsigned short*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, abstractpainterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::AbstractPainterRGB565::renderPixel(unsigned short*, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
<LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
</UL>
<P><STRONG><a name="[1b6]"></a>touchgfx::AbstractPainterRGB565::render(unsigned char*, int, int, int, unsigned, const unsigned char*)</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, abstractpainterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::AbstractPainterRGB565::render(unsigned char*, int, int, int, unsigned, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
</UL>
<P><STRONG><a name="[3ce]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[3cf]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[453]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(float&, float&, const touchgfx::Rect&)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[3d1]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&)</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[3d0]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[3e4]"></a>touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[1b8]"></a>touchgfx::STM32F7Instrumentation::getCPUCycles()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7instrumentation.o(i._ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
</UL>
<P><STRONG><a name="[1b9]"></a>touchgfx::STM32F7Instrumentation::setMCUActive(bool)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7instrumentation.o(i._ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::STM32F7Instrumentation::setMCUActive(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
</UL>
<P><STRONG><a name="[1b7]"></a>touchgfx::STM32F7Instrumentation::init()</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f7instrumentation.o(i._ZN8touchgfx22STM32F7Instrumentation4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::STM32F7Instrumentation::init() &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::touchgfx_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
</UL>
<P><STRONG><a name="[87]"></a>touchgfx::STM32F7Instrumentation::~STM32F7Instrumentation()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx22STM32F7InstrumentationD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
<LI> stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
</UL>
<P><STRONG><a name="[519]"></a>touchgfx::STM32F7Instrumentation::~STM32F7Instrumentation__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx22STM32F7InstrumentationD1Ev), UNUSED)

<P><STRONG><a name="[1bd]"></a>touchgfx::STM32F7TouchController::sampleTouch(int&, int&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7touchcontroller.o(i._ZN8touchgfx22STM32F7TouchController11sampleTouchERiS1_))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7touchcontroller.o(.constdata__ZTVN8touchgfx22STM32F7TouchControllerE)
</UL>
<P><STRONG><a name="[1bc]"></a>touchgfx::STM32F7TouchController::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7touchcontroller.o(i._ZN8touchgfx22STM32F7TouchController4initEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7touchcontroller.o(.constdata__ZTVN8touchgfx22STM32F7TouchControllerE)
</UL>
<P><STRONG><a name="[86]"></a>touchgfx::STM32F7TouchController::~STM32F7TouchController()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx22STM32F7TouchControllerD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
<LI> stm32f7touchcontroller.o(.constdata__ZTVN8touchgfx22STM32F7TouchControllerE)
</UL>
<P><STRONG><a name="[51a]"></a>touchgfx::STM32F7TouchController::~STM32F7TouchController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx22STM32F7TouchControllerD1Ev), UNUSED)

<P><STRONG><a name="[1c0]"></a>touchgfx::TextAreaWithOneWildcard::getTextHeight()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, accelerationviewbase.o(i._ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::getTextHeight() &rArr; touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const &rArr; touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[380]"></a>touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZN8touchgfx23TextAreaWithOneWildcardC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard() &rArr; touchgfx::TextArea::TextArea() &rArr; touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::NOISE_MODEViewBase()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::ENDURANCEViewBase()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::AUTOCROSSViewBase()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::ACCELERATIONViewBase()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::SKIDPADViewBase()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
</UL>

<P><STRONG><a name="[51b]"></a>touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZN8touchgfx23TextAreaWithOneWildcardC1Ev), UNUSED)

<P><STRONG><a name="[3d7]"></a>touchgfx::LCD16bilinearInterpolate1D(float, float, float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx26LCD16bilinearInterpolate1DEfff))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float, unsigned char)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[3d6]"></a>touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lcd16bpp.o(i._ZN8touchgfx26LCD16bilinearInterpolate2DEffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bilinearInterpolate1D(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[3d8]"></a>touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float, unsigned char)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lcd16bpp.o(i._ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bilinearInterpolate1D(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[3d9]"></a>touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, utils.o(i._ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::hasTransparentPixels() const
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::lookupRenderVariant() const
</UL>

<P><STRONG><a name="[3dc]"></a>touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, utils.o(i._ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::hasTransparentPixels() const
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::lookupRenderVariant() const
</UL>

<P><STRONG><a name="[37e]"></a>touchgfx::Box::Box()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZN8touchgfx3BoxC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::Box::Box() &rArr; touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::NOISE_MODEViewBase()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::ENDURANCEViewBase()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::AUTOCROSSViewBase()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::ACCELERATIONViewBase()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::SKIDPADViewBase()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
</UL>

<P><STRONG><a name="[51c]"></a>touchgfx::Box::Box__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZN8touchgfx3BoxC1Ev), UNUSED)

<P><STRONG><a name="[da]"></a>touchgfx::HAL::beginFrame()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL10beginFrameEv))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[3dd]"></a>touchgfx::HAL::initialize()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[cb]"></a>touchgfx::HAL::getBlitCaps()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7hal.o(i._ZN8touchgfx3HAL11getBlitCapsEv))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[341]"></a>touchgfx::HAL::setMCUActive(bool)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL12setMCUActiveEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::setMCUActive(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTaskHook(void*)
</UL>

<P><STRONG><a name="[ce]"></a>touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations)</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, hal.o(i._ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations) &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[d1]"></a>touchgfx::HAL::backPorchExited()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7hal.o(i._ZN8touchgfx3HAL15backPorchExitedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::HAL::backPorchExited() &rArr; touchgfx::HAL::swapFrameBuffers() &rArr; touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c9]"></a>touchgfx::HAL::cacheTextString(const unsigned short*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL15cacheTextStringEPKt))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c6]"></a>touchgfx::HAL::lockFrameBuffer()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::HAL::lockFrameBuffer() &rArr; touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::isDmaQueueEmpty()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[cd]"></a>touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char) &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[1c4]"></a>touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7HAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[2a3]"></a>touchgfx::HAL::swapFrameBuffers()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL16swapFrameBuffersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::HAL::swapFrameBuffers() &rArr; touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::backPorchExited()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[c4]"></a>touchgfx::HAL::allowDMATransfers()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[1c5]"></a>touchgfx::HAL::getTFTCurrentLine()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv))
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c7]"></a>touchgfx::HAL::unlockFrameBuffer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::HAL::unlockFrameBuffer() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[3de]"></a>touchgfx::HAL::getClientFrameBuffer()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL20getClientFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations)
</UL>

<P><STRONG><a name="[d0]"></a>touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE))
<BR><BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerEventListener(touchgfx::UIEventListener&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c1]"></a>touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7hal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[d6]"></a>touchgfx::HAL::setFrameBufferStartAddress(void*, unsigned short, bool, bool)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hal.o(i._ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::HAL::setFrameBufferStartAddress(void*, unsigned short, bool, bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[df]"></a>touchgfx::HAL::performDisplayOrientationChange()</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, hal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::HAL::performDisplayOrientationChange()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[45d]"></a>touchgfx::HAL::lcd()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bitmap.o(i._ZN8touchgfx3HAL3lcdEv))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
</UL>

<P><STRONG><a name="[d9]"></a>touchgfx::HAL::tick()</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, hal.o(i._ZN8touchgfx3HAL4tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::HAL::tick()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::tick()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[dd]"></a>touchgfx::HAL::touch(int, int)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hal.o(i._ZN8touchgfx3HAL5touchEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = touchgfx::HAL::touch(int, int) &rArr; touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short) &rArr; touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureType, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[de]"></a>touchgfx::HAL::noTouch()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL7noTouchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = touchgfx::HAL::noTouch() &rArr; touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short) &rArr; touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureType, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[cc]"></a>touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool) &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[cf]"></a>touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char) &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[db]"></a>touchgfx::HAL::endFrame()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL8endFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::endFrame()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c5]"></a>touchgfx::HAL::flushDMA()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL8flushDMAEv))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[ca]"></a>touchgfx::HAL::blockCopy(void*, const void*, unsigned)</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL9blockCopyEPvPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::blockCopy(void*, const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[d7]"></a>touchgfx::HAL::taskDelay(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7hal.o(i._ZN8touchgfx3HAL9taskDelayEt))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c2]"></a>touchgfx::HAL::taskEntry()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL9taskEntryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::HAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::waitForVSync()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[4af]"></a>touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, boardconfiguration.o(i._ZN8touchgfx3HALC2ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[459]"></a>touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, touchgfx::LCD::StringVisuals&, const unsigned short*, ...)</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, lcd.o(i._ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[3e7]"></a>touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, lcd.o(i._ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation) &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[3e8]"></a>touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, lcd.o(i._ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[3eb]"></a>touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, lcd.o(i._ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[a]"></a>touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)</STRONG> (Thumb, 594 bytes, Stack size 216 bytes, lcd.o(i._ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list) &rArr; touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> texts.o(.data)
</UL>
<P><STRONG><a name="[3ed]"></a>touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)</STRONG> (Thumb, 534 bytes, Stack size 120 bytes, lcd.o(i._ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[3ea]"></a>touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::addWord(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
</UL>

<P><STRONG><a name="[3ef]"></a>touchgfx::LCD::WideTextInternalStruct::addWord(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::LCD::WideTextInternalStruct::addWord(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
</UL>

<P><STRONG><a name="[3e9]"></a>touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
</UL>

<P><STRONG><a name="[51d]"></a>touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct__sub_object(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE), UNUSED)

<P><STRONG><a name="[3f0]"></a>touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)</STRONG> (Thumb, 592 bytes, Stack size 344 bytes, lcd.o(i._ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short) &rArr; touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int) &rArr; touchgfx::floorDivMod(int, int, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gradients::Gradients(const touchgfx::Point3D*)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::step()
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::step(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[3f5]"></a>touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[3f6]"></a>touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[427]"></a>touchgfx::clz(int)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, utils.o(i._ZN8touchgfx3clzEi))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
</UL>

<P><STRONG><a name="[42c]"></a>touchgfx::Cell::set(int, int, int, int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx4Cell3setEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>

<P><STRONG><a name="[42d]"></a>touchgfx::Cell::addCover(int, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx4Cell8addCoverEii))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
</UL>

<P><STRONG><a name="[3f3]"></a>touchgfx::Edge::step(int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx4Edge4stepEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Edge::step(int) &rArr; touchgfx::Edge::step()
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::step()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[3f4]"></a>touchgfx::Edge::step()</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, lcd.o(i._ZN8touchgfx4Edge4stepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Edge::step()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::step(int)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[3f2]"></a>touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, texturemaptypes.o(i._ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int) &rArr; touchgfx::floorDivMod(int, int, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ceil28_4(int)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::fixed28_4ToFloat(int)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::floorDivMod(int, int, int&, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[51e]"></a>touchgfx::Edge::Edge__sub_object(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, texturemaptypes.o(i._ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii), UNUSED)

<P><STRONG><a name="[2a4]"></a>touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio_1.o(i._ZN8touchgfx4GPIO3setENS0_7GPIO_IDE))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setMCUActive(bool)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[346]"></a>touchgfx::GPIO::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio_1.o(i._ZN8touchgfx4GPIO4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init()
</UL>

<P><STRONG><a name="[2a5]"></a>touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio_1.o(i._ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setMCUActive(bool)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[3e1]"></a>touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio_1.o(i._ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
</UL>

<P><STRONG><a name="[3fa]"></a>touchgfx::Line::updateCachedShape()</STRONG> (Thumb, 796 bytes, Stack size 104 bytes, line.o(i._ZN8touchgfx4Line17updateCachedShapeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;short&rang;() const
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;int&rang;(T1)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;touchgfx::CWRUtil::Q5&rang;(T1)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sqrtQ10(touchgfx::CWRUtil::Q10)
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setLineEndingStyle(touchgfx::Line::LINE_ENDING_STYLE)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::setLineWidth&lang;int&rang;(T1)
</UL>

<P><STRONG><a name="[392]"></a>touchgfx::Line::setLineEndingStyle(touchgfx::Line::LINE_ENDING_STYLE)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = touchgfx::Line::setLineEndingStyle(touchgfx::Line::LINE_ENDING_STYLE) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
</UL>

<P><STRONG><a name="[403]"></a>touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::setEnd&lang;int&rang;(T1, T1)
</UL>

<P><STRONG><a name="[404]"></a>touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::setStart&lang;int&rang;(T1, T1)
</UL>

<P><STRONG><a name="[38b]"></a>touchgfx::Line::Line()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, line.o(i._ZN8touchgfx4LineC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Line::Line() &rArr; touchgfx::CanvasWidget::CanvasWidget__sub_object() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::CanvasWidget__sub_object()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
</UL>

<P><STRONG><a name="[51f]"></a>touchgfx::Line::Line__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, line.o(i._ZN8touchgfx4LineC1Ev), UNUSED)

<P><STRONG><a name="[1c6]"></a>touchgfx::Line::~Line()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, debug_modeview.o(i._ZN8touchgfx4LineD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::~CanvasWidget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::~DEBUG_MODEViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[520]"></a>touchgfx::Line::~Line__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, debug_modeview.o(i._ZN8touchgfx4LineD1Ev), UNUSED)

<P><STRONG><a name="[3b4]"></a>touchgfx::Rect::expandToFit(const touchgfx::Rect&)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, application.o(i._ZN8touchgfx4Rect11expandToFitERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[3b8]"></a>touchgfx::Rect::Rect(short, short, short, short)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZN8touchgfx4RectC1Essss))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw(touchgfx::Rect&)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw()
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::getMinimalRect() const
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::getSolidRect() const
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::CanvasWidget__sub_object()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::draw(const touchgfx::Rect&) const
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::getSolidRect() const
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::ScalableImage()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::getSolidRect() const
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedVisibleRect()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[521]"></a>touchgfx::Rect::Rect__sub_object(short, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZN8touchgfx4RectC1Essss), UNUSED)

<P><STRONG><a name="[8e]"></a>touchgfx::Rect::Rect()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx4RectC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev)
</UL>
<P><STRONG><a name="[522]"></a>touchgfx::Rect::Rect__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx4RectC1Ev), UNUSED)

<P><STRONG><a name="[405]"></a>touchgfx::Rect::operator &=(const touchgfx::Rect&)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx4RectaNERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::draw(const touchgfx::Rect&) const
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[387]"></a>touchgfx::View&lang;Screen1Presenter&rang;::~View()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx4ViewI16Screen1PresenterED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>

<P><STRONG><a name="[523]"></a>touchgfx::View&lang;Screen1Presenter&rang;::~View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx4ViewI16Screen1PresenterED1Ev), UNUSED)

<P><STRONG><a name="[393]"></a>touchgfx::View&lang;DEBUG_MODEPresenter&rang;::~View()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug_modeviewbase.o(i._ZN8touchgfx4ViewI19DEBUG_MODEPresenterED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::~DEBUG_MODEViewBase()
</UL>

<P><STRONG><a name="[524]"></a>touchgfx::View&lang;DEBUG_MODEPresenter&rang;::~View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, debug_modeviewbase.o(i._ZN8touchgfx4ViewI19DEBUG_MODEPresenterED1Ev), UNUSED)

<P><STRONG><a name="[35b]"></a>touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, color.o(i._ZN8touchgfx5Color20getColorFrom24BitRGBEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::NOISE_MODEViewBase()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::ENDURANCEViewBase()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::refreshEndurance()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkEmergency()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::AUTOCROSSViewBase()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::refreshAutocross()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkEmergency()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::ACCELERATIONViewBase()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::refreshAcceleration()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkEmergency()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::SKIDPADViewBase()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::refreshSkidpad()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkEmergency()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::refreshSettings()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[1cb]"></a>touchgfx::Image::setBitmap(const touchgfx::Bitmap&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, image.o(i._ZN8touchgfx5Image9setBitmapERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::hasTransparentPixels() const
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
</UL>
<P><STRONG><a name="[3a2]"></a>touchgfx::Texts::setLanguage(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, texts.o(i._ZN8touchgfx5Texts11setLanguageEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Texts::setLanguage(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getFonts()
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getInstanceSize()
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getInstance(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[40b]"></a>touchgfx::Bitmap::clearCache()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bitmap.o(i._ZN8touchgfx6Bitmap10clearCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Bitmap::clearCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[409]"></a>touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bitmap.o(i._ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned) &rArr; touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned) &rArr; touchgfx::Bitmap::clearCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[40a]"></a>touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bitmap.o(i._ZN8touchgfx6Bitmap8setCacheEPtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned) &rArr; touchgfx::Bitmap::clearCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::clearCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[82]"></a>touchgfx::BlitOp::BlitOp()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7dma.o(i._ZN8touchgfx6BlitOpC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(i._ZN10STM32F7DMAC1Ev)
</UL>
<P><STRONG><a name="[525]"></a>touchgfx::BlitOp::BlitOp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f7dma.o(i._ZN8touchgfx6BlitOpC1Ev), UNUSED)

<P><STRONG><a name="[40c]"></a>touchgfx::Canvas::close()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, canvas.o(i._ZN8touchgfx6Canvas5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = touchgfx::Canvas::close() &rArr; touchgfx::Rasterizer::lineTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[40d]"></a>touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, canvas.o(i._ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Rasterizer::moveTo(int, int) &rArr; touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[410]"></a>touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, canvas.o(i._ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Rasterizer::moveTo(int, int) &rArr; touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[411]"></a>touchgfx::Canvas::render()</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, canvas.o(i._ZN8touchgfx6Canvas6renderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = touchgfx::Canvas::render() &rArr; bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&) &rArr; touchgfx::Outline::getCells() &rArr; touchgfx::Outline::sortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainter::setOffset(unsigned short, unsigned short)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainter::setWidgetAlpha(unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[415]"></a>touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, canvas.o(i._ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&) &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::hasBuffer()
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::setScanlineWidth(unsigned)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::Scanline()
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::Outline()
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RenderingBuffer::RenderingBuffer()
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RenderingBuffer::attach(unsigned char*, unsigned char, unsigned, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[526]"></a>touchgfx::Canvas::Canvas__sub_object(const touchgfx::CanvasWidget*, const touchgfx::Rect&)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, canvas.o(i._ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE), UNUSED)

<P><STRONG><a name="[1cc]"></a>touchgfx::Canvas::~Canvas()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, canvas.o(i._ZN8touchgfx6CanvasD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Canvas::~Canvas()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::~Outline()
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RenderingBuffer::~RenderingBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canvas.o(.constdata__ZTVN8touchgfx6CanvasE)
</UL>
<P><STRONG><a name="[527]"></a>touchgfx::Canvas::~Canvas__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, canvas.o(i._ZN8touchgfx6CanvasD1Ev), UNUSED)

<P><STRONG><a name="[1ce]"></a>touchgfx::Screen::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen11setupScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[3cd]"></a>touchgfx::Screen::bindTransition(touchgfx::Transition&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE))
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
</UL>

<P><STRONG><a name="[e9]"></a>touchgfx::Screen::handleKeyEvent(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, accelerationview.o(i._ZN8touchgfx6Screen14handleKeyEventEh))
<BR>[Address Reference Count : 19]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
<LI> board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
<LI> debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
<LI> accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
<LI> autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
<LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
<LI> noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
<LI> enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
<LI> noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
<LI> settingsview.o(.constdata__ZTV12SETTINGSView)
<LI> board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
<LI> debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
<LI> settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
<LI> skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[f2]"></a>touchgfx::Screen::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx6Screen14tearDownScreenEv))
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
<LI> autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
<LI> noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
<LI> debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
<LI> settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
<LI> skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[e3]"></a>touchgfx::Screen::afterTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, accelerationview.o(i._ZN8touchgfx6Screen15afterTransitionEv))
<BR>[Address Reference Count : 19]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
<LI> board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
<LI> debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
<LI> accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
<LI> autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
<LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
<LI> noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
<LI> enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
<LI> noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
<LI> settingsview.o(.constdata__ZTV12SETTINGSView)
<LI> board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
<LI> debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
<LI> settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
<LI> skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[e6]"></a>touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Address Reference Count : 19]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
<LI> board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
<LI> debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
<LI> accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
<LI> autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
<LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
<LI> noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
<LI> enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
<LI> noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
<LI> settingsview.o(.constdata__ZTV12SETTINGSView)
<LI> board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
<LI> debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
<LI> settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
<LI> skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[e8]"></a>touchgfx::Screen::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, accelerationview.o(i._ZN8touchgfx6Screen15handleTickEventEv))
<BR>[Address Reference Count : 19]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
<LI> board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
<LI> debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
<LI> accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
<LI> autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
<LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
<LI> noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
<LI> enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
<LI> noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
<LI> settingsview.o(.constdata__ZTV12SETTINGSView)
<LI> board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
<LI> debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
<LI> settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
<LI> skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[e5]"></a>touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 420 bytes, Stack size 144 bytes, screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 19]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
<LI> board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
<LI> debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
<LI> accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
<LI> autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
<LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
<LI> noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
<LI> enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
<LI> noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
<LI> settingsview.o(.constdata__ZTV12SETTINGSView)
<LI> board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
<LI> debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
<LI> settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
<LI> skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[e7]"></a>touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Address Reference Count : 19]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
<LI> board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
<LI> debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
<LI> accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
<LI> autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
<LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
<LI> noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
<LI> enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
<LI> noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
<LI> settingsview.o(.constdata__ZTV12SETTINGSView)
<LI> board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
<LI> debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
<LI> settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
<LI> skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[384]"></a>touchgfx::Screen::add(touchgfx::Drawable&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, accelerationviewbase.o(i._ZN8touchgfx6Screen3addERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Screen::add(touchgfx::Drawable&) &rArr; touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::NOISE_MODEViewBase()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::ENDURANCEViewBase()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::AUTOCROSSViewBase()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::ACCELERATIONViewBase()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::SKIDPADViewBase()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
</UL>

<P><STRONG><a name="[e1]"></a>touchgfx::Screen::draw(touchgfx::Rect&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = touchgfx::Screen::draw(touchgfx::Rect&) &rArr; touchgfx::Screen::startSMOC(touchgfx::Rect&) &rArr; touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 19]<UL><LI> autocrossview.o(.constdata__ZTV13AUTOCROSSView)
<LI> board_debugview.o(.constdata__ZTV15BOARD_DEBUGView)
<LI> debug_modeview.o(.constdata__ZTV14DEBUG_MODEView)
<LI> accelerationviewbase.o(.constdata__ZTV20ACCELERATIONViewBase)
<LI> autocrossviewbase.o(.constdata__ZTV17AUTOCROSSViewBase)
<LI> accelerationview.o(.constdata__ZTV16ACCELERATIONView)
<LI> noise_modeview.o(.constdata__ZTV14NOISE_MODEView)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> enduranceview.o(.constdata__ZTV13ENDURANCEView)
<LI> enduranceviewbase.o(.constdata__ZTV17ENDURANCEViewBase)
<LI> noise_modeviewbase.o(.constdata__ZTV18NOISE_MODEViewBase)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> skidpadview.o(.constdata__ZTV11SKIDPADView)
<LI> settingsview.o(.constdata__ZTV12SETTINGSView)
<LI> board_debugviewbase.o(.constdata__ZTV19BOARD_DEBUGViewBase)
<LI> debug_modeviewbase.o(.constdata__ZTV18DEBUG_MODEViewBase)
<LI> settingsviewbase.o(.constdata__ZTV16SETTINGSViewBase)
<LI> skidpadviewbase.o(.constdata__ZTV15SKIDPADViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[3bb]"></a>touchgfx::Screen::draw()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6Screen4drawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[422]"></a>touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</STRONG> (Thumb, 540 bytes, Stack size 72 bytes, screen.o(i._ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedVisibleRect()
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsY()
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsX()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(touchgfx::Rect&)
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[421]"></a>touchgfx::Screen::startSMOC(touchgfx::Rect&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx6Screen9startSMOCERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::Screen::startSMOC(touchgfx::Rect&) &rArr; touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
</UL>

<P><STRONG><a name="[37d]"></a>touchgfx::Screen::Screen()</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, screen.o(i._ZN8touchgfx6ScreenC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Screen::Screen() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::NOISE_MODEViewBase()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::ENDURANCEViewBase()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::AUTOCROSSViewBase()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::ACCELERATIONViewBase()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::SKIDPADViewBase()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[528]"></a>touchgfx::Screen::Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, screen.o(i._ZN8touchgfx6ScreenC1Ev), UNUSED)

<P><STRONG><a name="[1cd]"></a>touchgfx::Screen::~Screen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6ScreenD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[529]"></a>touchgfx::Screen::~Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6ScreenD1Ev), UNUSED)

<P><STRONG><a name="[180]"></a>touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, accelerationviewbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE))
<BR>[Address Reference Count : 9]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[385]"></a>touchgfx::Widget::Widget__sub_object()</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, screen1viewbase.o(i._ZN8touchgfx6WidgetC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::BoxWithBorder()
</UL>

<P><STRONG><a name="[438]"></a>touchgfx::memset(void*, unsigned char, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utils.o(i._ZN8touchgfx6memsetEPvhj))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::addSpan(int, int, unsigned, unsigned)
</UL>

<P><STRONG><a name="[426]"></a>touchgfx::muldiv(int, int, int, int&)</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, utils.o(i._ZN8touchgfx6muldivEiiiRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::clz(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[83]"></a>touchgfx::CWRUtil::Q5::Q5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx7CWRUtil2Q5C1Ev))
<BR>[Address Reference Count : 1]<UL><LI> line.o(i._ZN8touchgfx4LineC1Ev)
</UL>
<P><STRONG><a name="[52a]"></a>touchgfx::CWRUtil::Q5::Q5__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx7CWRUtil2Q5C1Ev), UNUSED)

<P><STRONG><a name="[45b]"></a>touchgfx::CWRUtil::sine(int)</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, line.o(i._ZN8touchgfx7CWRUtil4sineEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::CWRUtil::sine(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[42a]"></a>touchgfx::CWRUtil::isqrt(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx7CWRUtil5isqrtEj))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sqrtQ10(touchgfx::CWRUtil::Q10)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)
</UL>

<P><STRONG><a name="[428]"></a>touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, line.o(i._ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&) &rArr;  touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sqrtQ10(touchgfx::CWRUtil::Q10)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[429]"></a>touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, line.o(i._ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10) &rArr;  touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::isqrt(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[3ff]"></a>touchgfx::CWRUtil::sqrtQ10(touchgfx::CWRUtil::Q10)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, line.o(i._ZN8touchgfx7CWRUtil7sqrtQ10ENS0_3Q10E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::sqrtQ10(touchgfx::CWRUtil::Q10)
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::isqrt(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[400]"></a>touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, line.o(i._ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>

<P><STRONG><a name="[432]"></a>touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)</STRONG> (Thumb, 368 bytes, Stack size 340 bytes, outline.o(i._ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::sortCells()
</UL>

<P><STRONG><a name="[42b]"></a>touchgfx::Outline::renderLine(int, int, int, int)</STRONG> (Thumb, 2942 bytes, Stack size 136 bytes, outline.o(i._ZN8touchgfx7Outline10renderLineEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::addCover(int, int)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
</UL>

<P><STRONG><a name="[41b]"></a>touchgfx::Outline::reset()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, outline.o(i._ZN8touchgfx7Outline5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Outline::reset() &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBuffer()
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::Outline()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
</UL>

<P><STRONG><a name="[3ac]"></a>touchgfx::Outline::lineTo(int, int)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, outline.o(i._ZN8touchgfx7Outline6lineToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::getCells()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>

<P><STRONG><a name="[3ae]"></a>touchgfx::Outline::moveTo(int, int)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, outline.o(i._ZN8touchgfx7Outline6moveToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::set(int, int, int, int)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
</UL>

<P><STRONG><a name="[430]"></a>touchgfx::Outline::getCells()</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7Outline8getCellsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = touchgfx::Outline::getCells() &rArr; touchgfx::Outline::sortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::sortCells()
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
</UL>

<P><STRONG><a name="[431]"></a>touchgfx::Outline::sortCells()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7Outline9sortCellsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = touchgfx::Outline::sortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::getCells()
</UL>

<P><STRONG><a name="[417]"></a>touchgfx::Outline::Outline()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7OutlineC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Outline::Outline() &rArr; touchgfx::Outline::reset() &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[52b]"></a>touchgfx::Outline::Outline__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7OutlineC1Ev), UNUSED)

<P><STRONG><a name="[1cf]"></a>touchgfx::Outline::~Outline()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7OutlineD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::~Canvas()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> outline.o(.constdata__ZTVN8touchgfx7OutlineE)
</UL>
<P><STRONG><a name="[52c]"></a>touchgfx::Outline::~Outline__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7OutlineD1Ev), UNUSED)

<P><STRONG><a name="[433]"></a>touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, const unsigned short*, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)</STRONG> (Thumb, 344 bytes, Stack size 52 bytes, unicode.o(i._ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, const unsigned short*, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strlen(const unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*)
</UL>

<P><STRONG><a name="[35d]"></a>touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float)</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, accelerationview.o(i._ZN8touchgfx7Unicode13snprintfFloatEPttPKcf))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::refreshNoiseMode()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::refreshEndurance()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::refreshDebugMode()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::refreshBoardDebug()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::refreshAutocross()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::refreshAcceleration()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::refreshSkidpad()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displayAcceleration()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displayEndurance()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displayAutocross()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displaySkidpad()
</UL>

<P><STRONG><a name="[435]"></a>touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*)</STRONG> (Thumb, 52 bytes, Stack size 144 bytes, unicode.o(i._ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*) &rArr; touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strlen(const char*)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloat(unsigned short*, unsigned short, const char*, float)
</UL>

<P><STRONG><a name="[437]"></a>touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*)</STRONG> (Thumb, 646 bytes, Stack size 328 bytes, unicode.o(i._ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::memset(void*, unsigned char, unsigned)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, const unsigned short*, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*)
</UL>

<P><STRONG><a name="[439]"></a>touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, unicode.o(i._ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::atoi(const unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*)
</UL>

<P><STRONG><a name="[43b]"></a>touchgfx::Unicode::atoi(const unsigned short*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, unicode.o(i._ZN8touchgfx7Unicode4atoiEPKt))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
</UL>

<P><STRONG><a name="[43a]"></a>touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int)</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, unicode.o(i._ZN8touchgfx7Unicode4itoaEiPtti))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const unsigned short*, const float*)
</UL>

<P><STRONG><a name="[43c]"></a>touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int)</STRONG> (Thumb, 72 bytes, Stack size 52 bytes, unicode.o(i._ZN8touchgfx7Unicode4utoaEjPtti))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[436]"></a>touchgfx::Unicode::strlen(const char*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, unicode.o(i._ZN8touchgfx7Unicode6strlenEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[434]"></a>touchgfx::Unicode::strlen(const unsigned short*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, unicode.o(i._ZN8touchgfx7Unicode6strlenEPKt))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, const unsigned short*, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)
</UL>

<P><STRONG><a name="[35a]"></a>touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, unicode.o(i._ZN8touchgfx7Unicode7strncpyEPtPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::refreshNoiseMode()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::setupScreen()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::refreshEndurance()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::setupScreen()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::refreshDebugMode()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::setupScreen()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::refreshBoardDebug()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::setupScreen()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::screenCheckMessage()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::refreshAutocross()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::setupScreen()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintfFloats(unsigned short*, unsigned short, const char*, const float*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::refreshAcceleration()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::screenCheckMessage()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::setupScreen()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::refreshSkidpad()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::setupScreen()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::calibrationImuDisplay()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::calibrationDcuDisplay()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displayAcceleration()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displayEndurance()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displayAutocross()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::refreshSettings()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displaySkidpad()
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int)
</UL>

<P><STRONG><a name="[35c]"></a>touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, unicode.o(i._ZN8touchgfx7Unicode8snprintfEPttPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::NOISE_MODEViewBase()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::refreshNoiseMode()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::ENDURANCEViewBase()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::refreshEndurance()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::refreshDebugMode()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::refreshBoardDebug()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::AUTOCROSSViewBase()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::screenCheckMessage()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::refreshAutocross()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::ACCELERATIONViewBase()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::refreshAcceleration()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::screenCheckMessage()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::SKIDPADViewBase()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::refreshSkidpad()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::calibrationImuDisplay()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::calibrationDcuDisplay()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displayAcceleration()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displayEndurance()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displayAutocross()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::refreshSettings()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::displaySkidpad()
</UL>

<P><STRONG><a name="[43d]"></a>touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)</STRONG> (Thumb, 52 bytes, Stack size 144 bytes, unicode.o(i._ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strlen(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
</UL>

<P><STRONG><a name="[43e]"></a>touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)</STRONG> (Thumb, 588 bytes, Stack size 192 bytes, unicode.o(i._ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::memset(void*, unsigned char, unsigned)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, const unsigned short*, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[397]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSERKS2_))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransition()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoACCELERATIONScreenNoTransition()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransition()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoNOISE_MODEScreenNoTransition()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransition()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoENDURANCEScreenNoTransition()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoAUTOCROSSScreenNoTransition()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSETTINGSScreenNoTransition()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSKIDPADScreenNoTransition()
</UL>

<P><STRONG><a name="[183]"></a>touchgfx::Drawable::setPosition(short, short, short, short)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, settingsview.o(i._ZN8touchgfx8Drawable11setPositionEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Drawable::setPosition(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::NOISE_MODEViewBase()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::ENDURANCEViewBase()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::AUTOCROSSViewBase()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::ACCELERATIONViewBase()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::SKIDPADViewBase()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::refreshSettings()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::moveSelectedBox()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[425]"></a>touchgfx::Drawable::getCachedAbsX()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx8Drawable13getCachedAbsXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Drawable::getCachedAbsX() &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[424]"></a>touchgfx::Drawable::getCachedAbsY()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx8Drawable13getCachedAbsYEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Drawable::getCachedAbsY() &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[18d]"></a>touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, accelerationviewbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_))
<BR>[Address Reference Count : 10]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[18b]"></a>touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE))
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[18c]"></a>touchgfx::Drawable::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, accelerationviewbase.o(i._ZN8touchgfx8Drawable15handleTickEventEv))
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[189]"></a>touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, accelerationviewbase.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE))
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[18a]"></a>touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, accelerationviewbase.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE))
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[423]"></a>touchgfx::Drawable::getCachedVisibleRect()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx8Drawable20getCachedVisibleRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Drawable::getCachedVisibleRect() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[184]"></a>touchgfx::Drawable::setX(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, accelerationviewbase.o(i._ZN8touchgfx8Drawable4setXEs))
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[185]"></a>touchgfx::Drawable::setY(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, accelerationviewbase.o(i._ZN8touchgfx8Drawable4setYEs))
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[186]"></a>touchgfx::Drawable::setXY(short, short)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, accelerationviewbase.o(i._ZN8touchgfx8Drawable5setXYEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::NOISE_MODEViewBase()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::ENDURANCEViewBase()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::AUTOCROSSViewBase()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::ACCELERATIONViewBase()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::SKIDPADViewBase()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[187]"></a>touchgfx::Drawable::setWidth(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, accelerationviewbase.o(i._ZN8touchgfx8Drawable8setWidthEs))
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[188]"></a>touchgfx::Drawable::setHeight(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, accelerationviewbase.o(i._ZN8touchgfx8Drawable9setHeightEs))
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[3e5]"></a>touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gestures.o(i._ZN8touchgfx8Gestures17registerDragEventEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;short&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[3e6]"></a>touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, gestures.o(i._ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short) &rArr; touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureType, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::noTouch()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[3e2]"></a>touchgfx::Gestures::registerEventListener(touchgfx::UIEventListener&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gestures.o(i._ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)
</UL>

<P><STRONG><a name="[3e3]"></a>touchgfx::Gestures::tick()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gestures.o(i._ZN8touchgfx8Gestures4tickEv))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
</UL>

<P><STRONG><a name="[441]"></a>touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 368 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKjRKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[1d2]"></a>touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool) &rArr; touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getData() const
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::hasTransparentPixels() const
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getAlphaData() const
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[445]"></a>touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 454 bytes, Stack size 56 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[1d6]"></a>touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)</STRONG> (Thumb, 3598 bytes, Stack size 160 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float, unsigned char)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::floatToFixed16_16(float)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::expand_rgb_565(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[1d3]"></a>touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)</STRONG> (Thumb, 596 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[1d4]"></a>touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[449]"></a>touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[1d7]"></a>touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)</STRONG> (Thumb, 760 bytes, Stack size 96 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[448]"></a>touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[88]"></a>touchgfx::LCD16bpp::~LCD16bpp()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[52d]"></a>touchgfx::LCD16bpp::~LCD16bpp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev), UNUSED)

<P><STRONG><a name="[4a3]"></a>touchgfx::Renderer::render(const touchgfx::Scanline&)</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, canvas.o(i._ZN8touchgfx8Renderer6renderERKNS_8ScanlineE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Renderer::render(const touchgfx::Scanline&)
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
</UL>

<P><STRONG><a name="[44a]"></a>touchgfx::Scanline::reset()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, scanline.o(i._ZN8touchgfx8Scanline5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Scanline::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getScanlineStartIndices()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getScanlineCovers()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getScanlineCounts()
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::Scanline()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
</UL>

<P><STRONG><a name="[44e]"></a>touchgfx::Scanline::addSpan(int, int, unsigned, unsigned)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, scanline.o(i._ZN8touchgfx8Scanline7addSpanEiijj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Scanline::addSpan(int, int, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getScanlineWidth()
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::memset(void*, unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
</UL>

<P><STRONG><a name="[418]"></a>touchgfx::Scanline::Scanline()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scanline.o(i._ZN8touchgfx8ScanlineC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Scanline::Scanline() &rArr; touchgfx::Scanline::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[52e]"></a>touchgfx::Scanline::Scanline__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, scanline.o(i._ZN8touchgfx8ScanlineC1Ev), UNUSED)

<P><STRONG><a name="[383]"></a>touchgfx::TextArea::setTypedText(touchgfx::TypedText)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, textarea.o(i._ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextArea::setTypedText(touchgfx::TypedText) &rArr; touchgfx::TextArea::resizeToCurrentText()
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::NOISE_MODEViewBase()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::ENDURANCEViewBase()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::AUTOCROSSViewBase()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::ACCELERATIONViewBase()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::SKIDPADViewBase()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
</UL>

<P><STRONG><a name="[1d9]"></a>touchgfx::TextArea::getTextHeight()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, textarea.o(i._ZN8touchgfx8TextArea13getTextHeightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = touchgfx::TextArea::getTextHeight() &rArr; touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const &rArr; touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[38a]"></a>touchgfx::TextArea::resizeToCurrentText()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, textarea.o(i._ZN8touchgfx8TextArea19resizeToCurrentTextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TextArea::resizeToCurrentText()
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
</UL>

<P><STRONG><a name="[381]"></a>touchgfx::TextArea::TextArea()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZN8touchgfx8TextAreaC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::TextArea::TextArea() &rArr; touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::NOISE_MODEViewBase()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::ENDURANCEViewBase()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::AUTOCROSSViewBase()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::ACCELERATIONViewBase()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::SKIDPADViewBase()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
</UL>

<P><STRONG><a name="[52f]"></a>touchgfx::TextArea::TextArea__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZN8touchgfx8TextAreaC1Ev), UNUSED)

<P><STRONG><a name="[3f7]"></a>touchgfx::ceil28_4(int)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, texturemaptypes.o(i._ZN8touchgfx8ceil28_4Ei))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)
</UL>

<P><STRONG><a name="[3ca]"></a>touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, constfont.o(i._ZN8touchgfx9ConstFontC2EPKNS_9GlyphNodeEtthhhhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[1dd]"></a>touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[1de]"></a>touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**) &rArr; touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[1df]"></a>touchgfx::Container::add(touchgfx::Drawable&)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[3f1]"></a>touchgfx::Gradients::Gradients(const touchgfx::Point3D*)</STRONG> (Thumb, 628 bytes, Stack size 32 bytes, texturemaptypes.o(i._ZN8touchgfx9GradientsC1EPKNS_7Point3DE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Gradients::Gradients(const touchgfx::Point3D*) &rArr; touchgfx::fixed28_4Mul(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::fixed28_4ToFloat(int)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::fixed28_4Mul(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[530]"></a>touchgfx::Gradients::Gradients__sub_object(const touchgfx::Point3D*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, texturemaptypes.o(i._ZN8touchgfx9GradientsC1EPKNS_7Point3DE), UNUSED)

<P><STRONG><a name="[c8]"></a>STM32F7HAL::getTFTFrameBuffer() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7hal.o(i._ZNK10STM32F7HAL17getTFTFrameBufferEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[4a2]"></a>touchgfx::Rasterizer::calculateAlpha(int) const</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, canvas.o(i._ZNK8touchgfx10Rasterizer14calculateAlphaEi))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
</UL>

<P><STRONG><a name="[18f]"></a>touchgfx::CanvasWidget::getPainter() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10getPainterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CanvasWidget::getPainter() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[17e]"></a>touchgfx::CanvasWidget::getSolidRect() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::CanvasWidget::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[191]"></a>touchgfx::CanvasWidget::getMinimalRect() const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget14getMinimalRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::CanvasWidget::getMinimalRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[17d]"></a>touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[190]"></a>touchgfx::CanvasWidget::getAlpha() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv))
<BR>[Address Reference Count : 2]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[199]"></a>touchgfx::BoxWithBorder::getSolidRect() const</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, boxwithborder.o(i._ZNK8touchgfx13BoxWithBorder12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::BoxWithBorder::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
</UL>
<P><STRONG><a name="[198]"></a>touchgfx::BoxWithBorder::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 256 bytes, Stack size 88 bytes, boxwithborder.o(i._ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::BoxWithBorder::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
</UL>
<P><STRONG><a name="[452]"></a>touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const</STRONG> (Thumb, 468 bytes, Stack size 280 bytes, scalableimage.o(i._ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const &rArr; touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short) &rArr; touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int) &rArr; touchgfx::floorDivMod(int, int, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getData() const
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getAlphaData() const
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(float&, float&, const touchgfx::Rect&)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::lookupRenderVariant() const
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::floatToFixed28_4(float)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[1a2]"></a>touchgfx::ScalableImage::getSolidRect() const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, scalableimage.o(i._ZNK8touchgfx13ScalableImage12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::ScalableImage::getSolidRect() const &rArr; touchgfx::Bitmap::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
</UL>
<P><STRONG><a name="[455]"></a>touchgfx::ScalableImage::lookupRenderVariant() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scalableimage.o(i._ZNK8touchgfx13ScalableImage19lookupRenderVariantEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ScalableImage::lookupRenderVariant() const &rArr; touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[1a1]"></a>touchgfx::ScalableImage::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 368 bytes, Stack size 152 bytes, scalableimage.o(i._ZNK8touchgfx13ScalableImage4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = touchgfx::ScalableImage::draw(const touchgfx::Rect&) const &rArr; touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const &rArr; touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short) &rArr; touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int) &rArr; touchgfx::floorDivMod(int, int, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
</UL>
<P><STRONG><a name="[1af]"></a>touchgfx::InternalFlashFont::getKerning(unsigned short, const touchgfx::GlyphNode*) const</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, internalflashfont.o(i._ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::InternalFlashFont::getKerning(unsigned short, const touchgfx::GlyphNode*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
</UL>
<P><STRONG><a name="[1b0]"></a>touchgfx::InternalFlashFont::getPixelData(const touchgfx::GlyphNode*) const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, internalflashfont.o(i._ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE))
<BR>[Address Reference Count : 1]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
</UL>
<P><STRONG><a name="[1c1]"></a>touchgfx::TextAreaWithOneWildcard::getTextWidth() const</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, accelerationviewbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::getTextWidth() const &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[1be]"></a>touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 172 bytes, Stack size 88 bytes, accelerationviewbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const &rArr; touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[3d5]"></a>touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, textareawithwildcard.o(i._ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const &rArr; touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextHeight()
</UL>

<P><STRONG><a name="[1c3]"></a>touchgfx::Box::getSolidRect() const</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, box.o(i._ZNK8touchgfx3Box12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::Box::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[1c2]"></a>touchgfx::Box::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, box.o(i._ZNK8touchgfx3Box4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Box::draw(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[3df]"></a>touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hal.o(i._ZNK8touchgfx3HAL13getDstAddressEttPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations)
</UL>

<P><STRONG><a name="[1ac]"></a>touchgfx::Font::getFontHeight() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, font.o(i._ZNK8touchgfx4Font13getFontHeightEv))
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1ab]"></a>touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, font.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1ae]"></a>touchgfx::Font::getBitsPerPixel() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, font.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv))
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1aa]"></a>touchgfx::Font::getEllipsisChar() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, font.o(i._ZNK8touchgfx4Font15getEllipsisCharEv))
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1a9]"></a>touchgfx::Font::getFallbackChar() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, font.o(i._ZNK8touchgfx4Font15getFallbackCharEv))
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[9]"></a>touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, font.o(i._ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> texts.o(.data)
</UL>
<P><STRONG><a name="[1ad]"></a>touchgfx::Font::getMinimumTextHeight() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, font.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv))
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1a8]"></a>touchgfx::Font::getGlyph(unsigned short) const</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, font.o(i._ZNK8touchgfx4Font8getGlyphEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Font::getGlyph(unsigned short) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1c7]"></a>touchgfx::Line::getMinimalRect() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, line.o(i._ZNK8touchgfx4Line14getMinimalRectEv))
<BR>[Address Reference Count : 1]<UL><LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[1c8]"></a>touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const</STRONG> (Thumb, 398 bytes, Stack size 240 bytes, line.o(i._ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const &rArr; touchgfx::Canvas::render() &rArr; bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&) &rArr; touchgfx::Outline::getCells() &rArr; touchgfx::Outline::sortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::~Canvas()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -() const
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[3ee]"></a>touchgfx::Rect::right() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx4Rect5rightEv))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[3b7]"></a>touchgfx::Rect::bottom() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx4Rect6bottomEv))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[3b0]"></a>touchgfx::Rect::isEmpty() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx4Rect7isEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[3b1]"></a>touchgfx::Rect::includes(const touchgfx::Rect&) const</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, application.o(i._ZNK8touchgfx4Rect8includesERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Rect::includes(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[3b3]"></a>touchgfx::Rect::intersect(const touchgfx::Rect&) const</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, canvaswidget.o(i._ZNK8touchgfx4Rect9intersectERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[41f]"></a>touchgfx::Rect::intersect(short, short) const</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, screen.o(i._ZNK8touchgfx4Rect9intersectEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[3b9]"></a>touchgfx::Rect::operator &(const touchgfx::Rect&) const</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, application.o(i._ZNK8touchgfx4RectanERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw(touchgfx::Rect&)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::draw(const touchgfx::Rect&) const
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[1ca]"></a>touchgfx::Image::getSolidRect() const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, image.o(i._ZNK8touchgfx5Image12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Image::getSolidRect() const &rArr; touchgfx::Bitmap::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
</UL>
<P><STRONG><a name="[1c9]"></a>touchgfx::Image::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, image.o(i._ZNK8touchgfx5Image4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::Image::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
</UL>
<P><STRONG><a name="[443]"></a>touchgfx::Bitmap::getAlphaData() const</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap12getAlphaDataEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[444]"></a>touchgfx::Bitmap::getSolidRect() const</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Bitmap::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::getSolidRect() const
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::getSolidRect() const
</UL>

<P><STRONG><a name="[3db]"></a>touchgfx::Bitmap::hasTransparentPixels() const</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap20hasTransparentPixelsEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&)
</UL>

<P><STRONG><a name="[442]"></a>touchgfx::Bitmap::getData() const</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap7getDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getData() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[3c5]"></a>touchgfx::Bitmap::getWidth() const</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap8getWidthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::draw(const touchgfx::Rect&) const
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::draw(const touchgfx::Rect&) const
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::getSolidRect() const
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[3da]"></a>touchgfx::Bitmap::getFormat() const</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap9getFormatEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&)
</UL>

<P><STRONG><a name="[3c6]"></a>touchgfx::Bitmap::getHeight() const</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap9getHeightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::draw(const touchgfx::Rect&) const
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::draw(const touchgfx::Rect&) const
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::getSolidRect() const
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[40e]"></a>touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, canvas.o(i._ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[40f]"></a>touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, canvas.o(i._ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[3fb]"></a>touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q5miERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[45c]"></a>touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[3fe]"></a>touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q5mlERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[45a]"></a>touchgfx::CWRUtil::Q5::operator -() const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q5ngEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator -() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;touchgfx::CWRUtil::Q5&rang;(T1)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[401]"></a>touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q5plERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[19a]"></a>touchgfx::Drawable::invalidate() const</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::refreshNoiseMode()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkFuelIndicator()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::screenEntryPopup()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::refreshEndurance()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::checkAntistall()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::refreshDebugMode()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::refreshBoardDebug()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::screenCheckMessage()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkFuelIndicator()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::screenEntryPopup()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::refreshAutocross()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::checkAntistall()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::refreshAcceleration()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::screenCheckMessage()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkFuelIndicator()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::screenEntryPopup()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::checkAntistall()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkFuelIndicator()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::screenEntryPopup()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::refreshSkidpad()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::checkAntistall()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::calibrationImuDisplay()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::calibrationDcuDisplay()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::changeSchermata3(bool)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::changeSchermata2(bool)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::changeSchermata1(bool)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::changeSchermata0(bool)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::refreshSettings()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::moveSelectedBox()
</UL>
<BR>[Address Reference Count : 9]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[181]"></a>touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[17f]"></a>touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[41e]"></a>touchgfx::Drawable::getAbsoluteRect() const</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, drawable.o(i._ZNK8touchgfx8Drawable15getAbsoluteRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsY()
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsX()
</UL>

<P><STRONG><a name="[182]"></a>touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE))
<BR>[Address Reference Count : 11]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[1d5]"></a>touchgfx::LCD16bpp::bitDepth() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp8bitDepthEv))
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[1bf]"></a>touchgfx::TextArea::getSolidRect() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextArea::getSolidRect() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[1da]"></a>touchgfx::TextArea::getTextWidth() const</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, textarea.o(i._ZNK8touchgfx8TextArea12getTextWidthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextArea::getTextWidth() const &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[450]"></a>touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, textarea.o(i._ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const &rArr; touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeight()
</UL>

<P><STRONG><a name="[1d8]"></a>touchgfx::TextArea::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, textarea.o(i._ZNK8touchgfx8TextArea4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::TextArea::draw(const touchgfx::Rect&) const &rArr; touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[45e]"></a>touchgfx::ConstFont::find(unsigned short) const</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, constfont.o(i._ZNK8touchgfx9ConstFont4findEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::ConstFont::find(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const
</UL>

<P><STRONG><a name="[1a7]"></a>touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, constfont.o(i._ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const &rArr; touchgfx::ConstFont::find(unsigned short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::find(unsigned short) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1dc]"></a>touchgfx::Container::getSolidRect() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, container.o(i._ZNK8touchgfx9Container12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Container::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[1db]"></a>touchgfx::Container::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::Container::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[3ec]"></a>touchgfx::GlyphNode::advance() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd.o(i._ZNK8touchgfx9GlyphNode7advanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
</UL>

<P><STRONG><a name="[3d4]"></a>touchgfx::TypedText::hasValidId() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, accelerationviewbase.o(i._ZNK8touchgfx9TypedText10hasValidIdEv))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextWidth() const
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextHeight()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeight()
</UL>

<P><STRONG><a name="[458]"></a>touchgfx::TypedText::assertValid() const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZNK8touchgfx9TypedText11assertValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TypedText::assertValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[457]"></a>touchgfx::TypedText::getTextDirection() const</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZNK8touchgfx9TypedText16getTextDirectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TypedText::getTextDirection() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextWidth() const
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
</UL>

<P><STRONG><a name="[456]"></a>touchgfx::TypedText::getFont() const</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZNK8touchgfx9TypedText7getFontEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TypedText::getFont() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextWidth() const
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
</UL>

<P><STRONG><a name="[382]"></a>touchgfx::TypedText::getText() const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, accelerationviewbase.o(i._ZNK8touchgfx9TypedText7getTextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEViewBase::NOISE_MODEViewBase()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEViewBase::ENDURANCEViewBase()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSViewBase::AUTOCROSSViewBase()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONViewBase::ACCELERATIONViewBase()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADViewBase::SKIDPADViewBase()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSViewBase::SETTINGSViewBase()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextWidth() const
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextHeight()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeight()
</UL>

<P><STRONG><a name="[13b]"></a>thunk{-4} to SKIDPADPresenter::update()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, skidpadpresenter.o(i._ZThn4_N16SKIDPADPresenter6updateEv))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skidpadpresenter.o(.constdata__ZTV16SKIDPADPresenter)
</UL>
<P><STRONG><a name="[140]"></a>thunk{-4} to Screen1Presenter::update()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen1presenter.o(i._ZThn4_N16Screen1Presenter6updateEv))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1Presenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[149]"></a>thunk{-4} to SETTINGSPresenter::update()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, settingspresenter.o(i._ZThn4_N17SETTINGSPresenter6updateEv))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settingspresenter.o(.constdata__ZTV17SETTINGSPresenter)
</UL>
<P><STRONG><a name="[14e]"></a>thunk{-4} to AUTOCROSSPresenter::update()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, autocrosspresenter.o(i._ZThn4_N18AUTOCROSSPresenter6updateEv))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autocrosspresenter.o(.constdata__ZTV18AUTOCROSSPresenter)
</UL>
<P><STRONG><a name="[155]"></a>thunk{-4} to ENDURANCEPresenter::update()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, endurancepresenter.o(i._ZThn4_N18ENDURANCEPresenter6updateEv))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> endurancepresenter.o(.constdata__ZTV18ENDURANCEPresenter)
</UL>
<P><STRONG><a name="[15e]"></a>thunk{-4} to DEBUG_MODEPresenter::update()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug_modepresenter.o(i._ZThn4_N19DEBUG_MODEPresenter6updateEv))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_modepresenter.o(.constdata__ZTV19DEBUG_MODEPresenter)
</UL>
<P><STRONG><a name="[16c]"></a>thunk{-4} to NOISE_MODEPresenter::update()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, noise_modepresenter.o(i._ZThn4_N19NOISE_MODEPresenter6updateEv))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noise_modepresenter.o(.constdata__ZTV19NOISE_MODEPresenter)
</UL>
<P><STRONG><a name="[173]"></a>thunk{-4} to BOARD_DEBUGPresenter::update()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_debugpresenter.o(i._ZThn4_N20BOARD_DEBUGPresenter6updateEv))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_debugpresenter.o(.constdata__ZTV20BOARD_DEBUGPresenter)
</UL>
<P><STRONG><a name="[178]"></a>thunk{-4} to ACCELERATIONPresenter::update()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, accelerationpresenter.o(i._ZThn4_N21ACCELERATIONPresenter6updateEv))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONPresenter::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerationpresenter.o(.constdata__ZTV21ACCELERATIONPresenter)
</UL>
<P><STRONG><a name="[356]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::STM32F7DMA()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::Line()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
</UL>

<P><STRONG><a name="[348]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_420_4bpp()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_180_4bpp()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_80_4bpp()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_63_4bpp()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_45_4bpp()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_35_4bpp()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_25_4bpp()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Black_100_4bpp()
</UL>

<P><STRONG><a name="[192]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 8]<UL><LI> abstractpainter.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
<LI> accelerationviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[531]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[532]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[533]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a0]"></a>accelerationModeTask</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, freertos.o(i.accelerationModeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = accelerationModeTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>autocrossModeTask</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, freertos.o(i.autocrossModeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = autocrossModeTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>aux1ButtonTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, freertos.o(i.aux1ButtonTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = aux1ButtonTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_aux1Button_handle
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>aux1Task</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, freertos.o(i.aux1Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = aux1Task &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>aux2ButtonTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, freertos.o(i.aux2ButtonTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = aux2ButtonTask &rArr; GPIO_aux2Button_handle &rArr; I2C_save_Pointers &rArr; I2C_save_skiPointers &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_aux2Button_handle
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>aux2Task</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, freertos.o(i.aux2Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = aux2Task &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>aux3ButtonTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, freertos.o(i.aux3ButtonTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = aux3ButtonTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>boardDebugModeTask</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, freertos.o(i.boardDebugModeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = boardDebugModeTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>canTask</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, freertos.o(i.canTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = canTask &rArr; CAN_receive &rArr; dEfiSense_calculateVoltage &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[230]"></a>dEfiSense_calculateFuelLevel</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, d_efisense.o(i.dEfiSense_calculateFuelLevel))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[229]"></a>dEfiSense_calculateOilInTemperature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, d_efisense.o(i.dEfiSense_calculateOilInTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dEfiSense_calculateOilInTemperature &rArr; dEfiSense_calculateWaterTemperature &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateWaterTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[22a]"></a>dEfiSense_calculateOilOutTemperature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, d_efisense.o(i.dEfiSense_calculateOilOutTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dEfiSense_calculateOilOutTemperature &rArr; dEfiSense_calculateWaterTemperature &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateWaterTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[227]"></a>dEfiSense_calculatePH2O</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, d_efisense.o(i.dEfiSense_calculatePH2O))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[22f]"></a>dEfiSense_calculatePressure</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, d_efisense.o(i.dEfiSense_calculatePressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dEfiSense_calculatePressure &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[22e]"></a>dEfiSense_calculateSlip</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, d_efisense.o(i.dEfiSense_calculateSlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dEfiSense_calculateSlip &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[22d]"></a>dEfiSense_calculateSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, d_efisense.o(i.dEfiSense_calculateSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dEfiSense_calculateSpeed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[226]"></a>dEfiSense_calculateTPS</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, d_efisense.o(i.dEfiSense_calculateTPS))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[231]"></a>dEfiSense_calculateTempScarico</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, d_efisense.o(i.dEfiSense_calculateTempScarico))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[22b]"></a>dEfiSense_calculateTemperature</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, d_efisense.o(i.dEfiSense_calculateTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dEfiSense_calculateTemperature &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[22c]"></a>dEfiSense_calculateVoltage</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, d_efisense.o(i.dEfiSense_calculateVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dEfiSense_calculateVoltage &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[228]"></a>dEfiSense_calculateWaterTemperature</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, d_efisense.o(i.dEfiSense_calculateWaterTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dEfiSense_calculateWaterTemperature &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateOilOutTemperature
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dEfiSense_calculateOilInTemperature
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[24c]"></a>dGear_setNeutral</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, d_gears.o(i.dGear_setNeutral))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dGear_setNeutral &rArr; CAN_send &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_send
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_neutralButton_handle
</UL>

<P><STRONG><a name="[461]"></a>dGears_downShift</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, d_gears.o(i.dGears_downShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dGears_downShift &rArr; CAN_send &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_send
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;downShiftTask
</UL>

<P><STRONG><a name="[224]"></a>dGears_setGear</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, d_gears.o(i.dGears_setGear))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_receive
</UL>

<P><STRONG><a name="[462]"></a>dGears_upShift</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, d_gears.o(i.dGears_upShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dGears_upShift &rArr; CAN_send &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_send
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upShiftTask
</UL>

<P><STRONG><a name="[24f]"></a>dSensors_CLUTCH</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, d_sensors.o(i.dSensors_CLUTCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dSensors_CLUTCH &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[463]"></a>dSensors_Clutch_send</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, d_sensors.o(i.dSensors_Clutch_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = dSensors_Clutch_send &rArr; CAN_send &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsTask
</UL>

<P><STRONG><a name="[464]"></a>dSensors_Sensors_send</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, d_sensors.o(i.dSensors_Sensors_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dSensors_Sensors_send &rArr; CAN_send &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_send
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSensors_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsTask
</UL>

<P><STRONG><a name="[465]"></a>dSensors_convert</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, d_sensors.o(i.dSensors_convert))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSensors_Sensors_send
</UL>

<P><STRONG><a name="[467]"></a>dSensors_setAutoXTarget</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, d_sensors.o(i.dSensors_setAutoXTarget))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftEncoderTask
</UL>

<P><STRONG><a name="[48e]"></a>d_rpm_limiter_setValue</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, d_rpm_limiter.o(i.d_rpm_limiter_setValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = d_rpm_limiter_setValue
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rightEncoderTask
</UL>

<P><STRONG><a name="[468]"></a>d_traction_control_setValue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, d_traction_control.o(i.d_traction_control_setValue))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftEncoderTask
</UL>

<P><STRONG><a name="[33c]"></a>data_efiOff</STRONG> (Thumb, 772 bytes, Stack size 808 bytes, data.o(i.data_efiOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = data_efiOff
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_callback
</UL>

<P><STRONG><a name="[466]"></a>data_indicatorsInit</STRONG> (Thumb, 2660 bytes, Stack size 2440 bytes, data.o(i.data_indicatorsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440<LI>Call Chain = data_indicatorsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>debugFreeRTOSTask</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, freertos.o(i.debugFreeRTOSTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = debugFreeRTOSTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>debugModeTask</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, freertos.o(i.debugModeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = debugModeTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>downShiftTask</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, freertos.o(i.downShiftTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = downShiftTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGears_downShift
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>enduranceModeTask</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, freertos.o(i.enduranceModeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = enduranceModeTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[206]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[90]"></a>ledBlinkTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, freertos.o(i.ledBlinkTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ledBlinkTask &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>leftEncoderTask</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, freertos.o(i.leftEncoderTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = leftEncoderTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSensors_setAutoXTarget
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_traction_control_setValue
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_leftEncoder_settingsMode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_leftEncoder_movement
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_leftEncoder_debugMode
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_leftEncoder_boardDebugMode
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>main</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440<LI>Call Chain = main &rArr; data_indicatorsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_indicatorsInit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init()
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_Init()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_startTimers
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ltdc_init_sequence
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_MemoryMappedMode
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_setup
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getPointers
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Start
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_encoders_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1f7]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[95]"></a>mapSelectorTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, freertos.o(i.mapSelectorTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mapSelectorTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_engineMap_set
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>modeSelectorTask</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, freertos.o(i.modeSelectorTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = modeSelectorTask &rArr; I2C_save_Pointers &rArr; I2C_save_skiPointers &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_save_Pointers
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_driveMode_set
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>neutralButtonTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, freertos.o(i.neutralButtonTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = neutralButtonTask &rArr; GPIO_neutralButton_handle &rArr; I2C_save_Pointers &rArr; I2C_save_skiPointers &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_neutralButton_handle
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>okButtonTask</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, freertos.o(i.okButtonTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = okButtonTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_okButton_handle
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[337]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upShiftTask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startButtonTask
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skidpadModeTask
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingsModeTask
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsTask
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmStripeTask
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rightEncoderTask
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;okButtonTask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutralButtonTask
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSelectorTask
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapSelectorTask
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftEncoderTask
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBlinkTask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enduranceModeTask
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;downShiftTask
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugModeTask
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugFreeRTOSTask
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTask
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardDebugModeTask
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux3ButtonTask
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux2Task
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux2ButtonTask
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux1Task
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux1ButtonTask
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autocrossModeTask
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerationModeTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[46c]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31b]"></a>osMessageCreate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[318]"></a>osSemaphoreCreate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[31a]"></a>osThreadCreate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[48a]"></a>pvPortMalloc</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[49e]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[485]"></a>pxPortInitialiseStack</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[97]"></a>rightEncoderTask</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, freertos.o(i.rightEncoderTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rightEncoderTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_rpm_limiter_setValue
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_rightEncoder_settingsMode
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_rightEncoder_movement
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_rightEncoder_debugMode
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_rightEncoder_boardDebugMode
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>rpmStripeTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, freertos.o(i.rpmStripeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rpmStripeTask &rArr; I2C_rpm_update &rArr; I2C_rpm_command &rArr; I2C_debug_blue_off &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_rpm_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>sensorsTask</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, freertos.o(i.sensorsTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sensorsTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSensors_Sensors_send
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dSensors_Clutch_send
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_read
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>settingsModeTask</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, freertos.o(i.settingsModeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = settingsModeTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>skidpadModeTask</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, freertos.o(i.skidpadModeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = skidpadModeTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>startButtonTask</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, freertos.o(i.startButtonTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = startButtonTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_send
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>upShiftTask</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, freertos.o(i.upShiftTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = upShiftTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dGears_upShift
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[472]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[482]"></a>vApplicationIdleHook</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oswrappers.o(i.vApplicationIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vApplicationIdleHook &rArr; vTaskSetApplicationTaskTag
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[48d]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oswrappers.o(i.vApplicationMallocFailedHook))
<BR><BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[493]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oswrappers.o(i.vApplicationStackOverflowHook))
<BR><BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[477]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[484]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[474]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[473]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[476]"></a>vPortEnterCritical</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[478]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[481]"></a>vPortFree</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[499]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[494]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[460]"></a>vTaskDelay</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upShiftTask
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rightEncoderTask
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;okButtonTask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutralButtonTask
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSelectorTask
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapSelectorTask
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftEncoderTask
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;downShiftTask
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux3ButtonTask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux2ButtonTask
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux1ButtonTask
</UL>

<P><STRONG><a name="[489]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[496]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[497]"></a>vTaskPriorityInherit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[492]"></a>vTaskSetApplicationTaskTag</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskSetApplicationTaskTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSetApplicationTaskTag
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[49f]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[46d]"></a>vTaskStartScheduler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[47a]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1ef]"></a>vTaskSwitchContext</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[498]"></a>xPortStartScheduler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[46e]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[3a4]"></a>xQueueGenericCreate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[319]"></a>xQueueGenericReceive</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upShiftTask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startButtonTask
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skidpadModeTask
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settingsModeTask
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsTask
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmStripeTask
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rightEncoderTask
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;okButtonTask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutralButtonTask
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSelectorTask
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapSelectorTask
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftEncoderTask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enduranceModeTask
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;downShiftTask
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugModeTask
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugFreeRTOSTask
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTask
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardDebugModeTask
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux3ButtonTask
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux2Task
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux2ButtonTask
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux1Task
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux1ButtonTask
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autocrossModeTask
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerationModeTask
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::waitForVSync()
</UL>

<P><STRONG><a name="[49c]"></a>xQueueGenericReset</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[3a5]"></a>xQueueGenericSend</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
</UL>

<P><STRONG><a name="[26c]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::signalVSync()
</UL>

<P><STRONG><a name="[23b]"></a>xQueueGiveFromISR</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_callback
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
</UL>

<P><STRONG><a name="[4a0]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[470]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[49d]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[338]"></a>xTaskIncrementTick</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[480]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[488]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[47b]"></a>xTaskResumeAll</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[414]"></a>bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, canvas.o(t._ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&) &rArr; touchgfx::Outline::getCells() &rArr; touchgfx::Outline::sortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getScanlineWidth()
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::addSpan(int, int, unsigned, unsigned)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::reset()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::getCells()
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::calculateAlpha(int) const
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Renderer::render(const touchgfx::Scanline&)
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render()
</UL>

<P><STRONG><a name="[398]"></a>T2* touchgfx::makeTransition&lang;SKIDPADView, SKIDPADPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI11SKIDPADView16SKIDPADPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = T2* touchgfx::makeTransition&lang;SKIDPADView, SKIDPADPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; SKIDPADView::SKIDPADView() &rArr; SKIDPADViewBase::SKIDPADViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADView::SKIDPADView()
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SKIDPADPresenter::SKIDPADPresenter(SKIDPADView&)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSKIDPADScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[399]"></a>T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen1View::Screen1View() &rArr; Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Screen::Screen() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1Presenter::Screen1Presenter(Screen1View&)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[39a]"></a>T2* touchgfx::makeTransition&lang;SETTINGSView, SETTINGSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI12SETTINGSView17SETTINGSPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = T2* touchgfx::makeTransition&lang;SETTINGSView, SETTINGSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; SETTINGSView::SETTINGSView() &rArr; SETTINGSViewBase::SETTINGSViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSView::SETTINGSView()
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETTINGSPresenter::SETTINGSPresenter(SETTINGSView&)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSETTINGSScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[39b]"></a>T2* touchgfx::makeTransition&lang;AUTOCROSSView, AUTOCROSSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI13AUTOCROSSView18AUTOCROSSPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = T2* touchgfx::makeTransition&lang;AUTOCROSSView, AUTOCROSSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; AUTOCROSSView::AUTOCROSSView() &rArr; AUTOCROSSViewBase::AUTOCROSSViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSView::AUTOCROSSView()
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOCROSSPresenter::AUTOCROSSPresenter(AUTOCROSSView&)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoAUTOCROSSScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[39c]"></a>T2* touchgfx::makeTransition&lang;ENDURANCEView, ENDURANCEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI13ENDURANCEView18ENDURANCEPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = T2* touchgfx::makeTransition&lang;ENDURANCEView, ENDURANCEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; ENDURANCEView::ENDURANCEView() &rArr; ENDURANCEViewBase::ENDURANCEViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEView::ENDURANCEView()
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENDURANCEPresenter::ENDURANCEPresenter(ENDURANCEView&)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoENDURANCEScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[39d]"></a>T2* touchgfx::makeTransition&lang;DEBUG_MODEView, DEBUG_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI14DEBUG_MODEView19DEBUG_MODEPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = T2* touchgfx::makeTransition&lang;DEBUG_MODEView, DEBUG_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; DEBUG_MODEView::DEBUG_MODEView() &rArr; DEBUG_MODEViewBase::DEBUG_MODEViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEView::DEBUG_MODEView()
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEPresenter::DEBUG_MODEPresenter(DEBUG_MODEView&)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[39e]"></a>T2* touchgfx::makeTransition&lang;NOISE_MODEView, NOISE_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI14NOISE_MODEView19NOISE_MODEPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = T2* touchgfx::makeTransition&lang;NOISE_MODEView, NOISE_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; NOISE_MODEView::NOISE_MODEView() &rArr; NOISE_MODEViewBase::NOISE_MODEViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEView::NOISE_MODEView()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOISE_MODEPresenter::NOISE_MODEPresenter(NOISE_MODEView&)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoNOISE_MODEScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[39f]"></a>T2* touchgfx::makeTransition&lang;BOARD_DEBUGView, BOARD_DEBUGPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI15BOARD_DEBUGView20BOARD_DEBUGPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = T2* touchgfx::makeTransition&lang;BOARD_DEBUGView, BOARD_DEBUGPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; BOARD_DEBUGView::BOARD_DEBUGView() &rArr; BOARD_DEBUGViewBase::BOARD_DEBUGViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGView::BOARD_DEBUGView()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGPresenter::BOARD_DEBUGPresenter(BOARD_DEBUGView&)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[3a0]"></a>T2* touchgfx::makeTransition&lang;ACCELERATIONView, ACCELERATIONPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI16ACCELERATIONView21ACCELERATIONPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = T2* touchgfx::makeTransition&lang;ACCELERATIONView, ACCELERATIONPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; ACCELERATIONView::ACCELERATIONView() &rArr; ACCELERATIONViewBase::ACCELERATIONViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONPresenter::ACCELERATIONPresenter(ACCELERATIONView&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCELERATIONView::ACCELERATIONView()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoACCELERATIONScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[4a4]"></a>T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frontendapplicationbase.o(t._ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ACCELERATIONView, ACCELERATIONPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;BOARD_DEBUGView, BOARD_DEBUGPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;NOISE_MODEView, NOISE_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;DEBUG_MODEView, DEBUG_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ENDURANCEView, ENDURANCEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;AUTOCROSSView, AUTOCROSSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SETTINGSView, SETTINGSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SKIDPADView, SKIDPADPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[3c7]"></a>touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, boardconfiguration.o(t._ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned) &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::initialize()
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::FontManager::setFontProvider(touchgfx::FontProvider*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapDatabase::getInstanceSize()
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapDatabase::getInstance()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::touchgfx_init()
</UL>

<P><STRONG><a name="[3fd]"></a>T1 touchgfx::abs&lang;touchgfx::CWRUtil::Q5&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, line.o(t._ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T1 touchgfx::abs&lang;touchgfx::CWRUtil::Q5&rang;(T1) &rArr; touchgfx::CWRUtil::Q5::operator -() const
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>

<P><STRONG><a name="[3fc]"></a>T1 touchgfx::abs&lang;int&rang;(T1)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, line.o(t._ZN8touchgfx3absIiEET_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>

<P><STRONG><a name="[43f]"></a>T1 touchgfx::abs&lang;short&rang;(T1)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gestures.o(t._ZN8touchgfx3absIsEET_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[391]"></a>void touchgfx::Line::setLineWidth&lang;int&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board_debugviewbase.o(t._ZN8touchgfx4Line12setLineWidthIiEEvT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = void touchgfx::Line::setLineWidth&lang;int&rang;(T1) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
</UL>

<P><STRONG><a name="[390]"></a>void touchgfx::Line::setEnd&lang;int&rang;(T1, T1)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board_debugviewbase.o(t._ZN8touchgfx4Line6setEndIiEEvT_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = void touchgfx::Line::setEnd&lang;int&rang;(T1, T1) &rArr; touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
</UL>

<P><STRONG><a name="[38f]"></a>void touchgfx::Line::setStart&lang;int&rang;(T1, T1)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board_debugviewbase.o(t._ZN8touchgfx4Line8setStartIiEEvT_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = void touchgfx::Line::setStart&lang;int&rang;(T1, T1) &rArr; touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_MODEViewBase::DEBUG_MODEViewBase()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DEBUGViewBase::BOARD_DEBUGViewBase()
</UL>

<P><STRONG><a name="[3b2]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[3b5]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EE3addES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[3b6]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[534]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev), UNUSED)

<P><STRONG><a name="[1d0]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL>
<P><STRONG><a name="[396]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransition()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoACCELERATIONScreenNoTransition()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoBOARD_DEBUGScreenNoTransition()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoNOISE_MODEScreenNoTransition()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoDEBUG_MODEScreenNoTransition()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoENDURANCEScreenNoTransition()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoAUTOCROSSScreenNoTransition()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSETTINGSScreenNoTransition()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoSKIDPADScreenNoTransition()
</UL>

<P><STRONG><a name="[535]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback__sub_object(FrontendApplicationBase*, void(FrontendApplicationBase::*)())</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE), UNUSED)

<P><STRONG><a name="[1e0]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;BOARD_DEBUGView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI15BOARD_DEBUGViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI15BOARD_DEBUGViewNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[1e1]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;BOARD_DEBUGView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI15BOARD_DEBUGViewNS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI15BOARD_DEBUGViewNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[1e2]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen1Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[1e3]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen1Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[1e4]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[1e5]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[402]"></a>T1 touchgfx::CWRUtil::Q5::to&lang;short&rang;() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, line.o(t._ZNK8touchgfx7CWRUtil2Q52toIsEET_v))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>

<P><STRONG><a name="[1d1]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::isValid() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, frontendapplicationbase.o(t._ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[217]"></a>QSPI_AutoPollingMemReady</STRONG> (Thumb, 68 bytes, Stack size 96 bytes, stm32756g_eval_qspi.o(i.QSPI_AutoPollingMemReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
</UL>

<P><STRONG><a name="[218]"></a>QSPI_DummyCyclesCfg</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, stm32756g_eval_qspi.o(i.QSPI_DummyCyclesCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = QSPI_DummyCyclesCfg &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[214]"></a>QSPI_ResetMemory</STRONG> (Thumb, 82 bytes, Stack size 72 bytes, stm32756g_eval_qspi.o(i.QSPI_ResetMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = QSPI_ResetMemory &rArr; QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[215]"></a>QSPI_WriteEnable</STRONG> (Thumb, 102 bytes, Stack size 104 bytes, stm32756g_eval_qspi.o(i.QSPI_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[21e]"></a>CAN_filterConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, can.o(i.CAN_filterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_filterConfig &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Start
</UL>

<P><STRONG><a name="[1e6]"></a>__sti___22_BoardConfiguration_cpp_2f1c5dae</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___22_BoardConfiguration_cpp_2f1c5dae &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::STM32F7DMA()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.init_array)
</UL>
<P><STRONG><a name="[351]"></a>HAL_DMA2D_SetMode(__DMA2D_HandleTypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f7dma.o(i._Z17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA2D_SetMode(__DMA2D_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[80]"></a>DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7dma.o(i._Z22DMA2D_XferCpltCallbackP21__DMA2D_HandleTypeDef))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(i._ZN10STM32F7DMA10initializeEv)
</UL>
<P><STRONG><a name="[81]"></a>DMA2D_XferErrorCallback(__DMA2D_HandleTypeDef*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7dma.o(i._Z23DMA2D_XferErrorCallbackP21__DMA2D_HandleTypeDef))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(i._ZN10STM32F7DMA10initializeEv)
</UL>
<P><STRONG><a name="[357]"></a>NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7hal.o(i._Z14NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7HAL::enableInterrupts()
</UL>

<P><STRONG><a name="[358]"></a>NVIC_DisableIRQ(IRQn_Type)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7hal.o(i._Z15NVIC_DisableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7HAL::disableInterrupts()
</UL>

<P><STRONG><a name="[359]"></a>NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7hal.o(i._Z16NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7HAL::configureInterrupts()
</UL>

<P><STRONG><a name="[2c5]"></a>HAL_FMC_MspInit()</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, hw_init.o(i._Z15HAL_FMC_MspInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FMC_MspInit() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>

<P><STRONG><a name="[272]"></a>DMA2D_SetConfig</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, stm32f7xx_hal_dma2d.o(i.DMA2D_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start_IT
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_BlendingStart_IT
</UL>

<P><STRONG><a name="[298]"></a>LTDC_SetConfig</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, stm32f7xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[2d4]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[2d2]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[2d3]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[2e3]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f7xx_hal_tim_ex.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[2e4]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f7xx_hal_tim_ex.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[79]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f7xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ADC_DMAConvCplt &rArr; HAL_ADC_ConvCpltCallback &rArr; dSensors_CLUTCH &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[7b]"></a>ADC_DMAError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[7a]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[255]"></a>ADC_Init</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f7xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[2a7]"></a>NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[7d]"></a>I2C_DMAAbort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(i.I2C_DMAAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DMAAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_i2c.o(i.I2C_ITError)
</UL>
<P><STRONG><a name="[2ef]"></a>I2C_Disable_IRQ</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(i.I2C_Disable_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
</UL>

<P><STRONG><a name="[2f4]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[2ee]"></a>I2C_ITAddrCplt</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, stm32f7xx_hal_i2c.o(i.I2C_ITAddrCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_ITAddrCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[282]"></a>I2C_ITError</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_ITError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_ITError &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[2f1]"></a>I2C_ITListenCplt</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_ITListenCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_ITListenCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[2f3]"></a>I2C_ITSlaveCplt</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_ITSlaveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_ITSlaveCplt &rArr; I2C_ITListenCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[2f7]"></a>I2C_ITSlaveSequentialCplt</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_ITSlaveSequentialCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_ITSlaveSequentialCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[2f8]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f7xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[28b]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[28d]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[7e]"></a>I2C_Slave_ISR_IT</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_Slave_ISR_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Slave_ISR_IT &rArr; I2C_ITSlaveCplt &rArr; I2C_ITListenCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_i2c.o(i.I2C_ITError)
</UL>
<P><STRONG><a name="[287]"></a>I2C_TransferConfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[286]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[289]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[288]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[2ae]"></a>QSPI_Config</STRONG> (Thumb, 424 bytes, Stack size 28 bytes, stm32f7xx_hal_qspi.o(i.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>

<P><STRONG><a name="[7c]"></a>QSPI_DMAAbortCplt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f7xx_hal_qspi.o(i.QSPI_DMAAbortCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QSPI_DMAAbortCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7xx_hal_qspi.o(i.HAL_QSPI_Abort_IT)
<LI> stm32f7xx_hal_qspi.o(i.HAL_QSPI_IRQHandler)
</UL>
<P><STRONG><a name="[2aa]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Abort
</UL>

<P><STRONG><a name="[2cd]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f7xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[329]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32f7xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[32a]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32f7xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[27d]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[27c]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[27e]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[47d]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[47f]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[486]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[487]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[471]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[475]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[479]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[47c]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[8b]"></a>prvIdleTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[483]"></a>prvInitialiseNewTask</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[4a1]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[46f]"></a>makeFreeRtosPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[48b]"></a>prvHeapInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[48c]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[89]"></a>prvTaskExitError</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[8a]"></a>IdleTaskHook(void*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oswrappers.o(i._Z12IdleTaskHookPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IdleTaskHook(void*) &rArr; touchgfx::HAL::setMCUActive(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setMCUActive(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oswrappers.o(i.vApplicationIdleHook)
</UL>
<P><STRONG><a name="[3cb]"></a>touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN8touchgfx17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::clearAllTimerWidgets()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ACCELERATIONView, ACCELERATIONPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;BOARD_DEBUGView, BOARD_DEBUGPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;NOISE_MODEView, NOISE_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;DEBUG_MODEView, DEBUG_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ENDURANCEView, ENDURANCEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;AUTOCROSSView, AUTOCROSSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SETTINGSView, SETTINGSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SKIDPADView, SKIDPADPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[3cc]"></a>touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN8touchgfx18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::bindTransition(touchgfx::Transition&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ACCELERATIONView, ACCELERATIONPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;BOARD_DEBUGView, BOARD_DEBUGPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;NOISE_MODEView, NOISE_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;DEBUG_MODEView, DEBUG_MODEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;ENDURANCEView, ENDURANCEPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;AUTOCROSSView, AUTOCROSSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SETTINGSView, SETTINGSPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;SKIDPADView, SKIDPADPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[1e7]"></a>__sti___9_texts_cpp_454ca793</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, texts.o(i.__sti___9_texts_cpp_454ca793))
<BR>[Address Reference Count : 1]<UL><LI> texts.o(.init_array)
</UL>
<P><STRONG><a name="[1e8]"></a>__sti___21_typedtextdatabase_cpp_42ef4e5b</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, typedtextdatabase.o(i.__sti___21_typedtextdatabase_cpp_42ef4e5b))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = __sti___21_typedtextdatabase_cpp_42ef4e5b &rArr; getFont_Roboto_Black_100_4bpp() &rArr; touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_420_4bpp()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_180_4bpp()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_80_4bpp()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_63_4bpp()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_45_4bpp()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_35_4bpp()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Regular_25_4bpp()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_Roboto_Black_100_4bpp()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typedtextdatabase.o(.init_array)
</UL>
<P><STRONG><a name="[447]"></a>touchgfx::expand_rgb_565(unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx14expand_rgb_565Et))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
